
STM32 Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003748  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003918  08003918  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003920  08003920  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000000c  08003934  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000298  08003934  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009178  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f98  00000000  00000000  000291b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0002b150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002ba60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226da  00000000  00000000  0002c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5fb  00000000  00000000  0004e972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdd9d  00000000  00000000  00058f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126d0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022bc  00000000  00000000  00126d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080038dc 	.word	0x080038dc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080038dc 	.word	0x080038dc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_CRC_Init+0x20>)
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <MX_CRC_Init+0x24>)
 80004ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_CRC_Init+0x20>)
 80004f0:	f001 f973 	bl	80017da <HAL_CRC_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004fa:	f000 fef1 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000228 	.word	0x20000228
 8000508:	40023000 	.word	0x40023000

0800050c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <HAL_CRC_MspInit+0x3c>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d10d      	bne.n	800053a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a09      	ldr	r2, [pc, #36]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023000 	.word	0x40023000
 800054c:	40023800 	.word	0x40023800

08000550 <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <HAL_CRC_MspDeInit+0x2c>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d105      	bne.n	800056e <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <HAL_CRC_MspDeInit+0x30>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a06      	ldr	r2, [pc, #24]	; (8000580 <HAL_CRC_MspDeInit+0x30>)
 8000568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40023000 	.word	0x40023000
 8000580:	40023800 	.word	0x40023800

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	4b26      	ldr	r3, [pc, #152]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a25      	ldr	r2, [pc, #148]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b23      	ldr	r3, [pc, #140]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a17      	ldr	r2, [pc, #92]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80005f4:	4811      	ldr	r0, [pc, #68]	; (800063c <MX_GPIO_Init+0xb8>)
 80005f6:	f002 f8b9 	bl	800276c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005fa:	2301      	movs	r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_GPIO_Init+0xbc>)
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000602:	2302      	movs	r3, #2
 8000604:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4619      	mov	r1, r3
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <MX_GPIO_Init+0xc0>)
 800060e:	f001 fddd 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000612:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	2301      	movs	r3, #1
 800061a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	4619      	mov	r1, r3
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_GPIO_Init+0xb8>)
 800062c:	f001 fdce 	bl	80021cc <HAL_GPIO_Init>

}
 8000630:	bf00      	nop
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40021800 	.word	0x40021800
 8000640:	10120000 	.word	0x10120000
 8000644:	40020000 	.word	0x40020000

08000648 <BL_VerifyCommand>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static ErrorStatus BL_VerifyCommand(uint8_t Command, uint8_t CommandComplement)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
	ErrorStatus CommandExists = ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	/* Verify that the command exists */
	for(i = 0; i < BL_Num_Commands; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	73bb      	strb	r3, [r7, #14]
 8000660:	e00b      	b.n	800067a <BL_VerifyCommand+0x32>
	{
		if(Command == BL_Commands[i])
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <BL_VerifyCommand+0x5c>)
 8000666:	5cd3      	ldrb	r3, [r2, r3]
 8000668:	79fa      	ldrb	r2, [r7, #7]
 800066a:	429a      	cmp	r2, r3
 800066c:	d102      	bne.n	8000674 <BL_VerifyCommand+0x2c>
		{
			CommandExists = SUCCESS;
 800066e:	2300      	movs	r3, #0
 8000670:	73fb      	strb	r3, [r7, #15]
			break;
 8000672:	e005      	b.n	8000680 <BL_VerifyCommand+0x38>
	for(i = 0; i < BL_Num_Commands; i++)
 8000674:	7bbb      	ldrb	r3, [r7, #14]
 8000676:	3301      	adds	r3, #1
 8000678:	73bb      	strb	r3, [r7, #14]
 800067a:	7bbb      	ldrb	r3, [r7, #14]
 800067c:	2b0a      	cmp	r3, #10
 800067e:	d9f0      	bls.n	8000662 <BL_VerifyCommand+0x1a>
		else
		{

		}
	}
	if((CommandExists == SUCCESS) && ((Command ^ CommandComplement) == 0xFF))
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d107      	bne.n	8000696 <BL_VerifyCommand+0x4e>
 8000686:	79fa      	ldrb	r2, [r7, #7]
 8000688:	79bb      	ldrb	r3, [r7, #6]
 800068a:	4053      	eors	r3, r2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2bff      	cmp	r3, #255	; 0xff
 8000690:	d101      	bne.n	8000696 <BL_VerifyCommand+0x4e>
	{
		return SUCCESS;
 8000692:	2300      	movs	r3, #0
 8000694:	e000      	b.n	8000698 <BL_VerifyCommand+0x50>
	}
	else
	{
		return ERROR;
 8000696:	2301      	movs	r3, #1
	}
}
 8000698:	4618      	mov	r0, r3
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	080038f4 	.word	0x080038f4

080006a8 <BL_VerifyChecksum>:
static ErrorStatus BL_VerifyChecksum(uint8_t* pData, uint32_t Length)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
	uint8_t result = 0x00;
 80006b2:	2300      	movs	r3, #0
 80006b4:	73fb      	strb	r3, [r7, #15]

	if(Length < 2)
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d801      	bhi.n	80006c0 <BL_VerifyChecksum+0x18>
	{
		return ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	e026      	b.n	800070e <BL_VerifyChecksum+0x66>
	}
	else if(Length == 2)
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	2b02      	cmp	r3, #2
 80006c4:	d10c      	bne.n	80006e0 <BL_VerifyChecksum+0x38>
	{
		if((pData[0] ^ pData[1]) == 0xFF)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3301      	adds	r3, #1
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4053      	eors	r3, r2
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2bff      	cmp	r3, #255	; 0xff
 80006d6:	d101      	bne.n	80006dc <BL_VerifyChecksum+0x34>
		{
			return SUCCESS;
 80006d8:	2300      	movs	r3, #0
 80006da:	e018      	b.n	800070e <BL_VerifyChecksum+0x66>
		}
		else
		{
			return ERROR;
 80006dc:	2301      	movs	r3, #1
 80006de:	e016      	b.n	800070e <BL_VerifyChecksum+0x66>
		}
	}
	else
	{
		for(int i = 0; i < Length; i++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	e009      	b.n	80006fa <BL_VerifyChecksum+0x52>
		{
			result ^= pData[i];
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	4413      	add	r3, r2
 80006ec:	781a      	ldrb	r2, [r3, #0]
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	4053      	eors	r3, r2
 80006f2:	73fb      	strb	r3, [r7, #15]
		for(int i = 0; i < Length; i++)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d8f1      	bhi.n	80006e6 <BL_VerifyChecksum+0x3e>
		}
		if(result == 0x00)
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d101      	bne.n	800070c <BL_VerifyChecksum+0x64>
		{
			return SUCCESS;
 8000708:	2300      	movs	r3, #0
 800070a:	e000      	b.n	800070e <BL_VerifyChecksum+0x66>
		}
		else
		{
			return ERROR;
 800070c:	2301      	movs	r3, #1
		}
	}

}
 800070e:	4618      	mov	r0, r3
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <BL_ReverseBytes>:
static void BL_ReverseBytes(void *pStart, uint32_t Length)
{
 800071a:	b480      	push	{r7}
 800071c:	b087      	sub	sp, #28
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
 8000722:	6039      	str	r1, [r7, #0]
    uint8_t *Low = pStart;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	617b      	str	r3, [r7, #20]
    uint8_t *High = pStart + Length - 1;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	3b01      	subs	r3, #1
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	613b      	str	r3, [r7, #16]
    uint8_t Swap;
    while (Low < High)
 8000732:	e00d      	b.n	8000750 <BL_ReverseBytes+0x36>
    {
    	Swap = *Low;
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	73fb      	strb	r3, [r7, #15]
        *Low++ = *High;
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	617a      	str	r2, [r7, #20]
 8000740:	693a      	ldr	r2, [r7, #16]
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	701a      	strb	r2, [r3, #0]
        *High-- = Swap;
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	613a      	str	r2, [r7, #16]
 800074c:	7bfa      	ldrb	r2, [r7, #15]
 800074e:	701a      	strb	r2, [r3, #0]
    while (Low < High)
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	429a      	cmp	r2, r3
 8000756:	d3ed      	bcc.n	8000734 <BL_ReverseBytes+0x1a>
    }
}
 8000758:	bf00      	nop
 800075a:	bf00      	nop
 800075c:	371c      	adds	r7, #28
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <BL_Get>:
static ErrorStatus BL_Get(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	/* Send ACK byte */
	BL_TransmitBuffer[0] = BL_ACK;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <BL_Get+0x4c>)
 800076e:	2279      	movs	r2, #121	; 0x79
 8000770:	701a      	strb	r2, [r3, #0]
	/* Send the number of bytes (version + commands) */
	BL_TransmitBuffer[1] = BL_Num_Commands;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <BL_Get+0x4c>)
 8000774:	220b      	movs	r2, #11
 8000776:	705a      	strb	r2, [r3, #1]
	/* Send the bootloader version */
	BL_TransmitBuffer[2] = BL_Version;
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <BL_Get+0x4c>)
 800077a:	2270      	movs	r2, #112	; 0x70
 800077c:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 3, HAL_MAX_DELAY);
 800077e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000782:	2203      	movs	r2, #3
 8000784:	490b      	ldr	r1, [pc, #44]	; (80007b4 <BL_Get+0x4c>)
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <BL_Get+0x50>)
 8000788:	f002 fd35 	bl	80031f6 <HAL_UART_Transmit>
	/* Send the supported commands */
	HAL_UART_Transmit(&huart1, (uint8_t*)BL_Commands, BL_Num_Commands, HAL_MAX_DELAY);
 800078c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000790:	220b      	movs	r2, #11
 8000792:	490a      	ldr	r1, [pc, #40]	; (80007bc <BL_Get+0x54>)
 8000794:	4808      	ldr	r0, [pc, #32]	; (80007b8 <BL_Get+0x50>)
 8000796:	f002 fd2e 	bl	80031f6 <HAL_UART_Transmit>
	/* Send ACK byte */
	BL_TransmitBuffer[0] = BL_ACK;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <BL_Get+0x4c>)
 800079c:	2279      	movs	r2, #121	; 0x79
 800079e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007a4:	2201      	movs	r2, #1
 80007a6:	4903      	ldr	r1, [pc, #12]	; (80007b4 <BL_Get+0x4c>)
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <BL_Get+0x50>)
 80007aa:	f002 fd24 	bl	80031f6 <HAL_UART_Transmit>

	return SUCCESS;
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000128 	.word	0x20000128
 80007b8:	20000230 	.word	0x20000230
 80007bc:	080038f4 	.word	0x080038f4

080007c0 <BL_GetVersionAndProtectionStatus>:
static ErrorStatus BL_GetVersionAndProtectionStatus(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	/* Send ACK byte */
	BL_TransmitBuffer[0] = BL_ACK;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <BL_GetVersionAndProtectionStatus+0x38>)
 80007c6:	2279      	movs	r2, #121	; 0x79
 80007c8:	701a      	strb	r2, [r3, #0]
	/* Send the bootloader version */
	BL_TransmitBuffer[1] = BL_Version;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <BL_GetVersionAndProtectionStatus+0x38>)
 80007cc:	2270      	movs	r2, #112	; 0x70
 80007ce:	705a      	strb	r2, [r3, #1]
	/* Send option bytes */
	BL_TransmitBuffer[2] = 0x00;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <BL_GetVersionAndProtectionStatus+0x38>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	709a      	strb	r2, [r3, #2]
	BL_TransmitBuffer[3] = 0x00;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <BL_GetVersionAndProtectionStatus+0x38>)
 80007d8:	2200      	movs	r2, #0
 80007da:	70da      	strb	r2, [r3, #3]
	/* Send ACK byte */
	BL_TransmitBuffer[4] = BL_ACK;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <BL_GetVersionAndProtectionStatus+0x38>)
 80007de:	2279      	movs	r2, #121	; 0x79
 80007e0:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 5, HAL_MAX_DELAY);
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007e6:	2205      	movs	r2, #5
 80007e8:	4903      	ldr	r1, [pc, #12]	; (80007f8 <BL_GetVersionAndProtectionStatus+0x38>)
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <BL_GetVersionAndProtectionStatus+0x3c>)
 80007ec:	f002 fd03 	bl	80031f6 <HAL_UART_Transmit>

	return SUCCESS;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000128 	.word	0x20000128
 80007fc:	20000230 	.word	0x20000230

08000800 <BL_GetID>:
static ErrorStatus BL_GetID(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	/* Send ACK byte */
	BL_TransmitBuffer[0] = BL_ACK;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <BL_GetID+0x38>)
 8000806:	2279      	movs	r2, #121	; 0x79
 8000808:	701a      	strb	r2, [r3, #0]
	/* Send the number of bytes */
	BL_TransmitBuffer[1] = 1;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <BL_GetID+0x38>)
 800080c:	2201      	movs	r2, #1
 800080e:	705a      	strb	r2, [r3, #1]
	/* Send the process ID */
	BL_TransmitBuffer[2] = (uint8_t)((BL_PID >> 8) & 0xFF);
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <BL_GetID+0x38>)
 8000812:	2204      	movs	r2, #4
 8000814:	709a      	strb	r2, [r3, #2]
	BL_TransmitBuffer[3] = (uint8_t)(BL_PID & 0xFF);
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <BL_GetID+0x38>)
 8000818:	2219      	movs	r2, #25
 800081a:	70da      	strb	r2, [r3, #3]
	/* Send ACK byte */
	BL_TransmitBuffer[4] = BL_ACK;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <BL_GetID+0x38>)
 800081e:	2279      	movs	r2, #121	; 0x79
 8000820:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 5, HAL_MAX_DELAY);
 8000822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000826:	2205      	movs	r2, #5
 8000828:	4903      	ldr	r1, [pc, #12]	; (8000838 <BL_GetID+0x38>)
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <BL_GetID+0x3c>)
 800082c:	f002 fce3 	bl	80031f6 <HAL_UART_Transmit>

	return SUCCESS;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000128 	.word	0x20000128
 800083c:	20000230 	.word	0x20000230

08000840 <BL_ReadMemory>:
static ErrorStatus BL_ReadMemory(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
	uint32_t BL_Address;
	/* Used for storing number of read or written bytes */
	uint32_t BL_NumBytes;

	/* Is RDP active ? */
	if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 8000846:	4b37      	ldr	r3, [pc, #220]	; (8000924 <BL_ReadMemory+0xe4>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2baa      	cmp	r3, #170	; 0xaa
 800084e:	d114      	bne.n	800087a <BL_ReadMemory+0x3a>
	{
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 8000850:	4b35      	ldr	r3, [pc, #212]	; (8000928 <BL_ReadMemory+0xe8>)
 8000852:	2279      	movs	r2, #121	; 0x79
 8000854:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800085a:	2201      	movs	r2, #1
 800085c:	4932      	ldr	r1, [pc, #200]	; (8000928 <BL_ReadMemory+0xe8>)
 800085e:	4833      	ldr	r0, [pc, #204]	; (800092c <BL_ReadMemory+0xec>)
 8000860:	f002 fcc9 	bl	80031f6 <HAL_UART_Transmit>
	{
		return ERROR;
	}

	/* Receive the start address (4 bytes) with checksum */
	if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, 5, HAL_MAX_DELAY))
 8000864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000868:	2205      	movs	r2, #5
 800086a:	4931      	ldr	r1, [pc, #196]	; (8000930 <BL_ReadMemory+0xf0>)
 800086c:	482f      	ldr	r0, [pc, #188]	; (800092c <BL_ReadMemory+0xec>)
 800086e:	f002 fd54 	bl	800331a <HAL_UART_Receive>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d004      	beq.n	8000882 <BL_ReadMemory+0x42>
 8000878:	e001      	b.n	800087e <BL_ReadMemory+0x3e>
		return ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e04e      	b.n	800091c <BL_ReadMemory+0xdc>
	{

	}
	else
	{
		return ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	e04c      	b.n	800091c <BL_ReadMemory+0xdc>
	}

	/* Address valid and checksum ok ? */
	if(SUCCESS == BL_VerifyChecksum(BL_ReceiveBuffer, 5))
 8000882:	2105      	movs	r1, #5
 8000884:	482a      	ldr	r0, [pc, #168]	; (8000930 <BL_ReadMemory+0xf0>)
 8000886:	f7ff ff0f 	bl	80006a8 <BL_VerifyChecksum>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d11b      	bne.n	80008c8 <BL_ReadMemory+0x88>
	{
		/* Reverse bytes because MSB is received first */
		BL_ReverseBytes(BL_ReceiveBuffer, 4);
 8000890:	2104      	movs	r1, #4
 8000892:	4827      	ldr	r0, [pc, #156]	; (8000930 <BL_ReadMemory+0xf0>)
 8000894:	f7ff ff41 	bl	800071a <BL_ReverseBytes>
		BL_Address = *(uint32_t*)BL_ReceiveBuffer;
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <BL_ReadMemory+0xf0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	607b      	str	r3, [r7, #4]
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 800089e:	4b22      	ldr	r3, [pc, #136]	; (8000928 <BL_ReadMemory+0xe8>)
 80008a0:	2279      	movs	r2, #121	; 0x79
 80008a2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008a8:	2201      	movs	r2, #1
 80008aa:	491f      	ldr	r1, [pc, #124]	; (8000928 <BL_ReadMemory+0xe8>)
 80008ac:	481f      	ldr	r0, [pc, #124]	; (800092c <BL_ReadMemory+0xec>)
 80008ae:	f002 fca2 	bl	80031f6 <HAL_UART_Transmit>
	{
		return ERROR;
	}

	/* Receive the number of bytes to be read and a checksum */
	if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, 2, HAL_MAX_DELAY))
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008b6:	2202      	movs	r2, #2
 80008b8:	491d      	ldr	r1, [pc, #116]	; (8000930 <BL_ReadMemory+0xf0>)
 80008ba:	481c      	ldr	r0, [pc, #112]	; (800092c <BL_ReadMemory+0xec>)
 80008bc:	f002 fd2d 	bl	800331a <HAL_UART_Receive>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d004      	beq.n	80008d0 <BL_ReadMemory+0x90>
 80008c6:	e001      	b.n	80008cc <BL_ReadMemory+0x8c>
		return ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	e027      	b.n	800091c <BL_ReadMemory+0xdc>
	{

	}
	else
	{
		return ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e025      	b.n	800091c <BL_ReadMemory+0xdc>
	}

	/* Checksum ok ? */
	if(SUCCESS == BL_VerifyChecksum(BL_ReceiveBuffer, 2))
 80008d0:	2102      	movs	r1, #2
 80008d2:	4817      	ldr	r0, [pc, #92]	; (8000930 <BL_ReadMemory+0xf0>)
 80008d4:	f7ff fee8 	bl	80006a8 <BL_VerifyChecksum>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d119      	bne.n	8000912 <BL_ReadMemory+0xd2>
	{
		BL_NumBytes = BL_ReceiveBuffer[0] + 1;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <BL_ReadMemory+0xf0>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	603b      	str	r3, [r7, #0]
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <BL_ReadMemory+0xe8>)
 80008e8:	2279      	movs	r2, #121	; 0x79
 80008ea:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008f0:	2201      	movs	r2, #1
 80008f2:	490d      	ldr	r1, [pc, #52]	; (8000928 <BL_ReadMemory+0xe8>)
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <BL_ReadMemory+0xec>)
 80008f6:	f002 fc7e 	bl	80031f6 <HAL_UART_Transmit>
	{
		return ERROR;
	}

	/* Send data to host */
	if(HAL_OK == HAL_UART_Transmit(&huart1, (uint8_t*)BL_Address, BL_NumBytes, HAL_MAX_DELAY))
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <BL_ReadMemory+0xec>)
 8000906:	f002 fc76 	bl	80031f6 <HAL_UART_Transmit>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d004      	beq.n	800091a <BL_ReadMemory+0xda>
 8000910:	e001      	b.n	8000916 <BL_ReadMemory+0xd6>
		return ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e002      	b.n	800091c <BL_ReadMemory+0xdc>
	{

	}
	else
	{
		return ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e000      	b.n	800091c <BL_ReadMemory+0xdc>
	}


	return SUCCESS;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023c15 	.word	0x40023c15
 8000928:	20000128 	.word	0x20000128
 800092c:	20000230 	.word	0x20000230
 8000930:	20000028 	.word	0x20000028

08000934 <BL_Go>:
static ErrorStatus BL_Go(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
	/* Used for storing read or write addresses */
	uint32_t BL_Address;

	/* Is RDP active ? */
	if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 800093a:	4b33      	ldr	r3, [pc, #204]	; (8000a08 <BL_Go+0xd4>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2baa      	cmp	r3, #170	; 0xaa
 8000942:	d114      	bne.n	800096e <BL_Go+0x3a>
	{
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 8000944:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <BL_Go+0xd8>)
 8000946:	2279      	movs	r2, #121	; 0x79
 8000948:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 800094a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800094e:	2201      	movs	r2, #1
 8000950:	492e      	ldr	r1, [pc, #184]	; (8000a0c <BL_Go+0xd8>)
 8000952:	482f      	ldr	r0, [pc, #188]	; (8000a10 <BL_Go+0xdc>)
 8000954:	f002 fc4f 	bl	80031f6 <HAL_UART_Transmit>
	{
		return ERROR;
	}

	/* Receive the start address (4 bytes) with checksum */
	if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, 5, HAL_MAX_DELAY))
 8000958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800095c:	2205      	movs	r2, #5
 800095e:	492d      	ldr	r1, [pc, #180]	; (8000a14 <BL_Go+0xe0>)
 8000960:	482b      	ldr	r0, [pc, #172]	; (8000a10 <BL_Go+0xdc>)
 8000962:	f002 fcda 	bl	800331a <HAL_UART_Receive>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d004      	beq.n	8000976 <BL_Go+0x42>
 800096c:	e001      	b.n	8000972 <BL_Go+0x3e>
		return ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e046      	b.n	8000a00 <BL_Go+0xcc>
	{
	}
	else
	{
		return ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e044      	b.n	8000a00 <BL_Go+0xcc>
	}

	/* Address valid and checksum ok ? */
	if(SUCCESS == BL_VerifyChecksum(BL_ReceiveBuffer, 5))
 8000976:	2105      	movs	r1, #5
 8000978:	4826      	ldr	r0, [pc, #152]	; (8000a14 <BL_Go+0xe0>)
 800097a:	f7ff fe95 	bl	80006a8 <BL_VerifyChecksum>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d13c      	bne.n	80009fe <BL_Go+0xca>
	{
		/* Reverse bytes because MSB is received first */
		BL_ReverseBytes(BL_ReceiveBuffer, 4);
 8000984:	2104      	movs	r1, #4
 8000986:	4823      	ldr	r0, [pc, #140]	; (8000a14 <BL_Go+0xe0>)
 8000988:	f7ff fec7 	bl	800071a <BL_ReverseBytes>
		BL_Address = *(uint32_t*)BL_ReceiveBuffer;
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <BL_Go+0xe0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	60fb      	str	r3, [r7, #12]
		return ERROR;
	}

	/* First byte lies in stack */
	/* Send ACK byte */
	BL_TransmitBuffer[0] = BL_ACK;
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <BL_Go+0xd8>)
 8000994:	2279      	movs	r2, #121	; 0x79
 8000996:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800099c:	2201      	movs	r2, #1
 800099e:	491b      	ldr	r1, [pc, #108]	; (8000a0c <BL_Go+0xd8>)
 80009a0:	481b      	ldr	r0, [pc, #108]	; (8000a10 <BL_Go+0xdc>)
 80009a2:	f002 fc28 	bl	80031f6 <HAL_UART_Transmit>

	/* Deinitialize all used peripherals */
	/* Deinitialize GPIO */
	HAL_GPIO_DeInit(B1_GPIO_Port, B1_Pin);
 80009a6:	2101      	movs	r1, #1
 80009a8:	481b      	ldr	r0, [pc, #108]	; (8000a18 <BL_Go+0xe4>)
 80009aa:	f001 fdbb 	bl	8002524 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(LD3_GPIO_Port, LD3_Pin);
 80009ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b2:	481a      	ldr	r0, [pc, #104]	; (8000a1c <BL_Go+0xe8>)
 80009b4:	f001 fdb6 	bl	8002524 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(LD4_GPIO_Port, LD4_Pin);
 80009b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009bc:	4817      	ldr	r0, [pc, #92]	; (8000a1c <BL_Go+0xe8>)
 80009be:	f001 fdb1 	bl	8002524 <HAL_GPIO_DeInit>
	/* Deinitialize USART */
	HAL_UART_MspDeInit(&huart1);
 80009c2:	4813      	ldr	r0, [pc, #76]	; (8000a10 <BL_Go+0xdc>)
 80009c4:	f000 fd6a 	bl	800149c <HAL_UART_MspDeInit>
	/* Deinitialize CRC */
	HAL_CRC_MspDeInit(&hcrc);
 80009c8:	4815      	ldr	r0, [pc, #84]	; (8000a20 <BL_Go+0xec>)
 80009ca:	f7ff fdc1 	bl	8000550 <HAL_CRC_MspDeInit>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80009ce:	f3bf 8f5f 	dmb	sy
}
 80009d2:	bf00      	nop
	/* Move vector table */
	__DMB();
	SCB->VTOR = BL_Address;
 80009d4:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <BL_Go+0xf0>)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80009da:	f3bf 8f4f 	dsb	sy
}
 80009de:	bf00      	nop
	__DSB();
	/* Set the MSP */
	__set_MSP(*(uint32_t *)BL_Address);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f383 8808 	msr	MSP, r3
}
 80009ec:	bf00      	nop
	/* Jump to user application */
	void (*JumpAddress)(void) = (void*)(*((uint32_t*)(BL_Address + 4)));
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	3304      	adds	r3, #4
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	60bb      	str	r3, [r7, #8]
	JumpAddress();
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	4798      	blx	r3

	return SUCCESS;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <BL_Go+0xcc>
		return ERROR;
 80009fe:	2301      	movs	r3, #1

}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023c15 	.word	0x40023c15
 8000a0c:	20000128 	.word	0x20000128
 8000a10:	20000230 	.word	0x20000230
 8000a14:	20000028 	.word	0x20000028
 8000a18:	40020000 	.word	0x40020000
 8000a1c:	40021800 	.word	0x40021800
 8000a20:	20000228 	.word	0x20000228
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <BL_WriteMemory>:
static ErrorStatus BL_WriteMemory(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
	uint32_t BL_NumBytes;
	/* Iterator */
	uint32_t i;

	/* Is RDP active ? */
	if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 8000a2e:	4b72      	ldr	r3, [pc, #456]	; (8000bf8 <BL_WriteMemory+0x1d0>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2baa      	cmp	r3, #170	; 0xaa
 8000a36:	d114      	bne.n	8000a62 <BL_WriteMemory+0x3a>
	{
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 8000a38:	4b70      	ldr	r3, [pc, #448]	; (8000bfc <BL_WriteMemory+0x1d4>)
 8000a3a:	2279      	movs	r2, #121	; 0x79
 8000a3c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a42:	2201      	movs	r2, #1
 8000a44:	496d      	ldr	r1, [pc, #436]	; (8000bfc <BL_WriteMemory+0x1d4>)
 8000a46:	486e      	ldr	r0, [pc, #440]	; (8000c00 <BL_WriteMemory+0x1d8>)
 8000a48:	f002 fbd5 	bl	80031f6 <HAL_UART_Transmit>
	{
		return ERROR;
	}

	/* Receive the start address (4 bytes) with checksum */
	if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, 5, HAL_MAX_DELAY))
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a50:	2205      	movs	r2, #5
 8000a52:	496c      	ldr	r1, [pc, #432]	; (8000c04 <BL_WriteMemory+0x1dc>)
 8000a54:	486a      	ldr	r0, [pc, #424]	; (8000c00 <BL_WriteMemory+0x1d8>)
 8000a56:	f002 fc60 	bl	800331a <HAL_UART_Receive>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d004      	beq.n	8000a6a <BL_WriteMemory+0x42>
 8000a60:	e001      	b.n	8000a66 <BL_WriteMemory+0x3e>
		return ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e0c4      	b.n	8000bf0 <BL_WriteMemory+0x1c8>
	{

	}
	else
	{
		return ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e0c2      	b.n	8000bf0 <BL_WriteMemory+0x1c8>
	}


	/* Address valid and checksum ok ? */
	if(SUCCESS == BL_VerifyChecksum(BL_ReceiveBuffer, 5))
 8000a6a:	2105      	movs	r1, #5
 8000a6c:	4865      	ldr	r0, [pc, #404]	; (8000c04 <BL_WriteMemory+0x1dc>)
 8000a6e:	f7ff fe1b 	bl	80006a8 <BL_VerifyChecksum>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d11b      	bne.n	8000ab0 <BL_WriteMemory+0x88>
	{
		/* Reverse bytes because MSB is received first */
		BL_ReverseBytes(BL_ReceiveBuffer, 4);
 8000a78:	2104      	movs	r1, #4
 8000a7a:	4862      	ldr	r0, [pc, #392]	; (8000c04 <BL_WriteMemory+0x1dc>)
 8000a7c:	f7ff fe4d 	bl	800071a <BL_ReverseBytes>
		BL_Address = *(uint32_t*)BL_ReceiveBuffer;
 8000a80:	4b60      	ldr	r3, [pc, #384]	; (8000c04 <BL_WriteMemory+0x1dc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60fb      	str	r3, [r7, #12]
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 8000a86:	4b5d      	ldr	r3, [pc, #372]	; (8000bfc <BL_WriteMemory+0x1d4>)
 8000a88:	2279      	movs	r2, #121	; 0x79
 8000a8a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a90:	2201      	movs	r2, #1
 8000a92:	495a      	ldr	r1, [pc, #360]	; (8000bfc <BL_WriteMemory+0x1d4>)
 8000a94:	485a      	ldr	r0, [pc, #360]	; (8000c00 <BL_WriteMemory+0x1d8>)
 8000a96:	f002 fbae 	bl	80031f6 <HAL_UART_Transmit>
	{
		return ERROR;
	}

	/* Receive the number of bytes to be written */
	if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, 1, HAL_MAX_DELAY))
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4958      	ldr	r1, [pc, #352]	; (8000c04 <BL_WriteMemory+0x1dc>)
 8000aa2:	4857      	ldr	r0, [pc, #348]	; (8000c00 <BL_WriteMemory+0x1d8>)
 8000aa4:	f002 fc39 	bl	800331a <HAL_UART_Receive>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d114      	bne.n	8000ad8 <BL_WriteMemory+0xb0>
 8000aae:	e001      	b.n	8000ab4 <BL_WriteMemory+0x8c>
		return ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e09d      	b.n	8000bf0 <BL_WriteMemory+0x1c8>
	{

		BL_NumBytes = BL_ReceiveBuffer[0] + 1;
 8000ab4:	4b53      	ldr	r3, [pc, #332]	; (8000c04 <BL_WriteMemory+0x1dc>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
	{
		return ERROR;
	}

	/* Receive the data and the checksum */
	if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, BL_NumBytes + 1, HAL_MAX_DELAY))
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ac8:	494e      	ldr	r1, [pc, #312]	; (8000c04 <BL_WriteMemory+0x1dc>)
 8000aca:	484d      	ldr	r0, [pc, #308]	; (8000c00 <BL_WriteMemory+0x1d8>)
 8000acc:	f002 fc25 	bl	800331a <HAL_UART_Receive>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d004      	beq.n	8000ae0 <BL_WriteMemory+0xb8>
 8000ad6:	e001      	b.n	8000adc <BL_WriteMemory+0xb4>
		return ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e089      	b.n	8000bf0 <BL_WriteMemory+0x1c8>
	{

	}
	else
	{
		return ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e087      	b.n	8000bf0 <BL_WriteMemory+0x1c8>
	}

	/* checksum ok ? */
	if(SUCCESS == BL_VerifyChecksum(BL_ReceiveBuffer, BL_NumBytes + 1))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4847      	ldr	r0, [pc, #284]	; (8000c04 <BL_WriteMemory+0x1dc>)
 8000ae8:	f7ff fdde 	bl	80006a8 <BL_VerifyChecksum>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <BL_WriteMemory+0xce>
	{

	}
	else
	{
		return ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e07c      	b.n	8000bf0 <BL_WriteMemory+0x1c8>
	}

	/* Option byte address */
	if((BL_Address >= 0x1FFFC000 && BL_Address <= 0x1FFFC00F) || (BL_Address >= 0x1FFEC000 && BL_Address <= 0x1FFEC00F))
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4a43      	ldr	r2, [pc, #268]	; (8000c08 <BL_WriteMemory+0x1e0>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d903      	bls.n	8000b06 <BL_WriteMemory+0xde>
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	4a42      	ldr	r2, [pc, #264]	; (8000c0c <BL_WriteMemory+0x1e4>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d907      	bls.n	8000b16 <BL_WriteMemory+0xee>
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4a41      	ldr	r2, [pc, #260]	; (8000c10 <BL_WriteMemory+0x1e8>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d919      	bls.n	8000b42 <BL_WriteMemory+0x11a>
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4a40      	ldr	r2, [pc, #256]	; (8000c14 <BL_WriteMemory+0x1ec>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d815      	bhi.n	8000b42 <BL_WriteMemory+0x11a>
	{
		/* Unlock option bytes */
		if(HAL_OK == HAL_FLASH_OB_Unlock())
 8000b16:	f000 ff03 	bl	8001920 <HAL_FLASH_OB_Unlock>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d15c      	bne.n	8000bda <BL_WriteMemory+0x1b2>
		{
			/* Write the received data to Option byte area from start address */
			*(uint8_t*)BL_Address = BL_ReceiveBuffer[0];
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4a38      	ldr	r2, [pc, #224]	; (8000c04 <BL_WriteMemory+0x1dc>)
 8000b24:	7812      	ldrb	r2, [r2, #0]
 8000b26:	701a      	strb	r2, [r3, #0]

			/* Lock option bytes */
			 HAL_FLASH_OB_Lock();
 8000b28:	f000 ff16 	bl	8001958 <HAL_FLASH_OB_Lock>

			/* Send ACK byte */
			BL_TransmitBuffer[0] = BL_ACK;
 8000b2c:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <BL_WriteMemory+0x1d4>)
 8000b2e:	2279      	movs	r2, #121	; 0x79
 8000b30:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b36:	2201      	movs	r2, #1
 8000b38:	4930      	ldr	r1, [pc, #192]	; (8000bfc <BL_WriteMemory+0x1d4>)
 8000b3a:	4831      	ldr	r0, [pc, #196]	; (8000c00 <BL_WriteMemory+0x1d8>)
 8000b3c:	f002 fb5b 	bl	80031f6 <HAL_UART_Transmit>
		if(HAL_OK == HAL_FLASH_OB_Unlock())
 8000b40:	e04b      	b.n	8000bda <BL_WriteMemory+0x1b2>
		}
	}
	/* Flash Address */
	else if(((uint32_t*)BL_Address >= &_flash_start) && ((uint32_t*)BL_Address <= &_flash_end))
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4a34      	ldr	r2, [pc, #208]	; (8000c18 <BL_WriteMemory+0x1f0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d329      	bcc.n	8000b9e <BL_WriteMemory+0x176>
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4a33      	ldr	r2, [pc, #204]	; (8000c1c <BL_WriteMemory+0x1f4>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d825      	bhi.n	8000b9e <BL_WriteMemory+0x176>
	{
		/* Unlock the flash memory */
		if(HAL_OK == HAL_FLASH_Unlock())
 8000b52:	f000 feb3 	bl	80018bc <HAL_FLASH_Unlock>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d11e      	bne.n	8000b9a <BL_WriteMemory+0x172>
		{
			for(i = 0; i < BL_NumBytes; i++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	e014      	b.n	8000b8c <BL_WriteMemory+0x164>
			{
				if(HAL_OK == HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, BL_Address++, BL_ReceiveBuffer[i]))
 8000b62:	68f9      	ldr	r1, [r7, #12]
 8000b64:	1c4b      	adds	r3, r1, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4a26      	ldr	r2, [pc, #152]	; (8000c04 <BL_WriteMemory+0x1dc>)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	f04f 0300 	mov.w	r3, #0
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 fe4c 	bl	8001814 <HAL_FLASH_Program>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <BL_WriteMemory+0x15e>
				{

				}
				else
				{
					return ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e034      	b.n	8000bf0 <BL_WriteMemory+0x1c8>
			for(i = 0; i < BL_NumBytes; i++)
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68ba      	ldr	r2, [r7, #8]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d3e6      	bcc.n	8000b62 <BL_WriteMemory+0x13a>
				}
			}

			HAL_FLASH_Lock();
 8000b94:	f000 feb4 	bl	8001900 <HAL_FLASH_Lock>
		if(HAL_OK == HAL_FLASH_Unlock())
 8000b98:	e01f      	b.n	8000bda <BL_WriteMemory+0x1b2>
		}
		else
		{
			return ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e028      	b.n	8000bf0 <BL_WriteMemory+0x1c8>
		}
	}
	/* RAM Address */
	else if(((uint32_t*)BL_Address >= &_ram_start) && ((uint32_t*)BL_Address < &_ram_end))
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <BL_WriteMemory+0x1f8>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d317      	bcc.n	8000bd6 <BL_WriteMemory+0x1ae>
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4a1e      	ldr	r2, [pc, #120]	; (8000c24 <BL_WriteMemory+0x1fc>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d213      	bcs.n	8000bd6 <BL_WriteMemory+0x1ae>
	{
		for(i = 0; i < BL_NumBytes; i++)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	e00b      	b.n	8000bcc <BL_WriteMemory+0x1a4>
		{
			*(uint8_t*)BL_Address = BL_ReceiveBuffer[i];
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4913      	ldr	r1, [pc, #76]	; (8000c04 <BL_WriteMemory+0x1dc>)
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	440a      	add	r2, r1
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	701a      	strb	r2, [r3, #0]
			BL_Address++;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < BL_NumBytes; i++)
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d3ef      	bcc.n	8000bb4 <BL_WriteMemory+0x18c>
	else if(((uint32_t*)BL_Address >= &_ram_start) && ((uint32_t*)BL_Address < &_ram_end))
 8000bd4:	e001      	b.n	8000bda <BL_WriteMemory+0x1b2>
		}
	}
	else
	{
		return ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00a      	b.n	8000bf0 <BL_WriteMemory+0x1c8>
	}

	/* Send ACK byte */
	BL_TransmitBuffer[0] = BL_ACK;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <BL_WriteMemory+0x1d4>)
 8000bdc:	2279      	movs	r2, #121	; 0x79
 8000bde:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000be4:	2201      	movs	r2, #1
 8000be6:	4905      	ldr	r1, [pc, #20]	; (8000bfc <BL_WriteMemory+0x1d4>)
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <BL_WriteMemory+0x1d8>)
 8000bea:	f002 fb04 	bl	80031f6 <HAL_UART_Transmit>

	return SUCCESS;
 8000bee:	2300      	movs	r3, #0

}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023c15 	.word	0x40023c15
 8000bfc:	20000128 	.word	0x20000128
 8000c00:	20000230 	.word	0x20000230
 8000c04:	20000028 	.word	0x20000028
 8000c08:	1fffbfff 	.word	0x1fffbfff
 8000c0c:	1fffc00f 	.word	0x1fffc00f
 8000c10:	1ffebfff 	.word	0x1ffebfff
 8000c14:	1ffec00f 	.word	0x1ffec00f
 8000c18:	08000000 	.word	0x08000000
 8000c1c:	08200000 	.word	0x08200000
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20030000 	.word	0x20030000

08000c28 <BL_EraseMemory>:
static ErrorStatus BL_EraseMemory(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
	/* Used for storing the number of pages to be erased */
	uint8_t BL_NumPages;

	/* Used for erasing memory */
	FLASH_EraseInitTypeDef FLASH_EraseInit;
	FLASH_EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	617b      	str	r3, [r7, #20]

	/* Iterator */
	uint32_t i;

	/* Is RDP active ? */
	if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 8000c32:	4b46      	ldr	r3, [pc, #280]	; (8000d4c <BL_EraseMemory+0x124>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2baa      	cmp	r3, #170	; 0xaa
 8000c3a:	d115      	bne.n	8000c68 <BL_EraseMemory+0x40>
	{
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 8000c3c:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <BL_EraseMemory+0x128>)
 8000c3e:	2279      	movs	r2, #121	; 0x79
 8000c40:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c46:	2201      	movs	r2, #1
 8000c48:	4941      	ldr	r1, [pc, #260]	; (8000d50 <BL_EraseMemory+0x128>)
 8000c4a:	4842      	ldr	r0, [pc, #264]	; (8000d54 <BL_EraseMemory+0x12c>)
 8000c4c:	f002 fad3 	bl	80031f6 <HAL_UART_Transmit>
	{
		return ERROR;
	}

	/* Receive the number of pages to be erased */
	if(HAL_OK == HAL_UART_Receive(&huart1, &BL_NumPages, 1, HAL_MAX_DELAY))
 8000c50:	f107 011b 	add.w	r1, r7, #27
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c58:	2201      	movs	r2, #1
 8000c5a:	483e      	ldr	r0, [pc, #248]	; (8000d54 <BL_EraseMemory+0x12c>)
 8000c5c:	f002 fb5d 	bl	800331a <HAL_UART_Receive>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d004      	beq.n	8000c70 <BL_EraseMemory+0x48>
 8000c66:	e001      	b.n	8000c6c <BL_EraseMemory+0x44>
		return ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e06b      	b.n	8000d44 <BL_EraseMemory+0x11c>
	{

	}
	else
	{
		return ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e069      	b.n	8000d44 <BL_EraseMemory+0x11c>
	}

	/* Start global erase (Mass Erase) */
	if(BL_NumPages == 0xFF)
 8000c70:	7efb      	ldrb	r3, [r7, #27]
 8000c72:	2bff      	cmp	r3, #255	; 0xff
 8000c74:	d118      	bne.n	8000ca8 <BL_EraseMemory+0x80>
	{
		/* Unlock the flash memory */
		if(HAL_OK == HAL_FLASH_Unlock())
 8000c76:	f000 fe21 	bl	80018bc <HAL_FLASH_Unlock>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d111      	bne.n	8000ca4 <BL_EraseMemory+0x7c>
		{
			FLASH_EraseInit.Banks = FLASH_BANK_BOTH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	60bb      	str	r3, [r7, #8]
			FLASH_EraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000c84:	2301      	movs	r3, #1
 8000c86:	607b      	str	r3, [r7, #4]

			if(HAL_OK == HAL_FLASHEx_Erase(&FLASH_EraseInit, &SectorError))
 8000c88:	463a      	mov	r2, r7
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 ffb2 	bl	8001bf8 <HAL_FLASHEx_Erase>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <BL_EraseMemory+0x76>
			{

			}
			else
			{
				return ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e052      	b.n	8000d44 <BL_EraseMemory+0x11c>
			}
			HAL_FLASH_Lock();
 8000c9e:	f000 fe2f 	bl	8001900 <HAL_FLASH_Lock>
 8000ca2:	e044      	b.n	8000d2e <BL_EraseMemory+0x106>
		}
		else
		{
			return ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e04d      	b.n	8000d44 <BL_EraseMemory+0x11c>
		}
	}
	else
	{
		/* Receive the page codes */
		if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, BL_NumPages + 1, HAL_MAX_DELAY))
 8000ca8:	7efb      	ldrb	r3, [r7, #27]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	3301      	adds	r3, #1
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb4:	4928      	ldr	r1, [pc, #160]	; (8000d58 <BL_EraseMemory+0x130>)
 8000cb6:	4827      	ldr	r0, [pc, #156]	; (8000d54 <BL_EraseMemory+0x12c>)
 8000cb8:	f002 fb2f 	bl	800331a <HAL_UART_Receive>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <BL_EraseMemory+0x9e>
		{

		}
		else
		{
			return ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e03e      	b.n	8000d44 <BL_EraseMemory+0x11c>
		}

		/* Checksum OK ? */
		if(SUCCESS == BL_VerifyChecksum(BL_ReceiveBuffer, BL_NumPages + 1))
 8000cc6:	7efb      	ldrb	r3, [r7, #27]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4822      	ldr	r0, [pc, #136]	; (8000d58 <BL_EraseMemory+0x130>)
 8000cce:	f7ff fceb 	bl	80006a8 <BL_VerifyChecksum>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <BL_EraseMemory+0xb4>
		{

		}
		else
		{
			return ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e033      	b.n	8000d44 <BL_EraseMemory+0x11c>
		}

		/* Erase the corresponding pages */
		FLASH_EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
		FLASH_EraseInit.NbSectors = 1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]

		/* Unlock the flash memory */
		if(HAL_OK == HAL_FLASH_Unlock())
 8000ce4:	f000 fdea 	bl	80018bc <HAL_FLASH_Unlock>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d11d      	bne.n	8000d2a <BL_EraseMemory+0x102>
		{
			for(i = 0; i < BL_NumPages; i++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
 8000cf2:	e012      	b.n	8000d1a <BL_EraseMemory+0xf2>
			{
				FLASH_EraseInit.Sector = (uint32_t)BL_ReceiveBuffer[i];
 8000cf4:	4a18      	ldr	r2, [pc, #96]	; (8000d58 <BL_EraseMemory+0x130>)
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	60fb      	str	r3, [r7, #12]
				if(HAL_OK == HAL_FLASHEx_Erase(&FLASH_EraseInit, &SectorError))
 8000cfe:	463a      	mov	r2, r7
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 ff77 	bl	8001bf8 <HAL_FLASHEx_Erase>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <BL_EraseMemory+0xec>
				{

				}
				else
				{
					return ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e017      	b.n	8000d44 <BL_EraseMemory+0x11c>
			for(i = 0; i < BL_NumPages; i++)
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	3301      	adds	r3, #1
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	7efb      	ldrb	r3, [r7, #27]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d3e7      	bcc.n	8000cf4 <BL_EraseMemory+0xcc>
				}
			}
			HAL_FLASH_Lock();
 8000d24:	f000 fdec 	bl	8001900 <HAL_FLASH_Lock>
 8000d28:	e001      	b.n	8000d2e <BL_EraseMemory+0x106>
		}
		else
		{
			return ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00a      	b.n	8000d44 <BL_EraseMemory+0x11c>
		}
	}

	/* Send ACK byte */
	BL_TransmitBuffer[0] = BL_ACK;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <BL_EraseMemory+0x128>)
 8000d30:	2279      	movs	r2, #121	; 0x79
 8000d32:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4905      	ldr	r1, [pc, #20]	; (8000d50 <BL_EraseMemory+0x128>)
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <BL_EraseMemory+0x12c>)
 8000d3e:	f002 fa5a 	bl	80031f6 <HAL_UART_Transmit>

	return SUCCESS;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3720      	adds	r7, #32
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023c15 	.word	0x40023c15
 8000d50:	20000128 	.word	0x20000128
 8000d54:	20000230 	.word	0x20000230
 8000d58:	20000028 	.word	0x20000028

08000d5c <BL_WriteProtect>:
static ErrorStatus BL_WriteProtect(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
	/* Used for storing the number of sectors to be protected */
	uint8_t BL_NumSectors;

	/* Used for enabling write protection */
	FLASH_OBProgramInitTypeDef OBInit;
	OBInit.OptionType = OPTIONBYTE_WRP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
	OBInit.WRPState = OB_WRPSTATE_ENABLE;
 8000d66:	2301      	movs	r3, #1
 8000d68:	60bb      	str	r3, [r7, #8]
	OBInit.Banks = FLASH_BANK_BOTH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	613b      	str	r3, [r7, #16]

	/* Is RDP active ? */
	if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 8000d6e:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <BL_WriteProtect+0xec>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2baa      	cmp	r3, #170	; 0xaa
 8000d76:	d115      	bne.n	8000da4 <BL_WriteProtect+0x48>
	{
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 8000d78:	4b34      	ldr	r3, [pc, #208]	; (8000e4c <BL_WriteProtect+0xf0>)
 8000d7a:	2279      	movs	r2, #121	; 0x79
 8000d7c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d82:	2201      	movs	r2, #1
 8000d84:	4931      	ldr	r1, [pc, #196]	; (8000e4c <BL_WriteProtect+0xf0>)
 8000d86:	4832      	ldr	r0, [pc, #200]	; (8000e50 <BL_WriteProtect+0xf4>)
 8000d88:	f002 fa35 	bl	80031f6 <HAL_UART_Transmit>
	{
		return ERROR;
	}

	/* Receive the number of sectors to be protected */
	if(HAL_OK == HAL_UART_Receive(&huart1, &BL_NumSectors, 1, HAL_MAX_DELAY))
 8000d8c:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d94:	2201      	movs	r2, #1
 8000d96:	482e      	ldr	r0, [pc, #184]	; (8000e50 <BL_WriteProtect+0xf4>)
 8000d98:	f002 fabf 	bl	800331a <HAL_UART_Receive>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d004      	beq.n	8000dac <BL_WriteProtect+0x50>
 8000da2:	e001      	b.n	8000da8 <BL_WriteProtect+0x4c>
		return ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e04b      	b.n	8000e40 <BL_WriteProtect+0xe4>
	{

	}
	else
	{
		return ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e049      	b.n	8000e40 <BL_WriteProtect+0xe4>
	}

	/* Receive the sector codes */
	if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, BL_NumSectors + 1, HAL_MAX_DELAY))
 8000dac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	3301      	adds	r3, #1
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dba:	4926      	ldr	r1, [pc, #152]	; (8000e54 <BL_WriteProtect+0xf8>)
 8000dbc:	4824      	ldr	r0, [pc, #144]	; (8000e50 <BL_WriteProtect+0xf4>)
 8000dbe:	f002 faac 	bl	800331a <HAL_UART_Receive>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <BL_WriteProtect+0x70>
	{

	}
	else
	{
		return ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e039      	b.n	8000e40 <BL_WriteProtect+0xe4>
	}

	/* Checksum OK ? */
	if(SUCCESS == BL_VerifyChecksum(BL_ReceiveBuffer, BL_NumSectors + 1))
 8000dcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	481f      	ldr	r0, [pc, #124]	; (8000e54 <BL_WriteProtect+0xf8>)
 8000dd6:	f7ff fc67 	bl	80006a8 <BL_VerifyChecksum>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <BL_WriteProtect+0x88>
	{

	}
	else
	{
		return ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e02d      	b.n	8000e40 <BL_WriteProtect+0xe4>
	}

	/* Unlock the option bytes */
	if(HAL_OK == HAL_FLASH_OB_Unlock())
 8000de4:	f000 fd9c 	bl	8001920 <HAL_FLASH_OB_Unlock>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d127      	bne.n	8000e3e <BL_WriteProtect+0xe2>
	{
		/* Enable write protection for selected sectors */
		for(i = 0; i < BL_NumSectors; i++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
 8000df2:	e010      	b.n	8000e16 <BL_WriteProtect+0xba>
		{
			OBInit.WRPSector = BL_ReceiveBuffer[i];
 8000df4:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <BL_WriteProtect+0xf8>)
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	4413      	add	r3, r2
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
			if(HAL_OK == HAL_FLASHEx_OBProgram(&OBInit))
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 ff6b 	bl	8001cdc <HAL_FLASHEx_OBProgram>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <BL_WriteProtect+0xb4>
			{

			}
			else
			{
				return ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e017      	b.n	8000e40 <BL_WriteProtect+0xe4>
		for(i = 0; i < BL_NumSectors; i++)
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	3301      	adds	r3, #1
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
 8000e16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d3e8      	bcc.n	8000df4 <BL_WriteProtect+0x98>
			}
		}
		HAL_FLASH_OB_Lock();
 8000e22:	f000 fd99 	bl	8001958 <HAL_FLASH_OB_Lock>
	{
		return ERROR;
	}

	/* Send ACK byte */
	BL_TransmitBuffer[0] = BL_ACK;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <BL_WriteProtect+0xf0>)
 8000e28:	2279      	movs	r2, #121	; 0x79
 8000e2a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e30:	2201      	movs	r2, #1
 8000e32:	4906      	ldr	r1, [pc, #24]	; (8000e4c <BL_WriteProtect+0xf0>)
 8000e34:	4806      	ldr	r0, [pc, #24]	; (8000e50 <BL_WriteProtect+0xf4>)
 8000e36:	f002 f9de 	bl	80031f6 <HAL_UART_Transmit>


	return SUCCESS;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <BL_WriteProtect+0xe4>
		return ERROR;
 8000e3e:	2301      	movs	r3, #1

}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023c15 	.word	0x40023c15
 8000e4c:	20000128 	.word	0x20000128
 8000e50:	20000230 	.word	0x20000230
 8000e54:	20000028 	.word	0x20000028

08000e58 <BL_WriteUnprotect>:
static ErrorStatus BL_WriteUnprotect(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
	/* Used for disabling write protection */
	FLASH_OBProgramInitTypeDef OBInit;
	OBInit.OptionType = OPTIONBYTE_WRP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	607b      	str	r3, [r7, #4]
	OBInit.WRPState = OB_WRPSTATE_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
	OBInit.Banks = FLASH_BANK_BOTH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	613b      	str	r3, [r7, #16]
	OBInit.WRPSector = OB_WRP_SECTOR_All;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <BL_WriteUnprotect+0x7c>)
 8000e6c:	60fb      	str	r3, [r7, #12]

	/* Is RDP active ? */
	if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <BL_WriteUnprotect+0x80>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2baa      	cmp	r3, #170	; 0xaa
 8000e76:	d10f      	bne.n	8000e98 <BL_WriteUnprotect+0x40>
	{
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <BL_WriteUnprotect+0x84>)
 8000e7a:	2279      	movs	r2, #121	; 0x79
 8000e7c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e82:	2201      	movs	r2, #1
 8000e84:	4915      	ldr	r1, [pc, #84]	; (8000edc <BL_WriteUnprotect+0x84>)
 8000e86:	4816      	ldr	r0, [pc, #88]	; (8000ee0 <BL_WriteUnprotect+0x88>)
 8000e88:	f002 f9b5 	bl	80031f6 <HAL_UART_Transmit>
		return ERROR;
	}


	/* Unlock the option bytes */
	if(HAL_OK == HAL_FLASH_OB_Unlock())
 8000e8c:	f000 fd48 	bl	8001920 <HAL_FLASH_OB_Unlock>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d119      	bne.n	8000eca <BL_WriteUnprotect+0x72>
 8000e96:	e001      	b.n	8000e9c <BL_WriteUnprotect+0x44>
		return ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e017      	b.n	8000ecc <BL_WriteUnprotect+0x74>
	{
		/* Remove the protection for the whole Flash memory */
		if(HAL_OK == HAL_FLASHEx_OBProgram(&OBInit))
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 ff1c 	bl	8001cdc <HAL_FLASHEx_OBProgram>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10d      	bne.n	8000ec6 <BL_WriteUnprotect+0x6e>
		{
			/* Send ACK byte */
			BL_TransmitBuffer[0] = BL_ACK;
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <BL_WriteUnprotect+0x84>)
 8000eac:	2279      	movs	r2, #121	; 0x79
 8000eae:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4909      	ldr	r1, [pc, #36]	; (8000edc <BL_WriteUnprotect+0x84>)
 8000eb8:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <BL_WriteUnprotect+0x88>)
 8000eba:	f002 f99c 	bl	80031f6 <HAL_UART_Transmit>
		}
		else
		{
			return ERROR;
		}
		HAL_FLASH_OB_Lock();
 8000ebe:	f000 fd4b 	bl	8001958 <HAL_FLASH_OB_Lock>
	else
	{
		return ERROR;
	}

	return SUCCESS;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e002      	b.n	8000ecc <BL_WriteUnprotect+0x74>
			return ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <BL_WriteUnprotect+0x74>
		return ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	00fff000 	.word	0x00fff000
 8000ed8:	40023c15 	.word	0x40023c15
 8000edc:	20000128 	.word	0x20000128
 8000ee0:	20000230 	.word	0x20000230

08000ee4 <BL_ReadoutProtect>:
static ErrorStatus BL_ReadoutProtect(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
	/* Used for enabling readout protection */
	FLASH_OBProgramInitTypeDef OBInit;
	OBInit.OptionType = OPTIONBYTE_RDP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	607b      	str	r3, [r7, #4]
	OBInit.RDPLevel = OB_RDP_LEVEL_1;
 8000eee:	2355      	movs	r3, #85	; 0x55
 8000ef0:	617b      	str	r3, [r7, #20]

	/* Is RDP active ? */
	if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <BL_ReadoutProtect+0x74>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2baa      	cmp	r3, #170	; 0xaa
 8000efa:	d10f      	bne.n	8000f1c <BL_ReadoutProtect+0x38>
	{
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <BL_ReadoutProtect+0x78>)
 8000efe:	2279      	movs	r2, #121	; 0x79
 8000f00:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f06:	2201      	movs	r2, #1
 8000f08:	4914      	ldr	r1, [pc, #80]	; (8000f5c <BL_ReadoutProtect+0x78>)
 8000f0a:	4815      	ldr	r0, [pc, #84]	; (8000f60 <BL_ReadoutProtect+0x7c>)
 8000f0c:	f002 f973 	bl	80031f6 <HAL_UART_Transmit>
	{
		return ERROR;
	}

	/* Unlock the option bytes */
	if(HAL_OK == HAL_FLASH_OB_Unlock())
 8000f10:	f000 fd06 	bl	8001920 <HAL_FLASH_OB_Unlock>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d119      	bne.n	8000f4e <BL_ReadoutProtect+0x6a>
 8000f1a:	e001      	b.n	8000f20 <BL_ReadoutProtect+0x3c>
		return ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e017      	b.n	8000f50 <BL_ReadoutProtect+0x6c>
	{
		/* Activate Read protection for Flash memory */
		if(HAL_OK == HAL_FLASHEx_OBProgram(&OBInit))
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 feda 	bl	8001cdc <HAL_FLASHEx_OBProgram>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10d      	bne.n	8000f4a <BL_ReadoutProtect+0x66>
		{
			/* Send ACK byte */
			BL_TransmitBuffer[0] = BL_ACK;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <BL_ReadoutProtect+0x78>)
 8000f30:	2279      	movs	r2, #121	; 0x79
 8000f32:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <BL_ReadoutProtect+0x78>)
 8000f3c:	4808      	ldr	r0, [pc, #32]	; (8000f60 <BL_ReadoutProtect+0x7c>)
 8000f3e:	f002 f95a 	bl	80031f6 <HAL_UART_Transmit>
		}
		else
		{
			return ERROR;
		}
		HAL_FLASH_OB_Lock();
 8000f42:	f000 fd09 	bl	8001958 <HAL_FLASH_OB_Lock>
	else
	{
		return ERROR;
	}

	return SUCCESS;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e002      	b.n	8000f50 <BL_ReadoutProtect+0x6c>
			return ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <BL_ReadoutProtect+0x6c>
		return ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3720      	adds	r7, #32
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40023c15 	.word	0x40023c15
 8000f5c:	20000128 	.word	0x20000128
 8000f60:	20000230 	.word	0x20000230

08000f64 <BL_ReadoutUnprotect>:
static ErrorStatus BL_ReadoutUnprotect(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
	/* Used for enabling readout protection */
	FLASH_OBProgramInitTypeDef OBInit;
	OBInit.OptionType = OPTIONBYTE_RDP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	607b      	str	r3, [r7, #4]
	OBInit.RDPLevel = OB_RDP_LEVEL_0;
 8000f6e:	23aa      	movs	r3, #170	; 0xaa
 8000f70:	617b      	str	r3, [r7, #20]

	/* Send ACK byte */
	BL_TransmitBuffer[0] = BL_ACK;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <BL_ReadoutUnprotect+0x64>)
 8000f74:	2279      	movs	r2, #121	; 0x79
 8000f76:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4912      	ldr	r1, [pc, #72]	; (8000fc8 <BL_ReadoutUnprotect+0x64>)
 8000f80:	4812      	ldr	r0, [pc, #72]	; (8000fcc <BL_ReadoutUnprotect+0x68>)
 8000f82:	f002 f938 	bl	80031f6 <HAL_UART_Transmit>

	/* Unlock the option bytes */
	if(HAL_OK == HAL_FLASH_OB_Unlock())
 8000f86:	f000 fccb 	bl	8001920 <HAL_FLASH_OB_Unlock>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d116      	bne.n	8000fbe <BL_ReadoutUnprotect+0x5a>
	{
		/* Disable RDP */
		if(HAL_OK == HAL_FLASHEx_OBProgram(&OBInit))
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fea2 	bl	8001cdc <HAL_FLASHEx_OBProgram>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10d      	bne.n	8000fba <BL_ReadoutUnprotect+0x56>
		{
			/* Send ACK byte */
			BL_TransmitBuffer[0] = BL_ACK;
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <BL_ReadoutUnprotect+0x64>)
 8000fa0:	2279      	movs	r2, #121	; 0x79
 8000fa2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4907      	ldr	r1, [pc, #28]	; (8000fc8 <BL_ReadoutUnprotect+0x64>)
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <BL_ReadoutUnprotect+0x68>)
 8000fae:	f002 f922 	bl	80031f6 <HAL_UART_Transmit>
		}
		else
		{
			return ERROR;
		}
		HAL_FLASH_OB_Lock();
 8000fb2:	f000 fcd1 	bl	8001958 <HAL_FLASH_OB_Lock>
		return ERROR;
	}

	/* Clear all RAM */

	return SUCCESS;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e002      	b.n	8000fc0 <BL_ReadoutUnprotect+0x5c>
			return ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <BL_ReadoutUnprotect+0x5c>
		return ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000128 	.word	0x20000128
 8000fcc:	20000230 	.word	0x20000230

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/* Bootloader current Systick */
	uint32_t BL_CurrentTick = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fda:	f000 faa7 	bl	800152c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000fde:	f002 f889 	bl	80030f4 <HAL_RCC_GetHCLKFreq>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a7f      	ldr	r2, [pc, #508]	; (80011e4 <main+0x214>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	099b      	lsrs	r3, r3, #6
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fbe8 	bl	80017c2 <HAL_SYSTICK_Config>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f903 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f7ff fac5 	bl	8000584 <MX_GPIO_Init>
  MX_CRC_Init();
 8000ffa:	f7ff fa73 	bl	80004e4 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000ffe:	f000 f9d9 	bl	80013b4 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* Start bootloader */
	if(GPIO_PIN_SET ==  HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8001002:	2101      	movs	r1, #1
 8001004:	4878      	ldr	r0, [pc, #480]	; (80011e8 <main+0x218>)
 8001006:	f001 fb99 	bl	800273c <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
 800100c:	2b01      	cmp	r3, #1
 800100e:	f040 80e8 	bne.w	80011e2 <main+0x212>
	{
		while(1)
		{
			/* Flash green LED */
			if(HAL_GetTick() - BL_CurrentTick > 500)
 8001012:	f000 faf1 	bl	80015f8 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001020:	d907      	bls.n	8001032 <main+0x62>
			{
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001022:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001026:	4871      	ldr	r0, [pc, #452]	; (80011ec <main+0x21c>)
 8001028:	f001 fbb9 	bl	800279e <HAL_GPIO_TogglePin>
				BL_CurrentTick = HAL_GetTick();
 800102c:	f000 fae4 	bl	80015f8 <HAL_GetTick>
 8001030:	6078      	str	r0, [r7, #4]
			}
			/* Wait for command */
			if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, 2, 5))
 8001032:	2305      	movs	r3, #5
 8001034:	2202      	movs	r2, #2
 8001036:	496e      	ldr	r1, [pc, #440]	; (80011f0 <main+0x220>)
 8001038:	486e      	ldr	r0, [pc, #440]	; (80011f4 <main+0x224>)
 800103a:	f002 f96e 	bl	800331a <HAL_UART_Receive>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1e6      	bne.n	8001012 <main+0x42>
			{
				/* Verify that it is a valid command */
				if(SUCCESS == BL_VerifyCommand(BL_ReceiveBuffer[0], BL_ReceiveBuffer[1]))
 8001044:	4b6a      	ldr	r3, [pc, #424]	; (80011f0 <main+0x220>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4a69      	ldr	r2, [pc, #420]	; (80011f0 <main+0x220>)
 800104a:	7852      	ldrb	r2, [r2, #1]
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fafa 	bl	8000648 <BL_VerifyCommand>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	f040 80b8 	bne.w	80011cc <main+0x1fc>
				{
					switch(BL_ReceiveBuffer[0])
 800105c:	4b64      	ldr	r3, [pc, #400]	; (80011f0 <main+0x220>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b92      	cmp	r3, #146	; 0x92
 8001062:	f000 809e 	beq.w	80011a2 <main+0x1d2>
 8001066:	2b92      	cmp	r3, #146	; 0x92
 8001068:	f300 80a0 	bgt.w	80011ac <main+0x1dc>
 800106c:	2b82      	cmp	r3, #130	; 0x82
 800106e:	f000 8093 	beq.w	8001198 <main+0x1c8>
 8001072:	2b82      	cmp	r3, #130	; 0x82
 8001074:	f300 809a 	bgt.w	80011ac <main+0x1dc>
 8001078:	2b73      	cmp	r3, #115	; 0x73
 800107a:	f000 8088 	beq.w	800118e <main+0x1be>
 800107e:	2b73      	cmp	r3, #115	; 0x73
 8001080:	f300 8094 	bgt.w	80011ac <main+0x1dc>
 8001084:	2b63      	cmp	r3, #99	; 0x63
 8001086:	d07d      	beq.n	8001184 <main+0x1b4>
 8001088:	2b63      	cmp	r3, #99	; 0x63
 800108a:	f300 808f 	bgt.w	80011ac <main+0x1dc>
 800108e:	2b43      	cmp	r3, #67	; 0x43
 8001090:	d073      	beq.n	800117a <main+0x1aa>
 8001092:	2b43      	cmp	r3, #67	; 0x43
 8001094:	f300 808a 	bgt.w	80011ac <main+0x1dc>
 8001098:	2b21      	cmp	r3, #33	; 0x21
 800109a:	dc4d      	bgt.n	8001138 <main+0x168>
 800109c:	2b00      	cmp	r3, #0
 800109e:	f2c0 8085 	blt.w	80011ac <main+0x1dc>
 80010a2:	2b21      	cmp	r3, #33	; 0x21
 80010a4:	f200 8082 	bhi.w	80011ac <main+0x1dc>
 80010a8:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <main+0xe0>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	0800113f 	.word	0x0800113f
 80010b4:	08001149 	.word	0x08001149
 80010b8:	08001153 	.word	0x08001153
 80010bc:	080011ad 	.word	0x080011ad
 80010c0:	080011ad 	.word	0x080011ad
 80010c4:	080011ad 	.word	0x080011ad
 80010c8:	080011ad 	.word	0x080011ad
 80010cc:	080011ad 	.word	0x080011ad
 80010d0:	080011ad 	.word	0x080011ad
 80010d4:	080011ad 	.word	0x080011ad
 80010d8:	080011ad 	.word	0x080011ad
 80010dc:	080011ad 	.word	0x080011ad
 80010e0:	080011ad 	.word	0x080011ad
 80010e4:	080011ad 	.word	0x080011ad
 80010e8:	080011ad 	.word	0x080011ad
 80010ec:	080011ad 	.word	0x080011ad
 80010f0:	080011ad 	.word	0x080011ad
 80010f4:	0800115d 	.word	0x0800115d
 80010f8:	080011ad 	.word	0x080011ad
 80010fc:	080011ad 	.word	0x080011ad
 8001100:	080011ad 	.word	0x080011ad
 8001104:	080011ad 	.word	0x080011ad
 8001108:	080011ad 	.word	0x080011ad
 800110c:	080011ad 	.word	0x080011ad
 8001110:	080011ad 	.word	0x080011ad
 8001114:	080011ad 	.word	0x080011ad
 8001118:	080011ad 	.word	0x080011ad
 800111c:	080011ad 	.word	0x080011ad
 8001120:	080011ad 	.word	0x080011ad
 8001124:	080011ad 	.word	0x080011ad
 8001128:	080011ad 	.word	0x080011ad
 800112c:	080011ad 	.word	0x080011ad
 8001130:	080011ad 	.word	0x080011ad
 8001134:	08001167 	.word	0x08001167
 8001138:	2b31      	cmp	r3, #49	; 0x31
 800113a:	d019      	beq.n	8001170 <main+0x1a0>
							break;
						case BL_Readout_Unprotect_Command:
							BL_CommandErrorStatus = BL_ReadoutUnprotect();
							break;
						default:
							break;
 800113c:	e036      	b.n	80011ac <main+0x1dc>
							BL_CommandErrorStatus = BL_Get();
 800113e:	f7ff fb13 	bl	8000768 <BL_Get>
 8001142:	4603      	mov	r3, r0
 8001144:	70fb      	strb	r3, [r7, #3]
							break;
 8001146:	e032      	b.n	80011ae <main+0x1de>
							BL_CommandErrorStatus =  BL_GetVersionAndProtectionStatus();
 8001148:	f7ff fb3a 	bl	80007c0 <BL_GetVersionAndProtectionStatus>
 800114c:	4603      	mov	r3, r0
 800114e:	70fb      	strb	r3, [r7, #3]
							break;
 8001150:	e02d      	b.n	80011ae <main+0x1de>
							BL_CommandErrorStatus = BL_GetID();
 8001152:	f7ff fb55 	bl	8000800 <BL_GetID>
 8001156:	4603      	mov	r3, r0
 8001158:	70fb      	strb	r3, [r7, #3]
							break;
 800115a:	e028      	b.n	80011ae <main+0x1de>
							BL_CommandErrorStatus = BL_ReadMemory();
 800115c:	f7ff fb70 	bl	8000840 <BL_ReadMemory>
 8001160:	4603      	mov	r3, r0
 8001162:	70fb      	strb	r3, [r7, #3]
							break;
 8001164:	e023      	b.n	80011ae <main+0x1de>
							BL_CommandErrorStatus = BL_Go();
 8001166:	f7ff fbe5 	bl	8000934 <BL_Go>
 800116a:	4603      	mov	r3, r0
 800116c:	70fb      	strb	r3, [r7, #3]
							break;
 800116e:	e01e      	b.n	80011ae <main+0x1de>
							BL_CommandErrorStatus = BL_WriteMemory();
 8001170:	f7ff fc5a 	bl	8000a28 <BL_WriteMemory>
 8001174:	4603      	mov	r3, r0
 8001176:	70fb      	strb	r3, [r7, #3]
							break;
 8001178:	e019      	b.n	80011ae <main+0x1de>
							BL_CommandErrorStatus = BL_EraseMemory();
 800117a:	f7ff fd55 	bl	8000c28 <BL_EraseMemory>
 800117e:	4603      	mov	r3, r0
 8001180:	70fb      	strb	r3, [r7, #3]
							break;
 8001182:	e014      	b.n	80011ae <main+0x1de>
							BL_CommandErrorStatus = BL_WriteProtect();
 8001184:	f7ff fdea 	bl	8000d5c <BL_WriteProtect>
 8001188:	4603      	mov	r3, r0
 800118a:	70fb      	strb	r3, [r7, #3]
							break;
 800118c:	e00f      	b.n	80011ae <main+0x1de>
							BL_CommandErrorStatus = BL_WriteUnprotect();
 800118e:	f7ff fe63 	bl	8000e58 <BL_WriteUnprotect>
 8001192:	4603      	mov	r3, r0
 8001194:	70fb      	strb	r3, [r7, #3]
							break;
 8001196:	e00a      	b.n	80011ae <main+0x1de>
							BL_CommandErrorStatus = BL_ReadoutProtect();
 8001198:	f7ff fea4 	bl	8000ee4 <BL_ReadoutProtect>
 800119c:	4603      	mov	r3, r0
 800119e:	70fb      	strb	r3, [r7, #3]
							break;
 80011a0:	e005      	b.n	80011ae <main+0x1de>
							BL_CommandErrorStatus = BL_ReadoutUnprotect();
 80011a2:	f7ff fedf 	bl	8000f64 <BL_ReadoutUnprotect>
 80011a6:	4603      	mov	r3, r0
 80011a8:	70fb      	strb	r3, [r7, #3]
							break;
 80011aa:	e000      	b.n	80011ae <main+0x1de>
							break;
 80011ac:	bf00      	nop
					}

					if(ERROR == BL_CommandErrorStatus)
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	f47f af2e 	bne.w	8001012 <main+0x42>
					{
						/* Send NACK byte */
						BL_TransmitBuffer[0] = BL_NACK;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <main+0x228>)
 80011b8:	221f      	movs	r2, #31
 80011ba:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c0:	2201      	movs	r2, #1
 80011c2:	490d      	ldr	r1, [pc, #52]	; (80011f8 <main+0x228>)
 80011c4:	480b      	ldr	r0, [pc, #44]	; (80011f4 <main+0x224>)
 80011c6:	f002 f816 	bl	80031f6 <HAL_UART_Transmit>
 80011ca:	e722      	b.n	8001012 <main+0x42>
					}
				}
				else
				{
					/* Send NACK byte */
					BL_TransmitBuffer[0] = BL_NACK;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <main+0x228>)
 80011ce:	221f      	movs	r2, #31
 80011d0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011d6:	2201      	movs	r2, #1
 80011d8:	4907      	ldr	r1, [pc, #28]	; (80011f8 <main+0x228>)
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <main+0x224>)
 80011dc:	f002 f80b 	bl	80031f6 <HAL_UART_Transmit>
			if(HAL_GetTick() - BL_CurrentTick > 500)
 80011e0:	e717      	b.n	8001012 <main+0x42>
		}
	}
	/* Start application */
	else
	{
		while(1);
 80011e2:	e7fe      	b.n	80011e2 <main+0x212>
 80011e4:	10624dd3 	.word	0x10624dd3
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40021800 	.word	0x40021800
 80011f0:	20000028 	.word	0x20000028
 80011f4:	20000230 	.word	0x20000230
 80011f8:	20000128 	.word	0x20000128

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b094      	sub	sp, #80	; 0x50
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2230      	movs	r2, #48	; 0x30
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f002 fb5e 	bl	80038cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <SystemClock_Config+0xdc>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <SystemClock_Config+0xdc>)
 800122a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122e:	6413      	str	r3, [r2, #64]	; 0x40
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <SystemClock_Config+0xdc>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	4b26      	ldr	r3, [pc, #152]	; (80012dc <SystemClock_Config+0xe0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a25      	ldr	r2, [pc, #148]	; (80012dc <SystemClock_Config+0xe0>)
 8001246:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <SystemClock_Config+0xe0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001258:	2301      	movs	r3, #1
 800125a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800125c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001262:	2302      	movs	r3, #2
 8001264:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001266:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800126a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800126c:	2308      	movs	r3, #8
 800126e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001270:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001274:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001276:	2302      	movs	r3, #2
 8001278:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800127a:	2307      	movs	r3, #7
 800127c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	4618      	mov	r0, r3
 8001284:	f001 faf6 	bl	8002874 <HAL_RCC_OscConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800128e:	f000 f827 	bl	80012e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001292:	f001 fa9f 	bl	80027d4 <HAL_PWREx_EnableOverDrive>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800129c:	f000 f820 	bl	80012e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a0:	230f      	movs	r3, #15
 80012a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a4:	2302      	movs	r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80012ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80012b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2105      	movs	r1, #5
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 fd50 	bl	8002d64 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80012ca:	f000 f809 	bl	80012e0 <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3750      	adds	r7, #80	; 0x50
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40007000 	.word	0x40007000

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <Error_Handler+0x8>
	...

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <HAL_MspInit+0x4c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_MspInit+0x4c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800132a:	2007      	movs	r0, #7
 800132c:	f000 fa22 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <NMI_Handler+0x4>

08001342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <HardFault_Handler+0x4>

08001348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <MemManage_Handler+0x4>

0800134e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <BusFault_Handler+0x4>

08001354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <UsageFault_Handler+0x4>

0800135a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001388:	f000 f922 	bl	80015d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}

08001390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_USART1_UART_Init+0x50>)
 80013ba:	4a13      	ldr	r2, [pc, #76]	; (8001408 <MX_USART1_UART_Init+0x54>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_USART1_UART_Init+0x50>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_USART1_UART_Init+0x50>)
 80013c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013cc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <MX_USART1_UART_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <MX_USART1_UART_Init+0x50>)
 80013d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_USART1_UART_Init+0x50>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <MX_USART1_UART_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_USART1_UART_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_USART1_UART_Init+0x50>)
 80013f0:	f001 feb4 	bl	800315c <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80013fa:	f7ff ff71 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000230 	.word	0x20000230
 8001408:	40011000 	.word	0x40011000

0800140c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a19      	ldr	r2, [pc, #100]	; (8001490 <HAL_UART_MspInit+0x84>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d12c      	bne.n	8001488 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_UART_MspInit+0x88>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_UART_MspInit+0x88>)
 8001438:	f043 0310 	orr.w	r3, r3, #16
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_UART_MspInit+0x88>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_UART_MspInit+0x88>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_UART_MspInit+0x88>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_UART_MspInit+0x88>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001466:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001478:	2307      	movs	r3, #7
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_UART_MspInit+0x8c>)
 8001484:	f000 fea2 	bl	80021cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40011000 	.word	0x40011000
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000

0800149c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a08      	ldr	r2, [pc, #32]	; (80014cc <HAL_UART_MspDeInit+0x30>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10a      	bne.n	80014c4 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_UART_MspDeInit+0x34>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_UART_MspDeInit+0x34>)
 80014b4:	f023 0310 	bic.w	r3, r3, #16
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80014ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <HAL_UART_MspDeInit+0x38>)
 80014c0:	f001 f830 	bl	8002524 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40011000 	.word	0x40011000
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000

080014d8 <Reset_Handler>:
 80014d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001510 <LoopFillZerobss+0x12>
 80014dc:	480d      	ldr	r0, [pc, #52]	; (8001514 <LoopFillZerobss+0x16>)
 80014de:	490e      	ldr	r1, [pc, #56]	; (8001518 <LoopFillZerobss+0x1a>)
 80014e0:	4a0e      	ldr	r2, [pc, #56]	; (800151c <LoopFillZerobss+0x1e>)
 80014e2:	2300      	movs	r3, #0
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:
 80014e6:	58d4      	ldr	r4, [r2, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:
 80014ec:	18c4      	adds	r4, r0, r3
 80014ee:	428c      	cmp	r4, r1
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
 80014f2:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <LoopFillZerobss+0x22>)
 80014f4:	4c0b      	ldr	r4, [pc, #44]	; (8001524 <LoopFillZerobss+0x26>)
 80014f6:	2300      	movs	r3, #0
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:
 80014fe:	42a2      	cmp	r2, r4
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>
 8001502:	f7ff ff45 	bl	8001390 <SystemInit>
 8001506:	f002 f9bd 	bl	8003884 <__libc_init_array>
 800150a:	f7ff fd61 	bl	8000fd0 <main>
 800150e:	4770      	bx	lr
 8001510:	20030000 	.word	0x20030000
 8001514:	20000000 	.word	0x20000000
 8001518:	2000000c 	.word	0x2000000c
 800151c:	08003928 	.word	0x08003928
 8001520:	2000000c 	.word	0x2000000c
 8001524:	20000298 	.word	0x20000298

08001528 <ADC_IRQHandler>:
 8001528:	e7fe      	b.n	8001528 <ADC_IRQHandler>
	...

0800152c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_Init+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0d      	ldr	r2, [pc, #52]	; (800156c <HAL_Init+0x40>)
 8001536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_Init+0x40>)
 8001542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001546:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_Init+0x40>)
 800154e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001552:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001554:	2003      	movs	r0, #3
 8001556:	f000 f90d 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155a:	2000      	movs	r0, #0
 800155c:	f000 f808 	bl	8001570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001560:	f7ff fec4 	bl	80012ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023c00 	.word	0x40023c00

08001570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_InitTick+0x54>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_InitTick+0x58>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001586:	fbb3 f3f1 	udiv	r3, r3, r1
 800158a:	fbb2 f3f3 	udiv	r3, r2, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f917 	bl	80017c2 <HAL_SYSTICK_Config>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e00e      	b.n	80015bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b0f      	cmp	r3, #15
 80015a2:	d80a      	bhi.n	80015ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a4:	2200      	movs	r2, #0
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015ac:	f000 f8ed 	bl	800178a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b0:	4a06      	ldr	r2, [pc, #24]	; (80015cc <HAL_InitTick+0x5c>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e000      	b.n	80015bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000008 	.word	0x20000008
 80015cc:	20000004 	.word	0x20000004

080015d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_IncTick+0x20>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_IncTick+0x24>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <HAL_IncTick+0x24>)
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000008 	.word	0x20000008
 80015f4:	20000274 	.word	0x20000274

080015f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <HAL_GetTick+0x14>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000274 	.word	0x20000274

08001610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800163c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	2b00      	cmp	r3, #0
 8001686:	db0a      	blt.n	800169e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	490c      	ldr	r1, [pc, #48]	; (80016c0 <__NVIC_SetPriority+0x4c>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	0112      	lsls	r2, r2, #4
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	440b      	add	r3, r1
 8001698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800169c:	e00a      	b.n	80016b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4908      	ldr	r1, [pc, #32]	; (80016c4 <__NVIC_SetPriority+0x50>)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	3b04      	subs	r3, #4
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	440b      	add	r3, r1
 80016b2:	761a      	strb	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f1c3 0307 	rsb	r3, r3, #7
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	bf28      	it	cs
 80016e6:	2304      	movcs	r3, #4
 80016e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3304      	adds	r3, #4
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d902      	bls.n	80016f8 <NVIC_EncodePriority+0x30>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b03      	subs	r3, #3
 80016f6:	e000      	b.n	80016fa <NVIC_EncodePriority+0x32>
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43d9      	mvns	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	4313      	orrs	r3, r2
         );
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001754:	f7ff ff8e 	bl	8001674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff47 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff5c 	bl	8001658 <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff8e 	bl	80016c8 <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5d 	bl	8001674 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffb0 	bl	8001730 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e00e      	b.n	800180a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	795b      	ldrb	r3, [r3, #5]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d105      	bne.n	8001802 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7fe fe85 	bl	800050c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001826:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <HAL_FLASH_Program+0xa0>)
 8001828:	7e1b      	ldrb	r3, [r3, #24]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_FLASH_Program+0x1e>
 800182e:	2302      	movs	r3, #2
 8001830:	e03b      	b.n	80018aa <HAL_FLASH_Program+0x96>
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_FLASH_Program+0xa0>)
 8001834:	2201      	movs	r2, #1
 8001836:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001838:	f24c 3050 	movw	r0, #50000	; 0xc350
 800183c:	f000 f89c 	bl	8001978 <FLASH_WaitForLastOperation>
 8001840:	4603      	mov	r3, r0
 8001842:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d12b      	bne.n	80018a2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d105      	bne.n	800185c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001850:	783b      	ldrb	r3, [r7, #0]
 8001852:	4619      	mov	r1, r3
 8001854:	68b8      	ldr	r0, [r7, #8]
 8001856:	f000 f947 	bl	8001ae8 <FLASH_Program_Byte>
 800185a:	e016      	b.n	800188a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d105      	bne.n	800186e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001862:	883b      	ldrh	r3, [r7, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	68b8      	ldr	r0, [r7, #8]
 8001868:	f000 f91a 	bl	8001aa0 <FLASH_Program_HalfWord>
 800186c:	e00d      	b.n	800188a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d105      	bne.n	8001880 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	4619      	mov	r1, r3
 8001878:	68b8      	ldr	r0, [r7, #8]
 800187a:	f000 f8ef 	bl	8001a5c <FLASH_Program_Word>
 800187e:	e004      	b.n	800188a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001884:	68b8      	ldr	r0, [r7, #8]
 8001886:	f000 f8b7 	bl	80019f8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800188a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800188e:	f000 f873 	bl	8001978 <FLASH_WaitForLastOperation>
 8001892:	4603      	mov	r3, r0
 8001894:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_FLASH_Program+0xa4>)
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_FLASH_Program+0xa4>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <HAL_FLASH_Program+0xa0>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000278 	.word	0x20000278
 80018b8:	40023c00 	.word	0x40023c00

080018bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_FLASH_Unlock+0x38>)
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da0b      	bge.n	80018e6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_FLASH_Unlock+0x38>)
 80018d0:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <HAL_FLASH_Unlock+0x3c>)
 80018d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <HAL_FLASH_Unlock+0x38>)
 80018d6:	4a09      	ldr	r2, [pc, #36]	; (80018fc <HAL_FLASH_Unlock+0x40>)
 80018d8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_FLASH_Unlock+0x38>)
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	da01      	bge.n	80018e6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80018e6:	79fb      	ldrb	r3, [r7, #7]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40023c00 	.word	0x40023c00
 80018f8:	45670123 	.word	0x45670123
 80018fc:	cdef89ab 	.word	0xcdef89ab

08001900 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_FLASH_Lock+0x1c>)
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <HAL_FLASH_Lock+0x1c>)
 800190a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800190e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40023c00 	.word	0x40023c00

08001920 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_FLASH_OB_Unlock+0x2c>)
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d007      	beq.n	8001940 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_FLASH_OB_Unlock+0x2c>)
 8001932:	4a07      	ldr	r2, [pc, #28]	; (8001950 <HAL_FLASH_OB_Unlock+0x30>)
 8001934:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_FLASH_OB_Unlock+0x2c>)
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_FLASH_OB_Unlock+0x34>)
 800193a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800193c:	2300      	movs	r3, #0
 800193e:	e000      	b.n	8001942 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40023c00 	.word	0x40023c00
 8001950:	08192a3b 	.word	0x08192a3b
 8001954:	4c5d6e7f 	.word	0x4c5d6e7f

08001958 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_FLASH_OB_Lock+0x1c>)
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	4a04      	ldr	r2, [pc, #16]	; (8001974 <HAL_FLASH_OB_Lock+0x1c>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40023c00 	.word	0x40023c00

08001978 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <FLASH_WaitForLastOperation+0x78>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800198a:	f7ff fe35 	bl	80015f8 <HAL_GetTick>
 800198e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001990:	e010      	b.n	80019b4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001998:	d00c      	beq.n	80019b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d007      	beq.n	80019b0 <FLASH_WaitForLastOperation+0x38>
 80019a0:	f7ff fe2a 	bl	80015f8 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d201      	bcs.n	80019b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e019      	b.n	80019e8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <FLASH_WaitForLastOperation+0x7c>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1e8      	bne.n	8001992 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <FLASH_WaitForLastOperation+0x7c>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <FLASH_WaitForLastOperation+0x7c>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <FLASH_WaitForLastOperation+0x7c>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80019de:	f000 f8a5 	bl	8001b2c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
  
}  
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000278 	.word	0x20000278
 80019f4:	40023c00 	.word	0x40023c00

080019f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <FLASH_Program_DoubleWord+0x60>)
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <FLASH_Program_DoubleWord+0x60>)
 8001a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <FLASH_Program_DoubleWord+0x60>)
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	4a10      	ldr	r2, [pc, #64]	; (8001a58 <FLASH_Program_DoubleWord+0x60>)
 8001a16:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <FLASH_Program_DoubleWord+0x60>)
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	4a0d      	ldr	r2, [pc, #52]	; (8001a58 <FLASH_Program_DoubleWord+0x60>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001a2e:	f3bf 8f6f 	isb	sy
}
 8001a32:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001a34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	000a      	movs	r2, r1
 8001a42:	2300      	movs	r3, #0
 8001a44:	68f9      	ldr	r1, [r7, #12]
 8001a46:	3104      	adds	r1, #4
 8001a48:	4613      	mov	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	40023c00 	.word	0x40023c00

08001a5c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <FLASH_Program_Word+0x40>)
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <FLASH_Program_Word+0x40>)
 8001a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <FLASH_Program_Word+0x40>)
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <FLASH_Program_Word+0x40>)
 8001a78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <FLASH_Program_Word+0x40>)
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	4a06      	ldr	r2, [pc, #24]	; (8001a9c <FLASH_Program_Word+0x40>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	601a      	str	r2, [r3, #0]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <FLASH_Program_HalfWord+0x44>)
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	4a0c      	ldr	r2, [pc, #48]	; (8001ae4 <FLASH_Program_HalfWord+0x44>)
 8001ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ab6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <FLASH_Program_HalfWord+0x44>)
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <FLASH_Program_HalfWord+0x44>)
 8001abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <FLASH_Program_HalfWord+0x44>)
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <FLASH_Program_HalfWord+0x44>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	801a      	strh	r2, [r3, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023c00 	.word	0x40023c00

08001ae8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <FLASH_Program_Byte+0x40>)
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <FLASH_Program_Byte+0x40>)
 8001afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001afe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <FLASH_Program_Byte+0x40>)
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <FLASH_Program_Byte+0x40>)
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <FLASH_Program_Byte+0x40>)
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <FLASH_Program_Byte+0x40>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	701a      	strb	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023c00 	.word	0x40023c00

08001b2c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001b30:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <FLASH_SetErrorCode+0xc4>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <FLASH_SetErrorCode+0xc8>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f043 0310 	orr.w	r3, r3, #16
 8001b44:	4a2b      	ldr	r2, [pc, #172]	; (8001bf4 <FLASH_SetErrorCode+0xc8>)
 8001b46:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001b48:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <FLASH_SetErrorCode+0xc4>)
 8001b4a:	2210      	movs	r2, #16
 8001b4c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <FLASH_SetErrorCode+0xc4>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f003 0320 	and.w	r3, r3, #32
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <FLASH_SetErrorCode+0xc8>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f043 0308 	orr.w	r3, r3, #8
 8001b62:	4a24      	ldr	r2, [pc, #144]	; (8001bf4 <FLASH_SetErrorCode+0xc8>)
 8001b64:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001b66:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <FLASH_SetErrorCode+0xc4>)
 8001b68:	2220      	movs	r2, #32
 8001b6a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <FLASH_SetErrorCode+0xc4>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <FLASH_SetErrorCode+0xc8>)
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <FLASH_SetErrorCode+0xc8>)
 8001b82:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <FLASH_SetErrorCode+0xc4>)
 8001b86:	2240      	movs	r2, #64	; 0x40
 8001b88:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <FLASH_SetErrorCode+0xc4>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d008      	beq.n	8001ba8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <FLASH_SetErrorCode+0xc8>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f043 0302 	orr.w	r3, r3, #2
 8001b9e:	4a15      	ldr	r2, [pc, #84]	; (8001bf4 <FLASH_SetErrorCode+0xc8>)
 8001ba0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <FLASH_SetErrorCode+0xc4>)
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <FLASH_SetErrorCode+0xc4>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d009      	beq.n	8001bc8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <FLASH_SetErrorCode+0xc8>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <FLASH_SetErrorCode+0xc8>)
 8001bbe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <FLASH_SetErrorCode+0xc4>)
 8001bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <FLASH_SetErrorCode+0xc4>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <FLASH_SetErrorCode+0xc8>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	f043 0320 	orr.w	r3, r3, #32
 8001bdc:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <FLASH_SetErrorCode+0xc8>)
 8001bde:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <FLASH_SetErrorCode+0xc4>)
 8001be2:	2202      	movs	r2, #2
 8001be4:	60da      	str	r2, [r3, #12]
  }
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	40023c00 	.word	0x40023c00
 8001bf4:	20000278 	.word	0x20000278

08001bf8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c0a:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_FLASHEx_Erase+0xdc>)
 8001c0c:	7e1b      	ldrb	r3, [r3, #24]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_FLASHEx_Erase+0x1e>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e05a      	b.n	8001ccc <HAL_FLASHEx_Erase+0xd4>
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_FLASHEx_Erase+0xdc>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c20:	f7ff feaa 	bl	8001978 <FLASH_WaitForLastOperation>
 8001c24:	4603      	mov	r3, r0
 8001c26:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d14a      	bne.n	8001cc4 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c34:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d117      	bne.n	8001c6e <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	f000 f8b4 	bl	8001db8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c54:	f7ff fe90 	bl	8001978 <FLASH_WaitForLastOperation>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <HAL_FLASHEx_Erase+0xe0>)
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <HAL_FLASHEx_Erase+0xe0>)
 8001c62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001c66:	f023 0304 	bic.w	r3, r3, #4
 8001c6a:	6113      	str	r3, [r2, #16]
 8001c6c:	e028      	b.n	8001cc0 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	e01c      	b.n	8001cb0 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	68b8      	ldr	r0, [r7, #8]
 8001c80:	f000 f8d4 	bl	8001e2c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c88:	f7ff fe76 	bl	8001978 <FLASH_WaitForLastOperation>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_FLASHEx_Erase+0xe0>)
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <HAL_FLASHEx_Erase+0xe0>)
 8001c96:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001c9a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	601a      	str	r2, [r3, #0]
          break;
 8001ca8:	e00a      	b.n	8001cc0 <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	3301      	adds	r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4413      	add	r3, r2
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d3da      	bcc.n	8001c76 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001cc0:	f000 fa3e 	bl	8002140 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_FLASHEx_Erase+0xdc>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	761a      	strb	r2, [r3, #24]

  return status;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000278 	.word	0x20000278
 8001cd8:	40023c00 	.word	0x40023c00

08001cdc <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ce8:	4b32      	ldr	r3, [pc, #200]	; (8001db4 <HAL_FLASHEx_OBProgram+0xd8>)
 8001cea:	7e1b      	ldrb	r3, [r3, #24]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_FLASHEx_OBProgram+0x18>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e05b      	b.n	8001dac <HAL_FLASHEx_OBProgram+0xd0>
 8001cf4:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <HAL_FLASHEx_OBProgram+0xd8>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d018      	beq.n	8001d38 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d10a      	bne.n	8001d24 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	4619      	mov	r1, r3
 8001d18:	4610      	mov	r0, r2
 8001d1a:	f000 f8d5 	bl	8001ec8 <FLASH_OB_EnableWRP>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	73fb      	strb	r3, [r7, #15]
 8001d22:	e009      	b.n	8001d38 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f000 f938 	bl	8001fa4 <FLASH_OB_DisableWRP>
 8001d34:	4603      	mov	r3, r0
 8001d36:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d007      	beq.n	8001d54 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f990 	bl	8002070 <FLASH_OB_RDP_LevelConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7e1b      	ldrb	r3, [r3, #24]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	b2d8      	uxtb	r0, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8001d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d72:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8001d78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f000 f990 	bl	80020a4 <FLASH_OB_UserConfig>
 8001d84:	4603      	mov	r3, r0
 8001d86:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d007      	beq.n	8001da4 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f9b2 	bl	8002104 <FLASH_OB_BOR_LevelConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <HAL_FLASHEx_OBProgram+0xd8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	761a      	strb	r2, [r3, #24]

  return status;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000278 	.word	0x20000278

08001db8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <FLASH_MassErase+0x70>)
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <FLASH_MassErase+0x70>)
 8001dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dce:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d108      	bne.n	8001de8 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <FLASH_MassErase+0x70>)
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <FLASH_MassErase+0x70>)
 8001ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6113      	str	r3, [r2, #16]
 8001de6:	e00f      	b.n	8001e08 <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d106      	bne.n	8001dfc <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <FLASH_MassErase+0x70>)
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <FLASH_MassErase+0x70>)
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	6113      	str	r3, [r2, #16]
 8001dfa:	e005      	b.n	8001e08 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <FLASH_MassErase+0x70>)
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <FLASH_MassErase+0x70>)
 8001e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e06:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <FLASH_MassErase+0x70>)
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	4313      	orrs	r3, r2
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <FLASH_MassErase+0x70>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	6113      	str	r3, [r2, #16]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40023c00 	.word	0x40023c00

08001e2c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d102      	bne.n	8001e48 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	e010      	b.n	8001e6a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d103      	bne.n	8001e56 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e009      	b.n	8001e6a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d103      	bne.n	8001e64 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	e002      	b.n	8001e6a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001e64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e68:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0b      	cmp	r3, #11
 8001e6e:	d902      	bls.n	8001e76 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3304      	adds	r3, #4
 8001e74:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <FLASH_Erase_Sector+0x98>)
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <FLASH_Erase_Sector+0x98>)
 8001e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <FLASH_Erase_Sector+0x98>)
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	490f      	ldr	r1, [pc, #60]	; (8001ec4 <FLASH_Erase_Sector+0x98>)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <FLASH_Erase_Sector+0x98>)
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	4a0c      	ldr	r2, [pc, #48]	; (8001ec4 <FLASH_Erase_Sector+0x98>)
 8001e94:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <FLASH_Erase_Sector+0x98>)
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <FLASH_Erase_Sector+0x98>)
 8001ea6:	f043 0302 	orr.w	r3, r3, #2
 8001eaa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <FLASH_Erase_Sector+0x98>)
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <FLASH_Erase_Sector+0x98>)
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb6:	6113      	str	r3, [r2, #16]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	40023c00 	.word	0x40023c00

08001ec8 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_BOTH: WRP on all sectors of bank1 & bank2
  *
  * @retval HAL FLASH State   
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ed6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001eda:	f7ff fd4d 	bl	8001978 <FLASH_WaitForLastOperation>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d152      	bne.n	8001f8e <FLASH_OB_EnableWRP+0xc6>
  {
    if(((WRPSector == OB_WRP_SECTOR_All) && ((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))) ||
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a2b      	ldr	r2, [pc, #172]	; (8001f98 <FLASH_OB_EnableWRP+0xd0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d105      	bne.n	8001efc <FLASH_OB_EnableWRP+0x34>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d006      	beq.n	8001f04 <FLASH_OB_EnableWRP+0x3c>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d003      	beq.n	8001f04 <FLASH_OB_EnableWRP+0x3c>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f02:	d21c      	bcs.n	8001f3e <FLASH_OB_EnableWRP+0x76>
         (WRPSector < OB_WRP_SECTOR_12))
    {
       if(WRPSector == OB_WRP_SECTOR_All)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a24      	ldr	r2, [pc, #144]	; (8001f98 <FLASH_OB_EnableWRP+0xd0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d10c      	bne.n	8001f26 <FLASH_OB_EnableWRP+0x5e>
       {
          /*Write protection on all sector of BANK1*/
          *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~(WRPSector>>12));  
 8001f0c:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <FLASH_OB_EnableWRP+0xd4>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	0b1b      	lsrs	r3, r3, #12
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	491f      	ldr	r1, [pc, #124]	; (8001f9c <FLASH_OB_EnableWRP+0xd4>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	800b      	strh	r3, [r1, #0]
       if(WRPSector == OB_WRP_SECTOR_All)
 8001f24:	e017      	b.n	8001f56 <FLASH_OB_EnableWRP+0x8e>
       }
       else
       {
          /*Write protection done on sectors of BANK1*/
          *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_OB_EnableWRP+0xd4>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	4919      	ldr	r1, [pc, #100]	; (8001f9c <FLASH_OB_EnableWRP+0xd4>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	800b      	strh	r3, [r1, #0]
       if(WRPSector == OB_WRP_SECTOR_All)
 8001f3c:	e00b      	b.n	8001f56 <FLASH_OB_EnableWRP+0x8e>
       }
    }
    else 
    {
      /*Write protection done on sectors of BANK2*/
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~(WRPSector>>12));  
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <FLASH_OB_EnableWRP+0xd8>)
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	0b1b      	lsrs	r3, r3, #12
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	4914      	ldr	r1, [pc, #80]	; (8001fa0 <FLASH_OB_EnableWRP+0xd8>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	800b      	strh	r3, [r1, #0]
    }

    /*Write protection on all sector of BANK2*/
    if((WRPSector == OB_WRP_SECTOR_All) && (Banks == FLASH_BANK_BOTH))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <FLASH_OB_EnableWRP+0xd0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d117      	bne.n	8001f8e <FLASH_OB_EnableWRP+0xc6>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d114      	bne.n	8001f8e <FLASH_OB_EnableWRP+0xc6>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f68:	f7ff fd06 	bl	8001978 <FLASH_WaitForLastOperation>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]
      
      if(status == HAL_OK)
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10b      	bne.n	8001f8e <FLASH_OB_EnableWRP+0xc6>
      { 
        *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~(WRPSector>>12));  
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <FLASH_OB_EnableWRP+0xd8>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	0b1b      	lsrs	r3, r3, #12
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4906      	ldr	r1, [pc, #24]	; (8001fa0 <FLASH_OB_EnableWRP+0xd8>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	800b      	strh	r3, [r1, #0]
      }
    }
    
  }
  return status;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	00fff000 	.word	0x00fff000
 8001f9c:	40023c16 	.word	0x40023c16
 8001fa0:	40023c1a 	.word	0x40023c1a

08001fa4 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status   
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fb6:	f7ff fcdf 	bl	8001978 <FLASH_WaitForLastOperation>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d14a      	bne.n	800205a <FLASH_OB_DisableWRP+0xb6>
  {
    if(((WRPSector == OB_WRP_SECTOR_All) && ((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))) ||
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a27      	ldr	r2, [pc, #156]	; (8002064 <FLASH_OB_DisableWRP+0xc0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d105      	bne.n	8001fd8 <FLASH_OB_DisableWRP+0x34>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d006      	beq.n	8001fe0 <FLASH_OB_DisableWRP+0x3c>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d003      	beq.n	8001fe0 <FLASH_OB_DisableWRP+0x3c>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fde:	d218      	bcs.n	8002012 <FLASH_OB_DisableWRP+0x6e>
         (WRPSector < OB_WRP_SECTOR_12))
    {
       if(WRPSector == OB_WRP_SECTOR_All)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a20      	ldr	r2, [pc, #128]	; (8002064 <FLASH_OB_DisableWRP+0xc0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d10a      	bne.n	8001ffe <FLASH_OB_DisableWRP+0x5a>
       {
          /*Write protection on all sector of BANK1*/
          *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)(WRPSector>>12); 
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <FLASH_OB_DisableWRP+0xc4>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	0b1b      	lsrs	r3, r3, #12
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	491c      	ldr	r1, [pc, #112]	; (8002068 <FLASH_OB_DisableWRP+0xc4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	800b      	strh	r3, [r1, #0]
       if(WRPSector == OB_WRP_SECTOR_All)
 8001ffc:	e013      	b.n	8002026 <FLASH_OB_DisableWRP+0x82>
       }
       else
       {
          /*Write protection done on sectors of BANK1*/
          *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <FLASH_OB_DisableWRP+0xc4>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	b29b      	uxth	r3, r3
 8002008:	4917      	ldr	r1, [pc, #92]	; (8002068 <FLASH_OB_DisableWRP+0xc4>)
 800200a:	4313      	orrs	r3, r2
 800200c:	b29b      	uxth	r3, r3
 800200e:	800b      	strh	r3, [r1, #0]
       if(WRPSector == OB_WRP_SECTOR_All)
 8002010:	e009      	b.n	8002026 <FLASH_OB_DisableWRP+0x82>
       }
    }
    else 
    {
      /*Write protection done on sectors of BANK2*/
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)(WRPSector>>12); 
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <FLASH_OB_DisableWRP+0xc8>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	b29a      	uxth	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	0b1b      	lsrs	r3, r3, #12
 800201c:	b29b      	uxth	r3, r3
 800201e:	4913      	ldr	r1, [pc, #76]	; (800206c <FLASH_OB_DisableWRP+0xc8>)
 8002020:	4313      	orrs	r3, r2
 8002022:	b29b      	uxth	r3, r3
 8002024:	800b      	strh	r3, [r1, #0]
    }

    /*Write protection on all sector  of BANK2*/
    if((WRPSector == OB_WRP_SECTOR_All) && (Banks == FLASH_BANK_BOTH))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a0e      	ldr	r2, [pc, #56]	; (8002064 <FLASH_OB_DisableWRP+0xc0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d115      	bne.n	800205a <FLASH_OB_DisableWRP+0xb6>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d112      	bne.n	800205a <FLASH_OB_DisableWRP+0xb6>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002034:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002038:	f7ff fc9e 	bl	8001978 <FLASH_WaitForLastOperation>
 800203c:	4603      	mov	r3, r0
 800203e:	73fb      	strb	r3, [r7, #15]
      
      if(status == HAL_OK)
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <FLASH_OB_DisableWRP+0xb6>
      { 
        *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)(WRPSector>>12); 
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <FLASH_OB_DisableWRP+0xc8>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	b29a      	uxth	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	0b1b      	lsrs	r3, r3, #12
 8002050:	b29b      	uxth	r3, r3
 8002052:	4906      	ldr	r1, [pc, #24]	; (800206c <FLASH_OB_DisableWRP+0xc8>)
 8002054:	4313      	orrs	r3, r2
 8002056:	b29b      	uxth	r3, r3
 8002058:	800b      	strh	r3, [r1, #0]
      }
    }
    
  }

  return status;
 800205a:	7bfb      	ldrb	r3, [r7, #15]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	00fff000 	.word	0x00fff000
 8002068:	40023c16 	.word	0x40023c16
 800206c:	40023c1a 	.word	0x40023c1a

08002070 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800207e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002082:	f7ff fc79 	bl	8001978 <FLASH_WaitForLastOperation>
 8002086:	4603      	mov	r3, r0
 8002088:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <FLASH_OB_RDP_LevelConfig+0x26>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 8002090:	4a03      	ldr	r2, [pc, #12]	; (80020a0 <FLASH_OB_RDP_LevelConfig+0x30>)
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
 8002096:	7bfb      	ldrb	r3, [r7, #15]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40023c15 	.word	0x40023c15

080020a4 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
 80020ae:	460b      	mov	r3, r1
 80020b0:	71bb      	strb	r3, [r7, #6]
 80020b2:	4613      	mov	r3, r2
 80020b4:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 80020b6:	23ff      	movs	r3, #255	; 0xff
 80020b8:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020c2:	f7ff fc59 	bl	8001978 <FLASH_WaitForLastOperation>
 80020c6:	4603      	mov	r3, r0
 80020c8:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
 80020ca:	7bbb      	ldrb	r3, [r7, #14]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d111      	bne.n	80020f4 <FLASH_OB_UserConfig+0x50>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <FLASH_OB_UserConfig+0x5c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 80020dc:	79ba      	ldrb	r2, [r7, #6]
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	797b      	ldrb	r3, [r7, #5]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4905      	ldr	r1, [pc, #20]	; (8002100 <FLASH_OB_UserConfig+0x5c>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	700b      	strb	r3, [r1, #0]
  }
  
  return status; 
 80020f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023c14 	.word	0x40023c14

08002104 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <FLASH_OB_BOR_LevelConfig+0x38>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	4a09      	ldr	r2, [pc, #36]	; (800213c <FLASH_OB_BOR_LevelConfig+0x38>)
 8002116:	f023 030c 	bic.w	r3, r3, #12
 800211a:	b2db      	uxtb	r3, r3
 800211c:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <FLASH_OB_BOR_LevelConfig+0x38>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4905      	ldr	r1, [pc, #20]	; (800213c <FLASH_OB_BOR_LevelConfig+0x38>)
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	4313      	orrs	r3, r2
 800212a:	b2db      	uxtb	r3, r3
 800212c:	700b      	strb	r3, [r1, #0]
  
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
  
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40023c14 	.word	0x40023c14

08002140 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002144:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <FLASH_FlushCaches+0x88>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800214c:	2b00      	cmp	r3, #0
 800214e:	d017      	beq.n	8002180 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <FLASH_FlushCaches+0x88>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <FLASH_FlushCaches+0x88>)
 8002156:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800215a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <FLASH_FlushCaches+0x88>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a19      	ldr	r2, [pc, #100]	; (80021c8 <FLASH_FlushCaches+0x88>)
 8002162:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <FLASH_FlushCaches+0x88>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <FLASH_FlushCaches+0x88>)
 800216e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002172:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002174:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <FLASH_FlushCaches+0x88>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a13      	ldr	r2, [pc, #76]	; (80021c8 <FLASH_FlushCaches+0x88>)
 800217a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800217e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <FLASH_FlushCaches+0x88>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002188:	2b00      	cmp	r3, #0
 800218a:	d017      	beq.n	80021bc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <FLASH_FlushCaches+0x88>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0d      	ldr	r2, [pc, #52]	; (80021c8 <FLASH_FlushCaches+0x88>)
 8002192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002196:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <FLASH_FlushCaches+0x88>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <FLASH_FlushCaches+0x88>)
 800219e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <FLASH_FlushCaches+0x88>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <FLASH_FlushCaches+0x88>)
 80021aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <FLASH_FlushCaches+0x88>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <FLASH_FlushCaches+0x88>)
 80021b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ba:	6013      	str	r3, [r2, #0]
  }
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40023c00 	.word	0x40023c00

080021cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	e177      	b.n	80024d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021e8:	2201      	movs	r2, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	429a      	cmp	r2, r3
 8002202:	f040 8166 	bne.w	80024d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d005      	beq.n	800221e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221a:	2b02      	cmp	r3, #2
 800221c:	d130      	bne.n	8002280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	2203      	movs	r2, #3
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002254:	2201      	movs	r2, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 0201 	and.w	r2, r3, #1
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b03      	cmp	r3, #3
 800228a:	d017      	beq.n	80022bc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d123      	bne.n	8002310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	08da      	lsrs	r2, r3, #3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3208      	adds	r2, #8
 80022d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	220f      	movs	r2, #15
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3208      	adds	r2, #8
 800230a:	69b9      	ldr	r1, [r7, #24]
 800230c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	2203      	movs	r2, #3
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0203 	and.w	r2, r3, #3
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80c0 	beq.w	80024d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	4b66      	ldr	r3, [pc, #408]	; (80024f0 <HAL_GPIO_Init+0x324>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	4a65      	ldr	r2, [pc, #404]	; (80024f0 <HAL_GPIO_Init+0x324>)
 800235c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002360:	6453      	str	r3, [r2, #68]	; 0x44
 8002362:	4b63      	ldr	r3, [pc, #396]	; (80024f0 <HAL_GPIO_Init+0x324>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800236e:	4a61      	ldr	r2, [pc, #388]	; (80024f4 <HAL_GPIO_Init+0x328>)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	3302      	adds	r3, #2
 8002376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	220f      	movs	r2, #15
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a58      	ldr	r2, [pc, #352]	; (80024f8 <HAL_GPIO_Init+0x32c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d037      	beq.n	800240a <HAL_GPIO_Init+0x23e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a57      	ldr	r2, [pc, #348]	; (80024fc <HAL_GPIO_Init+0x330>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d031      	beq.n	8002406 <HAL_GPIO_Init+0x23a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a56      	ldr	r2, [pc, #344]	; (8002500 <HAL_GPIO_Init+0x334>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d02b      	beq.n	8002402 <HAL_GPIO_Init+0x236>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a55      	ldr	r2, [pc, #340]	; (8002504 <HAL_GPIO_Init+0x338>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d025      	beq.n	80023fe <HAL_GPIO_Init+0x232>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a54      	ldr	r2, [pc, #336]	; (8002508 <HAL_GPIO_Init+0x33c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01f      	beq.n	80023fa <HAL_GPIO_Init+0x22e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a53      	ldr	r2, [pc, #332]	; (800250c <HAL_GPIO_Init+0x340>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d019      	beq.n	80023f6 <HAL_GPIO_Init+0x22a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a52      	ldr	r2, [pc, #328]	; (8002510 <HAL_GPIO_Init+0x344>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0x226>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a51      	ldr	r2, [pc, #324]	; (8002514 <HAL_GPIO_Init+0x348>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00d      	beq.n	80023ee <HAL_GPIO_Init+0x222>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a50      	ldr	r2, [pc, #320]	; (8002518 <HAL_GPIO_Init+0x34c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <HAL_GPIO_Init+0x21e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4f      	ldr	r2, [pc, #316]	; (800251c <HAL_GPIO_Init+0x350>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_GPIO_Init+0x21a>
 80023e2:	2309      	movs	r3, #9
 80023e4:	e012      	b.n	800240c <HAL_GPIO_Init+0x240>
 80023e6:	230a      	movs	r3, #10
 80023e8:	e010      	b.n	800240c <HAL_GPIO_Init+0x240>
 80023ea:	2308      	movs	r3, #8
 80023ec:	e00e      	b.n	800240c <HAL_GPIO_Init+0x240>
 80023ee:	2307      	movs	r3, #7
 80023f0:	e00c      	b.n	800240c <HAL_GPIO_Init+0x240>
 80023f2:	2306      	movs	r3, #6
 80023f4:	e00a      	b.n	800240c <HAL_GPIO_Init+0x240>
 80023f6:	2305      	movs	r3, #5
 80023f8:	e008      	b.n	800240c <HAL_GPIO_Init+0x240>
 80023fa:	2304      	movs	r3, #4
 80023fc:	e006      	b.n	800240c <HAL_GPIO_Init+0x240>
 80023fe:	2303      	movs	r3, #3
 8002400:	e004      	b.n	800240c <HAL_GPIO_Init+0x240>
 8002402:	2302      	movs	r3, #2
 8002404:	e002      	b.n	800240c <HAL_GPIO_Init+0x240>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_GPIO_Init+0x240>
 800240a:	2300      	movs	r3, #0
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	f002 0203 	and.w	r2, r2, #3
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	4093      	lsls	r3, r2
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800241c:	4935      	ldr	r1, [pc, #212]	; (80024f4 <HAL_GPIO_Init+0x328>)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_GPIO_Init+0x354>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800244e:	4a34      	ldr	r2, [pc, #208]	; (8002520 <HAL_GPIO_Init+0x354>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002454:	4b32      	ldr	r3, [pc, #200]	; (8002520 <HAL_GPIO_Init+0x354>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002478:	4a29      	ldr	r2, [pc, #164]	; (8002520 <HAL_GPIO_Init+0x354>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800247e:	4b28      	ldr	r3, [pc, #160]	; (8002520 <HAL_GPIO_Init+0x354>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024a2:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <HAL_GPIO_Init+0x354>)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_GPIO_Init+0x354>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024cc:	4a14      	ldr	r2, [pc, #80]	; (8002520 <HAL_GPIO_Init+0x354>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3301      	adds	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b0f      	cmp	r3, #15
 80024dc:	f67f ae84 	bls.w	80021e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40013800 	.word	0x40013800
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40020400 	.word	0x40020400
 8002500:	40020800 	.word	0x40020800
 8002504:	40020c00 	.word	0x40020c00
 8002508:	40021000 	.word	0x40021000
 800250c:	40021400 	.word	0x40021400
 8002510:	40021800 	.word	0x40021800
 8002514:	40021c00 	.word	0x40021c00
 8002518:	40022000 	.word	0x40022000
 800251c:	40022400 	.word	0x40022400
 8002520:	40013c00 	.word	0x40013c00

08002524 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e0d9      	b.n	80026f4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002540:	2201      	movs	r2, #1
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	429a      	cmp	r2, r3
 8002558:	f040 80c9 	bne.w	80026ee <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800255c:	4a6b      	ldr	r2, [pc, #428]	; (800270c <HAL_GPIO_DeInit+0x1e8>)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	3302      	adds	r3, #2
 8002564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002568:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	220f      	movs	r2, #15
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	4013      	ands	r3, r2
 800257c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a63      	ldr	r2, [pc, #396]	; (8002710 <HAL_GPIO_DeInit+0x1ec>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d037      	beq.n	80025f6 <HAL_GPIO_DeInit+0xd2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a62      	ldr	r2, [pc, #392]	; (8002714 <HAL_GPIO_DeInit+0x1f0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d031      	beq.n	80025f2 <HAL_GPIO_DeInit+0xce>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a61      	ldr	r2, [pc, #388]	; (8002718 <HAL_GPIO_DeInit+0x1f4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d02b      	beq.n	80025ee <HAL_GPIO_DeInit+0xca>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a60      	ldr	r2, [pc, #384]	; (800271c <HAL_GPIO_DeInit+0x1f8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d025      	beq.n	80025ea <HAL_GPIO_DeInit+0xc6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a5f      	ldr	r2, [pc, #380]	; (8002720 <HAL_GPIO_DeInit+0x1fc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01f      	beq.n	80025e6 <HAL_GPIO_DeInit+0xc2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a5e      	ldr	r2, [pc, #376]	; (8002724 <HAL_GPIO_DeInit+0x200>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d019      	beq.n	80025e2 <HAL_GPIO_DeInit+0xbe>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a5d      	ldr	r2, [pc, #372]	; (8002728 <HAL_GPIO_DeInit+0x204>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_GPIO_DeInit+0xba>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a5c      	ldr	r2, [pc, #368]	; (800272c <HAL_GPIO_DeInit+0x208>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00d      	beq.n	80025da <HAL_GPIO_DeInit+0xb6>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a5b      	ldr	r2, [pc, #364]	; (8002730 <HAL_GPIO_DeInit+0x20c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d007      	beq.n	80025d6 <HAL_GPIO_DeInit+0xb2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a5a      	ldr	r2, [pc, #360]	; (8002734 <HAL_GPIO_DeInit+0x210>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_GPIO_DeInit+0xae>
 80025ce:	2309      	movs	r3, #9
 80025d0:	e012      	b.n	80025f8 <HAL_GPIO_DeInit+0xd4>
 80025d2:	230a      	movs	r3, #10
 80025d4:	e010      	b.n	80025f8 <HAL_GPIO_DeInit+0xd4>
 80025d6:	2308      	movs	r3, #8
 80025d8:	e00e      	b.n	80025f8 <HAL_GPIO_DeInit+0xd4>
 80025da:	2307      	movs	r3, #7
 80025dc:	e00c      	b.n	80025f8 <HAL_GPIO_DeInit+0xd4>
 80025de:	2306      	movs	r3, #6
 80025e0:	e00a      	b.n	80025f8 <HAL_GPIO_DeInit+0xd4>
 80025e2:	2305      	movs	r3, #5
 80025e4:	e008      	b.n	80025f8 <HAL_GPIO_DeInit+0xd4>
 80025e6:	2304      	movs	r3, #4
 80025e8:	e006      	b.n	80025f8 <HAL_GPIO_DeInit+0xd4>
 80025ea:	2303      	movs	r3, #3
 80025ec:	e004      	b.n	80025f8 <HAL_GPIO_DeInit+0xd4>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e002      	b.n	80025f8 <HAL_GPIO_DeInit+0xd4>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_GPIO_DeInit+0xd4>
 80025f6:	2300      	movs	r3, #0
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	f002 0203 	and.w	r2, r2, #3
 80025fe:	0092      	lsls	r2, r2, #2
 8002600:	4093      	lsls	r3, r2
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	429a      	cmp	r2, r3
 8002606:	d132      	bne.n	800266e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002608:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <HAL_GPIO_DeInit+0x214>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43db      	mvns	r3, r3
 8002610:	4949      	ldr	r1, [pc, #292]	; (8002738 <HAL_GPIO_DeInit+0x214>)
 8002612:	4013      	ands	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002616:	4b48      	ldr	r3, [pc, #288]	; (8002738 <HAL_GPIO_DeInit+0x214>)
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	43db      	mvns	r3, r3
 800261e:	4946      	ldr	r1, [pc, #280]	; (8002738 <HAL_GPIO_DeInit+0x214>)
 8002620:	4013      	ands	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002624:	4b44      	ldr	r3, [pc, #272]	; (8002738 <HAL_GPIO_DeInit+0x214>)
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	43db      	mvns	r3, r3
 800262c:	4942      	ldr	r1, [pc, #264]	; (8002738 <HAL_GPIO_DeInit+0x214>)
 800262e:	4013      	ands	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002632:	4b41      	ldr	r3, [pc, #260]	; (8002738 <HAL_GPIO_DeInit+0x214>)
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	43db      	mvns	r3, r3
 800263a:	493f      	ldr	r1, [pc, #252]	; (8002738 <HAL_GPIO_DeInit+0x214>)
 800263c:	4013      	ands	r3, r2
 800263e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002650:	4a2e      	ldr	r2, [pc, #184]	; (800270c <HAL_GPIO_DeInit+0x1e8>)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	43da      	mvns	r2, r3
 8002660:	482a      	ldr	r0, [pc, #168]	; (800270c <HAL_GPIO_DeInit+0x1e8>)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	400a      	ands	r2, r1
 8002668:	3302      	adds	r3, #2
 800266a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2103      	movs	r1, #3
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	401a      	ands	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	08da      	lsrs	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3208      	adds	r2, #8
 800268c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	220f      	movs	r2, #15
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	08d2      	lsrs	r2, r2, #3
 80026a4:	4019      	ands	r1, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3208      	adds	r2, #8
 80026aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	2103      	movs	r1, #3
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	401a      	ands	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	2101      	movs	r1, #1
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	401a      	ands	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2103      	movs	r1, #3
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	401a      	ands	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3301      	adds	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b0f      	cmp	r3, #15
 80026f8:	f67f af22 	bls.w	8002540 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40013800 	.word	0x40013800
 8002710:	40020000 	.word	0x40020000
 8002714:	40020400 	.word	0x40020400
 8002718:	40020800 	.word	0x40020800
 800271c:	40020c00 	.word	0x40020c00
 8002720:	40021000 	.word	0x40021000
 8002724:	40021400 	.word	0x40021400
 8002728:	40021800 	.word	0x40021800
 800272c:	40021c00 	.word	0x40021c00
 8002730:	40022000 	.word	0x40022000
 8002734:	40022400 	.word	0x40022400
 8002738:	40013c00 	.word	0x40013c00

0800273c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	887b      	ldrh	r3, [r7, #2]
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	e001      	b.n	800275e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800275e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
 8002778:	4613      	mov	r3, r2
 800277a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800277c:	787b      	ldrb	r3, [r7, #1]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002782:	887a      	ldrh	r2, [r7, #2]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002788:	e003      	b.n	8002792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800278a:	887b      	ldrh	r3, [r7, #2]
 800278c:	041a      	lsls	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	619a      	str	r2, [r3, #24]
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800279e:	b480      	push	{r7}
 80027a0:	b085      	sub	sp, #20
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027b0:	887a      	ldrh	r2, [r7, #2]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4013      	ands	r3, r2
 80027b6:	041a      	lsls	r2, r3, #16
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43d9      	mvns	r1, r3
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	400b      	ands	r3, r1
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	619a      	str	r2, [r3, #24]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <HAL_PWREx_EnableOverDrive+0x90>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <HAL_PWREx_EnableOverDrive+0x90>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <HAL_PWREx_EnableOverDrive+0x90>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_PWREx_EnableOverDrive+0x94>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002800:	f7fe fefa 	bl	80015f8 <HAL_GetTick>
 8002804:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002806:	e009      	b.n	800281c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002808:	f7fe fef6 	bl	80015f8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002816:	d901      	bls.n	800281c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e01f      	b.n	800285c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <HAL_PWREx_EnableOverDrive+0x98>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002828:	d1ee      	bne.n	8002808 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800282a:	4b11      	ldr	r3, [pc, #68]	; (8002870 <HAL_PWREx_EnableOverDrive+0x9c>)
 800282c:	2201      	movs	r2, #1
 800282e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002830:	f7fe fee2 	bl	80015f8 <HAL_GetTick>
 8002834:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002836:	e009      	b.n	800284c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002838:	f7fe fede 	bl	80015f8 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002846:	d901      	bls.n	800284c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e007      	b.n	800285c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800284c:	4b07      	ldr	r3, [pc, #28]	; (800286c <HAL_PWREx_EnableOverDrive+0x98>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002858:	d1ee      	bne.n	8002838 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	420e0040 	.word	0x420e0040
 800286c:	40007000 	.word	0x40007000
 8002870:	420e0044 	.word	0x420e0044

08002874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e264      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d075      	beq.n	800297e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002892:	4ba3      	ldr	r3, [pc, #652]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d00c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4ba0      	ldr	r3, [pc, #640]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d112      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028aa:	4b9d      	ldr	r3, [pc, #628]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	4b99      	ldr	r3, [pc, #612]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05b      	beq.n	800297c <HAL_RCC_OscConfig+0x108>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d157      	bne.n	800297c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e23f      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x74>
 80028da:	4b91      	ldr	r3, [pc, #580]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a90      	ldr	r2, [pc, #576]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e01d      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x98>
 80028f2:	4b8b      	ldr	r3, [pc, #556]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a8a      	ldr	r2, [pc, #552]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b88      	ldr	r3, [pc, #544]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a87      	ldr	r2, [pc, #540]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 800290c:	4b84      	ldr	r3, [pc, #528]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a83      	ldr	r2, [pc, #524]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b81      	ldr	r3, [pc, #516]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a80      	ldr	r2, [pc, #512]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7fe fe64 	bl	80015f8 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe fe60 	bl	80015f8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e204      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0xc0>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe fe50 	bl	80015f8 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295c:	f7fe fe4c 	bl	80015f8 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1f0      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	4b6c      	ldr	r3, [pc, #432]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0xe8>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d063      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800298a:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b62      	ldr	r3, [pc, #392]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d11c      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b5f      	ldr	r3, [pc, #380]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e1c4      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b56      	ldr	r3, [pc, #344]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4952      	ldr	r1, [pc, #328]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	e03a      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e4:	4b4f      	ldr	r3, [pc, #316]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fe fe05 	bl	80015f8 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f2:	f7fe fe01 	bl	80015f8 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1a5      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4940      	ldr	r1, [pc, #256]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
 8002a24:	e015      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a26:	4b3f      	ldr	r3, [pc, #252]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fde4 	bl	80015f8 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a34:	f7fe fde0 	bl	80015f8 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e184      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d030      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a66:	4b30      	ldr	r3, [pc, #192]	; (8002b28 <HAL_RCC_OscConfig+0x2b4>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fdc4 	bl	80015f8 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a74:	f7fe fdc0 	bl	80015f8 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e164      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x200>
 8002a92:	e015      	b.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a94:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <HAL_RCC_OscConfig+0x2b4>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7fe fdad 	bl	80015f8 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7fe fda9 	bl	80015f8 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e14d      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a0 	beq.w	8002c0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10f      	bne.n	8002afe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afa:	2301      	movs	r3, #1
 8002afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_OscConfig+0x2b8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d121      	bne.n	8002b4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_RCC_OscConfig+0x2b8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <HAL_RCC_OscConfig+0x2b8>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b16:	f7fe fd6f 	bl	80015f8 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	e011      	b.n	8002b42 <HAL_RCC_OscConfig+0x2ce>
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800
 8002b24:	42470000 	.word	0x42470000
 8002b28:	42470e80 	.word	0x42470e80
 8002b2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b30:	f7fe fd62 	bl	80015f8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e106      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	4b85      	ldr	r3, [pc, #532]	; (8002d58 <HAL_RCC_OscConfig+0x4e4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d106      	bne.n	8002b64 <HAL_RCC_OscConfig+0x2f0>
 8002b56:	4b81      	ldr	r3, [pc, #516]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	4a80      	ldr	r2, [pc, #512]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	6713      	str	r3, [r2, #112]	; 0x70
 8002b62:	e01c      	b.n	8002b9e <HAL_RCC_OscConfig+0x32a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b05      	cmp	r3, #5
 8002b6a:	d10c      	bne.n	8002b86 <HAL_RCC_OscConfig+0x312>
 8002b6c:	4b7b      	ldr	r3, [pc, #492]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	4a7a      	ldr	r2, [pc, #488]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b72:	f043 0304 	orr.w	r3, r3, #4
 8002b76:	6713      	str	r3, [r2, #112]	; 0x70
 8002b78:	4b78      	ldr	r3, [pc, #480]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	4a77      	ldr	r2, [pc, #476]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	6713      	str	r3, [r2, #112]	; 0x70
 8002b84:	e00b      	b.n	8002b9e <HAL_RCC_OscConfig+0x32a>
 8002b86:	4b75      	ldr	r3, [pc, #468]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a74      	ldr	r2, [pc, #464]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
 8002b92:	4b72      	ldr	r3, [pc, #456]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	4a71      	ldr	r2, [pc, #452]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b98:	f023 0304 	bic.w	r3, r3, #4
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d015      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba6:	f7fe fd27 	bl	80015f8 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7fe fd23 	bl	80015f8 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e0c5      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc4:	4b65      	ldr	r3, [pc, #404]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0ee      	beq.n	8002bae <HAL_RCC_OscConfig+0x33a>
 8002bd0:	e014      	b.n	8002bfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd2:	f7fe fd11 	bl	80015f8 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe fd0d 	bl	80015f8 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e0af      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf0:	4b5a      	ldr	r3, [pc, #360]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ee      	bne.n	8002bda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d105      	bne.n	8002c0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c02:	4b56      	ldr	r3, [pc, #344]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a55      	ldr	r2, [pc, #340]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 809b 	beq.w	8002d4e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c18:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d05c      	beq.n	8002cde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d141      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2c:	4b4c      	ldr	r3, [pc, #304]	; (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7fe fce1 	bl	80015f8 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fe fcdd 	bl	80015f8 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e081      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4c:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f0      	bne.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	019b      	lsls	r3, r3, #6
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	3b01      	subs	r3, #1
 8002c72:	041b      	lsls	r3, r3, #16
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	061b      	lsls	r3, r3, #24
 8002c7c:	4937      	ldr	r1, [pc, #220]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c82:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fcb6 	bl	80015f8 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c90:	f7fe fcb2 	bl	80015f8 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e056      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca2:	4b2e      	ldr	r3, [pc, #184]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x41c>
 8002cae:	e04e      	b.n	8002d4e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7fe fc9f 	bl	80015f8 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbe:	f7fe fc9b 	bl	80015f8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e03f      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd0:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f0      	bne.n	8002cbe <HAL_RCC_OscConfig+0x44a>
 8002cdc:	e037      	b.n	8002d4e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e032      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cea:	4b1c      	ldr	r3, [pc, #112]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d028      	beq.n	8002d4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d121      	bne.n	8002d4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d11a      	bne.n	8002d4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d20:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d111      	bne.n	8002d4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	085b      	lsrs	r3, r3, #1
 8002d32:	3b01      	subs	r3, #1
 8002d34:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d001      	beq.n	8002d4e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40007000 	.word	0x40007000
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	42470060 	.word	0x42470060

08002d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0cc      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b68      	ldr	r3, [pc, #416]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d90c      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b65      	ldr	r3, [pc, #404]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b63      	ldr	r3, [pc, #396]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b8      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db8:	4b59      	ldr	r3, [pc, #356]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd0:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b50      	ldr	r3, [pc, #320]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	494d      	ldr	r1, [pc, #308]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d044      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d119      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e07f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e22:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e06f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e067      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e42:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f023 0203 	bic.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4934      	ldr	r1, [pc, #208]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e54:	f7fe fbd0 	bl	80015f8 <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5c:	f7fe fbcc 	bl	80015f8 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e04f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 020c 	and.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d1eb      	bne.n	8002e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d20c      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e032      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4916      	ldr	r1, [pc, #88]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	490e      	ldr	r1, [pc, #56]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eea:	f000 f821 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	490a      	ldr	r1, [pc, #40]	; (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	5ccb      	ldrb	r3, [r1, r3]
 8002efe:	fa22 f303 	lsr.w	r3, r2, r3
 8002f02:	4a09      	ldr	r2, [pc, #36]	; (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe fb30 	bl	8001570 <HAL_InitTick>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08003900 	.word	0x08003900
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	20000004 	.word	0x20000004

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	2300      	movs	r3, #0
 8002f42:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f48:	4b67      	ldr	r3, [pc, #412]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d00d      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x40>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	f200 80bd 	bhi.w	80030d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f62:	e0b7      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b61      	ldr	r3, [pc, #388]	; (80030ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f66:	60bb      	str	r3, [r7, #8]
       break;
 8002f68:	e0b7      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6a:	4b61      	ldr	r3, [pc, #388]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f6c:	60bb      	str	r3, [r7, #8]
      break;
 8002f6e:	e0b4      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f70:	4b5d      	ldr	r3, [pc, #372]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7a:	4b5b      	ldr	r3, [pc, #364]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d04d      	beq.n	8003022 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f86:	4b58      	ldr	r3, [pc, #352]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f96:	f04f 0100 	mov.w	r1, #0
 8002f9a:	ea02 0800 	and.w	r8, r2, r0
 8002f9e:	ea03 0901 	and.w	r9, r3, r1
 8002fa2:	4640      	mov	r0, r8
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	014b      	lsls	r3, r1, #5
 8002fb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fb4:	0142      	lsls	r2, r0, #5
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	ebb0 0008 	subs.w	r0, r0, r8
 8002fbe:	eb61 0109 	sbc.w	r1, r1, r9
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	018b      	lsls	r3, r1, #6
 8002fcc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fd0:	0182      	lsls	r2, r0, #6
 8002fd2:	1a12      	subs	r2, r2, r0
 8002fd4:	eb63 0301 	sbc.w	r3, r3, r1
 8002fd8:	f04f 0000 	mov.w	r0, #0
 8002fdc:	f04f 0100 	mov.w	r1, #0
 8002fe0:	00d9      	lsls	r1, r3, #3
 8002fe2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fe6:	00d0      	lsls	r0, r2, #3
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	eb12 0208 	adds.w	r2, r2, r8
 8002ff0:	eb43 0309 	adc.w	r3, r3, r9
 8002ff4:	f04f 0000 	mov.w	r0, #0
 8002ff8:	f04f 0100 	mov.w	r1, #0
 8002ffc:	0259      	lsls	r1, r3, #9
 8002ffe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003002:	0250      	lsls	r0, r2, #9
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	461a      	mov	r2, r3
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	f7fd f8ea 	bl	80001ec <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e04a      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003022:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	461a      	mov	r2, r3
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003032:	f04f 0100 	mov.w	r1, #0
 8003036:	ea02 0400 	and.w	r4, r2, r0
 800303a:	ea03 0501 	and.w	r5, r3, r1
 800303e:	4620      	mov	r0, r4
 8003040:	4629      	mov	r1, r5
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	014b      	lsls	r3, r1, #5
 800304c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003050:	0142      	lsls	r2, r0, #5
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	1b00      	subs	r0, r0, r4
 8003058:	eb61 0105 	sbc.w	r1, r1, r5
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	018b      	lsls	r3, r1, #6
 8003066:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800306a:	0182      	lsls	r2, r0, #6
 800306c:	1a12      	subs	r2, r2, r0
 800306e:	eb63 0301 	sbc.w	r3, r3, r1
 8003072:	f04f 0000 	mov.w	r0, #0
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	00d9      	lsls	r1, r3, #3
 800307c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003080:	00d0      	lsls	r0, r2, #3
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	1912      	adds	r2, r2, r4
 8003088:	eb45 0303 	adc.w	r3, r5, r3
 800308c:	f04f 0000 	mov.w	r0, #0
 8003090:	f04f 0100 	mov.w	r1, #0
 8003094:	0299      	lsls	r1, r3, #10
 8003096:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800309a:	0290      	lsls	r0, r2, #10
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	461a      	mov	r2, r3
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	f7fd f89e 	bl	80001ec <__aeabi_uldivmod>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4613      	mov	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	3301      	adds	r3, #1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	60bb      	str	r3, [r7, #8]
      break;
 80030d2:	e002      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030d6:	60bb      	str	r3, [r7, #8]
      break;
 80030d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030da:	68bb      	ldr	r3, [r7, #8]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	00f42400 	.word	0x00f42400
 80030f0:	007a1200 	.word	0x007a1200

080030f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f8:	4b03      	ldr	r3, [pc, #12]	; (8003108 <HAL_RCC_GetHCLKFreq+0x14>)
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000000 	.word	0x20000000

0800310c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003110:	f7ff fff0 	bl	80030f4 <HAL_RCC_GetHCLKFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	0a9b      	lsrs	r3, r3, #10
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4903      	ldr	r1, [pc, #12]	; (8003130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40023800 	.word	0x40023800
 8003130:	08003910 	.word	0x08003910

08003134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003138:	f7ff ffdc 	bl	80030f4 <HAL_RCC_GetHCLKFreq>
 800313c:	4602      	mov	r2, r0
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	0b5b      	lsrs	r3, r3, #13
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	4903      	ldr	r1, [pc, #12]	; (8003158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800314a:	5ccb      	ldrb	r3, [r1, r3]
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40023800 	.word	0x40023800
 8003158:	08003910 	.word	0x08003910

0800315c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e03f      	b.n	80031ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fe f942 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2224      	movs	r2, #36	; 0x24
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800319e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f9a7 	bl	80034f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b08a      	sub	sp, #40	; 0x28
 80031fa:	af02      	add	r7, sp, #8
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b20      	cmp	r3, #32
 8003214:	d17c      	bne.n	8003310 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_UART_Transmit+0x2c>
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e075      	b.n	8003312 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_UART_Transmit+0x3e>
 8003230:	2302      	movs	r3, #2
 8003232:	e06e      	b.n	8003312 <HAL_UART_Transmit+0x11c>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2221      	movs	r2, #33	; 0x21
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800324a:	f7fe f9d5 	bl	80015f8 <HAL_GetTick>
 800324e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	88fa      	ldrh	r2, [r7, #6]
 8003254:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	88fa      	ldrh	r2, [r7, #6]
 800325a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003264:	d108      	bne.n	8003278 <HAL_UART_Transmit+0x82>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d104      	bne.n	8003278 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	e003      	b.n	8003280 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003288:	e02a      	b.n	80032e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2200      	movs	r2, #0
 8003292:	2180      	movs	r1, #128	; 0x80
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f8e2 	bl	800345e <UART_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e036      	b.n	8003312 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10b      	bne.n	80032c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	3302      	adds	r3, #2
 80032be:	61bb      	str	r3, [r7, #24]
 80032c0:	e007      	b.n	80032d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	3301      	adds	r3, #1
 80032d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1cf      	bne.n	800328a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2200      	movs	r2, #0
 80032f2:	2140      	movs	r1, #64	; 0x40
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f8b2 	bl	800345e <UART_WaitOnFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e006      	b.n	8003312 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e000      	b.n	8003312 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	3720      	adds	r7, #32
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b08a      	sub	sp, #40	; 0x28
 800331e:	af02      	add	r7, sp, #8
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	4613      	mov	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b20      	cmp	r3, #32
 8003338:	f040 808c 	bne.w	8003454 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HAL_UART_Receive+0x2e>
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e084      	b.n	8003456 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_UART_Receive+0x40>
 8003356:	2302      	movs	r3, #2
 8003358:	e07d      	b.n	8003456 <HAL_UART_Receive+0x13c>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2222      	movs	r2, #34	; 0x22
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003376:	f7fe f93f 	bl	80015f8 <HAL_GetTick>
 800337a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	88fa      	ldrh	r2, [r7, #6]
 8003380:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	88fa      	ldrh	r2, [r7, #6]
 8003386:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003390:	d108      	bne.n	80033a4 <HAL_UART_Receive+0x8a>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d104      	bne.n	80033a4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	e003      	b.n	80033ac <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80033b4:	e043      	b.n	800343e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2200      	movs	r2, #0
 80033be:	2120      	movs	r1, #32
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f84c 	bl	800345e <UART_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e042      	b.n	8003456 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10c      	bne.n	80033f0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	3302      	adds	r3, #2
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	e01f      	b.n	8003430 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f8:	d007      	beq.n	800340a <HAL_UART_Receive+0xf0>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <HAL_UART_Receive+0xfe>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	b2da      	uxtb	r2, r3
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	e008      	b.n	800342a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003424:	b2da      	uxtb	r2, r3
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3301      	adds	r3, #1
 800342e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1b6      	bne.n	80033b6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	e000      	b.n	8003456 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003454:	2302      	movs	r3, #2
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346e:	e02c      	b.n	80034ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003476:	d028      	beq.n	80034ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <UART_WaitOnFlagUntilTimeout+0x30>
 800347e:	f7fe f8bb 	bl	80015f8 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	429a      	cmp	r2, r3
 800348c:	d21d      	bcs.n	80034ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800349c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e00f      	b.n	80034ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4013      	ands	r3, r2
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	bf0c      	ite	eq
 80034da:	2301      	moveq	r3, #1
 80034dc:	2300      	movne	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d0c3      	beq.n	8003470 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034f8:	b09f      	sub	sp, #124	; 0x7c
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350a:	68d9      	ldr	r1, [r3, #12]
 800350c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	ea40 0301 	orr.w	r3, r0, r1
 8003514:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	431a      	orrs	r2, r3
 8003520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	431a      	orrs	r2, r3
 8003526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	4313      	orrs	r3, r2
 800352c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800352e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003538:	f021 010c 	bic.w	r1, r1, #12
 800353c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003542:	430b      	orrs	r3, r1
 8003544:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003552:	6999      	ldr	r1, [r3, #24]
 8003554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	ea40 0301 	orr.w	r3, r0, r1
 800355c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800355e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4bc5      	ldr	r3, [pc, #788]	; (8003878 <UART_SetConfig+0x384>)
 8003564:	429a      	cmp	r2, r3
 8003566:	d004      	beq.n	8003572 <UART_SetConfig+0x7e>
 8003568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4bc3      	ldr	r3, [pc, #780]	; (800387c <UART_SetConfig+0x388>)
 800356e:	429a      	cmp	r2, r3
 8003570:	d103      	bne.n	800357a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003572:	f7ff fddf 	bl	8003134 <HAL_RCC_GetPCLK2Freq>
 8003576:	6778      	str	r0, [r7, #116]	; 0x74
 8003578:	e002      	b.n	8003580 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800357a:	f7ff fdc7 	bl	800310c <HAL_RCC_GetPCLK1Freq>
 800357e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003588:	f040 80b6 	bne.w	80036f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800358c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800358e:	461c      	mov	r4, r3
 8003590:	f04f 0500 	mov.w	r5, #0
 8003594:	4622      	mov	r2, r4
 8003596:	462b      	mov	r3, r5
 8003598:	1891      	adds	r1, r2, r2
 800359a:	6439      	str	r1, [r7, #64]	; 0x40
 800359c:	415b      	adcs	r3, r3
 800359e:	647b      	str	r3, [r7, #68]	; 0x44
 80035a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035a4:	1912      	adds	r2, r2, r4
 80035a6:	eb45 0303 	adc.w	r3, r5, r3
 80035aa:	f04f 0000 	mov.w	r0, #0
 80035ae:	f04f 0100 	mov.w	r1, #0
 80035b2:	00d9      	lsls	r1, r3, #3
 80035b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035b8:	00d0      	lsls	r0, r2, #3
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	1911      	adds	r1, r2, r4
 80035c0:	6639      	str	r1, [r7, #96]	; 0x60
 80035c2:	416b      	adcs	r3, r5
 80035c4:	667b      	str	r3, [r7, #100]	; 0x64
 80035c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	1891      	adds	r1, r2, r2
 80035d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80035d4:	415b      	adcs	r3, r3
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80035e0:	f7fc fe04 	bl	80001ec <__aeabi_uldivmod>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4ba5      	ldr	r3, [pc, #660]	; (8003880 <UART_SetConfig+0x38c>)
 80035ea:	fba3 2302 	umull	r2, r3, r3, r2
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	011e      	lsls	r6, r3, #4
 80035f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035f4:	461c      	mov	r4, r3
 80035f6:	f04f 0500 	mov.w	r5, #0
 80035fa:	4622      	mov	r2, r4
 80035fc:	462b      	mov	r3, r5
 80035fe:	1891      	adds	r1, r2, r2
 8003600:	6339      	str	r1, [r7, #48]	; 0x30
 8003602:	415b      	adcs	r3, r3
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
 8003606:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800360a:	1912      	adds	r2, r2, r4
 800360c:	eb45 0303 	adc.w	r3, r5, r3
 8003610:	f04f 0000 	mov.w	r0, #0
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	00d9      	lsls	r1, r3, #3
 800361a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800361e:	00d0      	lsls	r0, r2, #3
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	1911      	adds	r1, r2, r4
 8003626:	65b9      	str	r1, [r7, #88]	; 0x58
 8003628:	416b      	adcs	r3, r5
 800362a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800362c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	461a      	mov	r2, r3
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	1891      	adds	r1, r2, r2
 8003638:	62b9      	str	r1, [r7, #40]	; 0x28
 800363a:	415b      	adcs	r3, r3
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800363e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003642:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003646:	f7fc fdd1 	bl	80001ec <__aeabi_uldivmod>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4b8c      	ldr	r3, [pc, #560]	; (8003880 <UART_SetConfig+0x38c>)
 8003650:	fba3 1302 	umull	r1, r3, r3, r2
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	2164      	movs	r1, #100	; 0x64
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	3332      	adds	r3, #50	; 0x32
 8003662:	4a87      	ldr	r2, [pc, #540]	; (8003880 <UART_SetConfig+0x38c>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003670:	441e      	add	r6, r3
 8003672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003674:	4618      	mov	r0, r3
 8003676:	f04f 0100 	mov.w	r1, #0
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	1894      	adds	r4, r2, r2
 8003680:	623c      	str	r4, [r7, #32]
 8003682:	415b      	adcs	r3, r3
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
 8003686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800368a:	1812      	adds	r2, r2, r0
 800368c:	eb41 0303 	adc.w	r3, r1, r3
 8003690:	f04f 0400 	mov.w	r4, #0
 8003694:	f04f 0500 	mov.w	r5, #0
 8003698:	00dd      	lsls	r5, r3, #3
 800369a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800369e:	00d4      	lsls	r4, r2, #3
 80036a0:	4622      	mov	r2, r4
 80036a2:	462b      	mov	r3, r5
 80036a4:	1814      	adds	r4, r2, r0
 80036a6:	653c      	str	r4, [r7, #80]	; 0x50
 80036a8:	414b      	adcs	r3, r1
 80036aa:	657b      	str	r3, [r7, #84]	; 0x54
 80036ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	461a      	mov	r2, r3
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	1891      	adds	r1, r2, r2
 80036b8:	61b9      	str	r1, [r7, #24]
 80036ba:	415b      	adcs	r3, r3
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80036c6:	f7fc fd91 	bl	80001ec <__aeabi_uldivmod>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4b6c      	ldr	r3, [pc, #432]	; (8003880 <UART_SetConfig+0x38c>)
 80036d0:	fba3 1302 	umull	r1, r3, r3, r2
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	2164      	movs	r1, #100	; 0x64
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	3332      	adds	r3, #50	; 0x32
 80036e2:	4a67      	ldr	r2, [pc, #412]	; (8003880 <UART_SetConfig+0x38c>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	f003 0207 	and.w	r2, r3, #7
 80036ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4432      	add	r2, r6
 80036f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036f6:	e0b9      	b.n	800386c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036fa:	461c      	mov	r4, r3
 80036fc:	f04f 0500 	mov.w	r5, #0
 8003700:	4622      	mov	r2, r4
 8003702:	462b      	mov	r3, r5
 8003704:	1891      	adds	r1, r2, r2
 8003706:	6139      	str	r1, [r7, #16]
 8003708:	415b      	adcs	r3, r3
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003710:	1912      	adds	r2, r2, r4
 8003712:	eb45 0303 	adc.w	r3, r5, r3
 8003716:	f04f 0000 	mov.w	r0, #0
 800371a:	f04f 0100 	mov.w	r1, #0
 800371e:	00d9      	lsls	r1, r3, #3
 8003720:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003724:	00d0      	lsls	r0, r2, #3
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	eb12 0804 	adds.w	r8, r2, r4
 800372e:	eb43 0905 	adc.w	r9, r3, r5
 8003732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4618      	mov	r0, r3
 8003738:	f04f 0100 	mov.w	r1, #0
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	008b      	lsls	r3, r1, #2
 8003746:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800374a:	0082      	lsls	r2, r0, #2
 800374c:	4640      	mov	r0, r8
 800374e:	4649      	mov	r1, r9
 8003750:	f7fc fd4c 	bl	80001ec <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4b49      	ldr	r3, [pc, #292]	; (8003880 <UART_SetConfig+0x38c>)
 800375a:	fba3 2302 	umull	r2, r3, r3, r2
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	011e      	lsls	r6, r3, #4
 8003762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003764:	4618      	mov	r0, r3
 8003766:	f04f 0100 	mov.w	r1, #0
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	1894      	adds	r4, r2, r2
 8003770:	60bc      	str	r4, [r7, #8]
 8003772:	415b      	adcs	r3, r3
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800377a:	1812      	adds	r2, r2, r0
 800377c:	eb41 0303 	adc.w	r3, r1, r3
 8003780:	f04f 0400 	mov.w	r4, #0
 8003784:	f04f 0500 	mov.w	r5, #0
 8003788:	00dd      	lsls	r5, r3, #3
 800378a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800378e:	00d4      	lsls	r4, r2, #3
 8003790:	4622      	mov	r2, r4
 8003792:	462b      	mov	r3, r5
 8003794:	1814      	adds	r4, r2, r0
 8003796:	64bc      	str	r4, [r7, #72]	; 0x48
 8003798:	414b      	adcs	r3, r1
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800379c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f04f 0100 	mov.w	r1, #0
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	008b      	lsls	r3, r1, #2
 80037b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037b4:	0082      	lsls	r2, r0, #2
 80037b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80037ba:	f7fc fd17 	bl	80001ec <__aeabi_uldivmod>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4b2f      	ldr	r3, [pc, #188]	; (8003880 <UART_SetConfig+0x38c>)
 80037c4:	fba3 1302 	umull	r1, r3, r3, r2
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	2164      	movs	r1, #100	; 0x64
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	3332      	adds	r3, #50	; 0x32
 80037d6:	4a2a      	ldr	r2, [pc, #168]	; (8003880 <UART_SetConfig+0x38c>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	095b      	lsrs	r3, r3, #5
 80037de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e2:	441e      	add	r6, r3
 80037e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e6:	4618      	mov	r0, r3
 80037e8:	f04f 0100 	mov.w	r1, #0
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	1894      	adds	r4, r2, r2
 80037f2:	603c      	str	r4, [r7, #0]
 80037f4:	415b      	adcs	r3, r3
 80037f6:	607b      	str	r3, [r7, #4]
 80037f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037fc:	1812      	adds	r2, r2, r0
 80037fe:	eb41 0303 	adc.w	r3, r1, r3
 8003802:	f04f 0400 	mov.w	r4, #0
 8003806:	f04f 0500 	mov.w	r5, #0
 800380a:	00dd      	lsls	r5, r3, #3
 800380c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003810:	00d4      	lsls	r4, r2, #3
 8003812:	4622      	mov	r2, r4
 8003814:	462b      	mov	r3, r5
 8003816:	eb12 0a00 	adds.w	sl, r2, r0
 800381a:	eb43 0b01 	adc.w	fp, r3, r1
 800381e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4618      	mov	r0, r3
 8003824:	f04f 0100 	mov.w	r1, #0
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	008b      	lsls	r3, r1, #2
 8003832:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003836:	0082      	lsls	r2, r0, #2
 8003838:	4650      	mov	r0, sl
 800383a:	4659      	mov	r1, fp
 800383c:	f7fc fcd6 	bl	80001ec <__aeabi_uldivmod>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <UART_SetConfig+0x38c>)
 8003846:	fba3 1302 	umull	r1, r3, r3, r2
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	2164      	movs	r1, #100	; 0x64
 800384e:	fb01 f303 	mul.w	r3, r1, r3
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	3332      	adds	r3, #50	; 0x32
 8003858:	4a09      	ldr	r2, [pc, #36]	; (8003880 <UART_SetConfig+0x38c>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	f003 020f 	and.w	r2, r3, #15
 8003864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4432      	add	r2, r6
 800386a:	609a      	str	r2, [r3, #8]
}
 800386c:	bf00      	nop
 800386e:	377c      	adds	r7, #124	; 0x7c
 8003870:	46bd      	mov	sp, r7
 8003872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003876:	bf00      	nop
 8003878:	40011000 	.word	0x40011000
 800387c:	40011400 	.word	0x40011400
 8003880:	51eb851f 	.word	0x51eb851f

08003884 <__libc_init_array>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	4d0d      	ldr	r5, [pc, #52]	; (80038bc <__libc_init_array+0x38>)
 8003888:	4c0d      	ldr	r4, [pc, #52]	; (80038c0 <__libc_init_array+0x3c>)
 800388a:	1b64      	subs	r4, r4, r5
 800388c:	10a4      	asrs	r4, r4, #2
 800388e:	2600      	movs	r6, #0
 8003890:	42a6      	cmp	r6, r4
 8003892:	d109      	bne.n	80038a8 <__libc_init_array+0x24>
 8003894:	4d0b      	ldr	r5, [pc, #44]	; (80038c4 <__libc_init_array+0x40>)
 8003896:	4c0c      	ldr	r4, [pc, #48]	; (80038c8 <__libc_init_array+0x44>)
 8003898:	f000 f820 	bl	80038dc <_init>
 800389c:	1b64      	subs	r4, r4, r5
 800389e:	10a4      	asrs	r4, r4, #2
 80038a0:	2600      	movs	r6, #0
 80038a2:	42a6      	cmp	r6, r4
 80038a4:	d105      	bne.n	80038b2 <__libc_init_array+0x2e>
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
 80038a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ac:	4798      	blx	r3
 80038ae:	3601      	adds	r6, #1
 80038b0:	e7ee      	b.n	8003890 <__libc_init_array+0xc>
 80038b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b6:	4798      	blx	r3
 80038b8:	3601      	adds	r6, #1
 80038ba:	e7f2      	b.n	80038a2 <__libc_init_array+0x1e>
 80038bc:	08003920 	.word	0x08003920
 80038c0:	08003920 	.word	0x08003920
 80038c4:	08003920 	.word	0x08003920
 80038c8:	08003924 	.word	0x08003924

080038cc <memset>:
 80038cc:	4402      	add	r2, r0
 80038ce:	4603      	mov	r3, r0
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d100      	bne.n	80038d6 <memset+0xa>
 80038d4:	4770      	bx	lr
 80038d6:	f803 1b01 	strb.w	r1, [r3], #1
 80038da:	e7f9      	b.n	80038d0 <memset+0x4>

080038dc <_init>:
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	bf00      	nop
 80038e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e2:	bc08      	pop	{r3}
 80038e4:	469e      	mov	lr, r3
 80038e6:	4770      	bx	lr

080038e8 <_fini>:
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	bf00      	nop
 80038ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ee:	bc08      	pop	{r3}
 80038f0:	469e      	mov	lr, r3
 80038f2:	4770      	bx	lr
