
STM32 Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000283c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080029e8  080029e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a0c  08002a0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a0c  08002a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a14  08002a14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a14  08002a14  00012a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a18  08002a18  00012a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000000c  08002a28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000280  08002a28  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084eb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cdc  00000000  00000000  00028527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0002a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  0002aa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002250a  00000000  00000000  0002b150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009635  00000000  00000000  0004d65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd971  00000000  00000000  00056c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00124600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e58  00000000  00000000  00124654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080029d0 	.word	0x080029d0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080029d0 	.word	0x080029d0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_CRC_Init+0x20>)
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <MX_CRC_Init+0x24>)
 80004ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_CRC_Init+0x20>)
 80004f0:	f000 fead 	bl	800124e <HAL_CRC_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004fa:	f000 fc2b 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000230 	.word	0x20000230
 8000508:	40023000 	.word	0x40023000

0800050c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <HAL_CRC_MspInit+0x3c>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d10d      	bne.n	800053a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a09      	ldr	r2, [pc, #36]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023000 	.word	0x40023000
 800054c:	40023800 	.word	0x40023800

08000550 <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <HAL_CRC_MspDeInit+0x2c>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d105      	bne.n	800056e <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <HAL_CRC_MspDeInit+0x30>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a06      	ldr	r2, [pc, #24]	; (8000580 <HAL_CRC_MspDeInit+0x30>)
 8000568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40023000 	.word	0x40023000
 8000580:	40023800 	.word	0x40023800

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	4b26      	ldr	r3, [pc, #152]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a25      	ldr	r2, [pc, #148]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b23      	ldr	r3, [pc, #140]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a17      	ldr	r2, [pc, #92]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_GPIO_Init+0xb4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80005f4:	4811      	ldr	r0, [pc, #68]	; (800063c <MX_GPIO_Init+0xb8>)
 80005f6:	f001 f933 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005fa:	2301      	movs	r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_GPIO_Init+0xbc>)
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000602:	2302      	movs	r3, #2
 8000604:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4619      	mov	r1, r3
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <MX_GPIO_Init+0xc0>)
 800060e:	f000 fe57 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000612:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	2301      	movs	r3, #1
 800061a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	4619      	mov	r1, r3
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_GPIO_Init+0xb8>)
 800062c:	f000 fe48 	bl	80012c0 <HAL_GPIO_Init>

}
 8000630:	bf00      	nop
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40021800 	.word	0x40021800
 8000640:	10120000 	.word	0x10120000
 8000644:	40020000 	.word	0x40020000

08000648 <BL_VerifyCommand>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static ErrorStatus BL_VerifyCommand(uint8_t Command, uint8_t CommandComplement)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
	ErrorStatus CommandExists = ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	/* Verify that the command exists */
	for(i = 0; i < BL_Num_Commands; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	73bb      	strb	r3, [r7, #14]
 8000660:	e00b      	b.n	800067a <BL_VerifyCommand+0x32>
	{
		if(Command == BL_Commands[i])
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <BL_VerifyCommand+0x5c>)
 8000666:	5cd3      	ldrb	r3, [r2, r3]
 8000668:	79fa      	ldrb	r2, [r7, #7]
 800066a:	429a      	cmp	r2, r3
 800066c:	d102      	bne.n	8000674 <BL_VerifyCommand+0x2c>
		{
			CommandExists = SUCCESS;
 800066e:	2300      	movs	r3, #0
 8000670:	73fb      	strb	r3, [r7, #15]
			break;
 8000672:	e005      	b.n	8000680 <BL_VerifyCommand+0x38>
	for(i = 0; i < BL_Num_Commands; i++)
 8000674:	7bbb      	ldrb	r3, [r7, #14]
 8000676:	3301      	adds	r3, #1
 8000678:	73bb      	strb	r3, [r7, #14]
 800067a:	7bbb      	ldrb	r3, [r7, #14]
 800067c:	2b0a      	cmp	r3, #10
 800067e:	d9f0      	bls.n	8000662 <BL_VerifyCommand+0x1a>
		else
		{

		}
	}
	if((CommandExists == SUCCESS) && ((Command ^ CommandComplement) == 0xFF))
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d107      	bne.n	8000696 <BL_VerifyCommand+0x4e>
 8000686:	79fa      	ldrb	r2, [r7, #7]
 8000688:	79bb      	ldrb	r3, [r7, #6]
 800068a:	4053      	eors	r3, r2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2bff      	cmp	r3, #255	; 0xff
 8000690:	d101      	bne.n	8000696 <BL_VerifyCommand+0x4e>
	{
		return SUCCESS;
 8000692:	2300      	movs	r3, #0
 8000694:	e000      	b.n	8000698 <BL_VerifyCommand+0x50>
	}
	else
	{
		return ERROR;
 8000696:	2301      	movs	r3, #1
	}
}
 8000698:	4618      	mov	r0, r3
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	080029e8 	.word	0x080029e8

080006a8 <BL_VerifyChecksum>:
static ErrorStatus BL_VerifyChecksum(uint8_t* pData, uint32_t Length)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
	uint8_t result = 0x00;
 80006b2:	2300      	movs	r3, #0
 80006b4:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < Length; i++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	e009      	b.n	80006d0 <BL_VerifyChecksum+0x28>
	{
		result ^= pData[i];
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	4053      	eors	r3, r2
 80006c8:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < Length; i++)
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	3301      	adds	r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d8f1      	bhi.n	80006bc <BL_VerifyChecksum+0x14>
	}
	if(result == 0x00)
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d101      	bne.n	80006e2 <BL_VerifyChecksum+0x3a>
	{
		return SUCCESS;
 80006de:	2300      	movs	r3, #0
 80006e0:	e000      	b.n	80006e4 <BL_VerifyChecksum+0x3c>
	}
	else
	{
		return ERROR;
 80006e2:	2301      	movs	r3, #1
	}
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <BL_Get>:
static ErrorStatus BL_Get(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	/* Send ACK byte */
	BL_TransmitBuffer[0] = BL_ACK;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <BL_Get+0x4c>)
 80006f6:	2279      	movs	r2, #121	; 0x79
 80006f8:	701a      	strb	r2, [r3, #0]
	/* Send the number of bytes (version + commands) */
	BL_TransmitBuffer[1] = BL_Num_Commands;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <BL_Get+0x4c>)
 80006fc:	220b      	movs	r2, #11
 80006fe:	705a      	strb	r2, [r3, #1]
	/* Send the bootloader version */
	BL_TransmitBuffer[2] = BL_Version;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <BL_Get+0x4c>)
 8000702:	221a      	movs	r2, #26
 8000704:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 3, HAL_MAX_DELAY);
 8000706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800070a:	2203      	movs	r2, #3
 800070c:	490b      	ldr	r1, [pc, #44]	; (800073c <BL_Get+0x4c>)
 800070e:	480c      	ldr	r0, [pc, #48]	; (8000740 <BL_Get+0x50>)
 8000710:	f001 fdeb 	bl	80022ea <HAL_UART_Transmit>
	/* Send the supported commands */
	HAL_UART_Transmit(&huart1, (uint8_t*)BL_Commands, BL_Num_Commands, HAL_MAX_DELAY);
 8000714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000718:	220b      	movs	r2, #11
 800071a:	490a      	ldr	r1, [pc, #40]	; (8000744 <BL_Get+0x54>)
 800071c:	4808      	ldr	r0, [pc, #32]	; (8000740 <BL_Get+0x50>)
 800071e:	f001 fde4 	bl	80022ea <HAL_UART_Transmit>
	/* Send ACK byte */
	BL_TransmitBuffer[0] = BL_ACK;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <BL_Get+0x4c>)
 8000724:	2279      	movs	r2, #121	; 0x79
 8000726:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800072c:	2201      	movs	r2, #1
 800072e:	4903      	ldr	r1, [pc, #12]	; (800073c <BL_Get+0x4c>)
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <BL_Get+0x50>)
 8000732:	f001 fdda 	bl	80022ea <HAL_UART_Transmit>

	return SUCCESS;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000128 	.word	0x20000128
 8000740:	20000238 	.word	0x20000238
 8000744:	080029e8 	.word	0x080029e8

08000748 <BL_GetVersionAndProtectionStatus>:
static ErrorStatus BL_GetVersionAndProtectionStatus(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	/* Send ACK byte */
	BL_TransmitBuffer[0] = BL_ACK;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <BL_GetVersionAndProtectionStatus+0x38>)
 800074e:	2279      	movs	r2, #121	; 0x79
 8000750:	701a      	strb	r2, [r3, #0]
	/* Send the bootloader version */
	BL_TransmitBuffer[1] = BL_Version;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <BL_GetVersionAndProtectionStatus+0x38>)
 8000754:	221a      	movs	r2, #26
 8000756:	705a      	strb	r2, [r3, #1]
	/* Send option bytes */
	BL_TransmitBuffer[2] = 0x00;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <BL_GetVersionAndProtectionStatus+0x38>)
 800075a:	2200      	movs	r2, #0
 800075c:	709a      	strb	r2, [r3, #2]
	BL_TransmitBuffer[3] = 0x00;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <BL_GetVersionAndProtectionStatus+0x38>)
 8000760:	2200      	movs	r2, #0
 8000762:	70da      	strb	r2, [r3, #3]
	/* Send ACK byte */
	BL_TransmitBuffer[4] = BL_ACK;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <BL_GetVersionAndProtectionStatus+0x38>)
 8000766:	2279      	movs	r2, #121	; 0x79
 8000768:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 5, HAL_MAX_DELAY);
 800076a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800076e:	2205      	movs	r2, #5
 8000770:	4903      	ldr	r1, [pc, #12]	; (8000780 <BL_GetVersionAndProtectionStatus+0x38>)
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <BL_GetVersionAndProtectionStatus+0x3c>)
 8000774:	f001 fdb9 	bl	80022ea <HAL_UART_Transmit>

	return SUCCESS;
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000128 	.word	0x20000128
 8000784:	20000238 	.word	0x20000238

08000788 <BL_GetID>:
static ErrorStatus BL_GetID(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	/* Send ACK byte */
	BL_TransmitBuffer[0] = BL_ACK;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <BL_GetID+0x38>)
 800078e:	2279      	movs	r2, #121	; 0x79
 8000790:	701a      	strb	r2, [r3, #0]
	/* Send the number of bytes */
	BL_TransmitBuffer[1] = 1;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <BL_GetID+0x38>)
 8000794:	2201      	movs	r2, #1
 8000796:	705a      	strb	r2, [r3, #1]
	/* Send the process ID */
	BL_TransmitBuffer[2] = 0x04;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <BL_GetID+0x38>)
 800079a:	2204      	movs	r2, #4
 800079c:	709a      	strb	r2, [r3, #2]
	BL_TransmitBuffer[3] = 0x00;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <BL_GetID+0x38>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	70da      	strb	r2, [r3, #3]
	/* Send ACK byte */
	BL_TransmitBuffer[4] = BL_ACK;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <BL_GetID+0x38>)
 80007a6:	2279      	movs	r2, #121	; 0x79
 80007a8:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 5, HAL_MAX_DELAY);
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ae:	2205      	movs	r2, #5
 80007b0:	4903      	ldr	r1, [pc, #12]	; (80007c0 <BL_GetID+0x38>)
 80007b2:	4804      	ldr	r0, [pc, #16]	; (80007c4 <BL_GetID+0x3c>)
 80007b4:	f001 fd99 	bl	80022ea <HAL_UART_Transmit>

	return SUCCESS;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000128 	.word	0x20000128
 80007c4:	20000238 	.word	0x20000238

080007c8 <BL_ReadMemory>:
static ErrorStatus BL_ReadMemory(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	/* Is RDP active ? */
	if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 80007cc:	4b33      	ldr	r3, [pc, #204]	; (800089c <BL_ReadMemory+0xd4>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2baa      	cmp	r3, #170	; 0xaa
 80007d4:	d114      	bne.n	8000800 <BL_ReadMemory+0x38>
	{
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 80007d6:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <BL_ReadMemory+0xd8>)
 80007d8:	2279      	movs	r2, #121	; 0x79
 80007da:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 80007dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007e0:	2201      	movs	r2, #1
 80007e2:	492f      	ldr	r1, [pc, #188]	; (80008a0 <BL_ReadMemory+0xd8>)
 80007e4:	482f      	ldr	r0, [pc, #188]	; (80008a4 <BL_ReadMemory+0xdc>)
 80007e6:	f001 fd80 	bl	80022ea <HAL_UART_Transmit>
	{
		return ERROR;
	}

	/* Receive the start address (4 bytes) with checksum */
	if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, 5, HAL_MAX_DELAY))
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ee:	2205      	movs	r2, #5
 80007f0:	492d      	ldr	r1, [pc, #180]	; (80008a8 <BL_ReadMemory+0xe0>)
 80007f2:	482c      	ldr	r0, [pc, #176]	; (80008a4 <BL_ReadMemory+0xdc>)
 80007f4:	f001 fe0b 	bl	800240e <HAL_UART_Receive>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d004      	beq.n	8000808 <BL_ReadMemory+0x40>
 80007fe:	e001      	b.n	8000804 <BL_ReadMemory+0x3c>
		return ERROR;
 8000800:	2301      	movs	r3, #1
 8000802:	e048      	b.n	8000896 <BL_ReadMemory+0xce>
	{

	}
	else
	{
		return ERROR;
 8000804:	2301      	movs	r3, #1
 8000806:	e046      	b.n	8000896 <BL_ReadMemory+0xce>
	}

	/* Address valid and checksum ok ? */
	if(SUCCESS == BL_VerifyChecksum(BL_ReceiveBuffer, 5))
 8000808:	2105      	movs	r1, #5
 800080a:	4827      	ldr	r0, [pc, #156]	; (80008a8 <BL_ReadMemory+0xe0>)
 800080c:	f7ff ff4c 	bl	80006a8 <BL_VerifyChecksum>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d118      	bne.n	8000848 <BL_ReadMemory+0x80>
	{
		BL_Address = *(uint32_t*)BL_ReceiveBuffer;
 8000816:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <BL_ReadMemory+0xe0>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a24      	ldr	r2, [pc, #144]	; (80008ac <BL_ReadMemory+0xe4>)
 800081c:	6013      	str	r3, [r2, #0]
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <BL_ReadMemory+0xd8>)
 8000820:	2279      	movs	r2, #121	; 0x79
 8000822:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000828:	2201      	movs	r2, #1
 800082a:	491d      	ldr	r1, [pc, #116]	; (80008a0 <BL_ReadMemory+0xd8>)
 800082c:	481d      	ldr	r0, [pc, #116]	; (80008a4 <BL_ReadMemory+0xdc>)
 800082e:	f001 fd5c 	bl	80022ea <HAL_UART_Transmit>
	{
		return ERROR;
	}

	/* Receive the number of bytes to be read and a checksum */
	if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, 2, HAL_MAX_DELAY))
 8000832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000836:	2202      	movs	r2, #2
 8000838:	491b      	ldr	r1, [pc, #108]	; (80008a8 <BL_ReadMemory+0xe0>)
 800083a:	481a      	ldr	r0, [pc, #104]	; (80008a4 <BL_ReadMemory+0xdc>)
 800083c:	f001 fde7 	bl	800240e <HAL_UART_Receive>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d004      	beq.n	8000850 <BL_ReadMemory+0x88>
 8000846:	e001      	b.n	800084c <BL_ReadMemory+0x84>
		return ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	e024      	b.n	8000896 <BL_ReadMemory+0xce>
	{

	}
	else
	{
		return ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	e022      	b.n	8000896 <BL_ReadMemory+0xce>
	}

	/* Checksum ok ? */
	if(SUCCESS == BL_VerifyChecksum(BL_ReceiveBuffer, 2))
 8000850:	2102      	movs	r1, #2
 8000852:	4815      	ldr	r0, [pc, #84]	; (80008a8 <BL_ReadMemory+0xe0>)
 8000854:	f7ff ff28 	bl	80006a8 <BL_VerifyChecksum>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d11a      	bne.n	8000894 <BL_ReadMemory+0xcc>
	{
		BL_NumBytes = BL_ReceiveBuffer[0];
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <BL_ReadMemory+0xe0>)
 8000860:	781a      	ldrb	r2, [r3, #0]
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <BL_ReadMemory+0xe8>)
 8000864:	701a      	strb	r2, [r3, #0]
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <BL_ReadMemory+0xd8>)
 8000868:	2279      	movs	r2, #121	; 0x79
 800086a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 800086c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000870:	2201      	movs	r2, #1
 8000872:	490b      	ldr	r1, [pc, #44]	; (80008a0 <BL_ReadMemory+0xd8>)
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <BL_ReadMemory+0xdc>)
 8000876:	f001 fd38 	bl	80022ea <HAL_UART_Transmit>
	{
		return ERROR;
	}

	/* Send data to host */
	HAL_UART_Transmit(&huart1, (uint8_t*)BL_Address, BL_NumBytes, HAL_MAX_DELAY);
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <BL_ReadMemory+0xe4>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4619      	mov	r1, r3
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <BL_ReadMemory+0xe8>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b29a      	uxth	r2, r3
 8000886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <BL_ReadMemory+0xdc>)
 800088c:	f001 fd2d 	bl	80022ea <HAL_UART_Transmit>


	return SUCCESS;
 8000890:	2300      	movs	r3, #0
 8000892:	e000      	b.n	8000896 <BL_ReadMemory+0xce>
		return ERROR;
 8000894:	2301      	movs	r3, #1
}
 8000896:	4618      	mov	r0, r3
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023c15 	.word	0x40023c15
 80008a0:	20000128 	.word	0x20000128
 80008a4:	20000238 	.word	0x20000238
 80008a8:	20000028 	.word	0x20000028
 80008ac:	20000228 	.word	0x20000228
 80008b0:	2000022c 	.word	0x2000022c

080008b4 <BL_Go>:
static ErrorStatus BL_Go(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
	/* Is RDP active ? */
	if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 80008ba:	4b38      	ldr	r3, [pc, #224]	; (800099c <BL_Go+0xe8>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2baa      	cmp	r3, #170	; 0xaa
 80008c2:	d114      	bne.n	80008ee <BL_Go+0x3a>
	{
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 80008c4:	4b36      	ldr	r3, [pc, #216]	; (80009a0 <BL_Go+0xec>)
 80008c6:	2279      	movs	r2, #121	; 0x79
 80008c8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ce:	2201      	movs	r2, #1
 80008d0:	4933      	ldr	r1, [pc, #204]	; (80009a0 <BL_Go+0xec>)
 80008d2:	4834      	ldr	r0, [pc, #208]	; (80009a4 <BL_Go+0xf0>)
 80008d4:	f001 fd09 	bl	80022ea <HAL_UART_Transmit>
	{
		return ERROR;
	}

	/* Receive the start address (4 bytes) with checksum */
	if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, 5, HAL_MAX_DELAY))
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008dc:	2205      	movs	r2, #5
 80008de:	4932      	ldr	r1, [pc, #200]	; (80009a8 <BL_Go+0xf4>)
 80008e0:	4830      	ldr	r0, [pc, #192]	; (80009a4 <BL_Go+0xf0>)
 80008e2:	f001 fd94 	bl	800240e <HAL_UART_Receive>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d004      	beq.n	80008f6 <BL_Go+0x42>
 80008ec:	e001      	b.n	80008f2 <BL_Go+0x3e>
		return ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e050      	b.n	8000994 <BL_Go+0xe0>
	{
	}
	else
	{
		return ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e04e      	b.n	8000994 <BL_Go+0xe0>
	}

	/* Address valid and checksum ok ? */
	if(SUCCESS == BL_VerifyChecksum(BL_ReceiveBuffer, 5))
 80008f6:	2105      	movs	r1, #5
 80008f8:	482b      	ldr	r0, [pc, #172]	; (80009a8 <BL_Go+0xf4>)
 80008fa:	f7ff fed5 	bl	80006a8 <BL_VerifyChecksum>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d10b      	bne.n	800091c <BL_Go+0x68>
	{
		BL_Address = *(uint32_t*)BL_ReceiveBuffer;
 8000904:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <BL_Go+0xf4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a28      	ldr	r2, [pc, #160]	; (80009ac <BL_Go+0xf8>)
 800090a:	6013      	str	r3, [r2, #0]
	{
		return ERROR;
	}

	/* First byte lies in stack */
	if(*(uint32_t*)BL_Address <= _ram_end && *(uint32_t*)BL_Address > (_ram_end - _Min_Stack_Size))
 800090c:	4b27      	ldr	r3, [pc, #156]	; (80009ac <BL_Go+0xf8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <BL_Go+0xfc>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d83b      	bhi.n	8000992 <BL_Go+0xde>
 800091a:	e001      	b.n	8000920 <BL_Go+0x6c>
		return ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	e039      	b.n	8000994 <BL_Go+0xe0>
	if(*(uint32_t*)BL_Address <= _ram_end && *(uint32_t*)BL_Address > (_ram_end - _Min_Stack_Size))
 8000920:	4b22      	ldr	r3, [pc, #136]	; (80009ac <BL_Go+0xf8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <BL_Go+0xfc>)
 8000928:	6819      	ldr	r1, [r3, #0]
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <BL_Go+0x100>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	1acb      	subs	r3, r1, r3
 8000930:	429a      	cmp	r2, r3
 8000932:	d92e      	bls.n	8000992 <BL_Go+0xde>
	{
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <BL_Go+0xec>)
 8000936:	2279      	movs	r2, #121	; 0x79
 8000938:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 800093a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800093e:	2201      	movs	r2, #1
 8000940:	4917      	ldr	r1, [pc, #92]	; (80009a0 <BL_Go+0xec>)
 8000942:	4818      	ldr	r0, [pc, #96]	; (80009a4 <BL_Go+0xf0>)
 8000944:	f001 fcd1 	bl	80022ea <HAL_UART_Transmit>
		return ERROR;
	}

	/* Deinitialize all used peripherals */
	/* Deinitialize GPIO */
	HAL_GPIO_DeInit(B1_GPIO_Port, B1_Pin);
 8000948:	2101      	movs	r1, #1
 800094a:	481b      	ldr	r0, [pc, #108]	; (80009b8 <BL_Go+0x104>)
 800094c:	f000 fe64 	bl	8001618 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(LD3_GPIO_Port, LD3_Pin);
 8000950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000954:	4819      	ldr	r0, [pc, #100]	; (80009bc <BL_Go+0x108>)
 8000956:	f000 fe5f 	bl	8001618 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(LD4_GPIO_Port, LD4_Pin);
 800095a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800095e:	4817      	ldr	r0, [pc, #92]	; (80009bc <BL_Go+0x108>)
 8000960:	f000 fe5a 	bl	8001618 <HAL_GPIO_DeInit>
	/* Deinitialize USART */
	HAL_UART_MspDeInit(&huart1);
 8000964:	480f      	ldr	r0, [pc, #60]	; (80009a4 <BL_Go+0xf0>)
 8000966:	f000 fad3 	bl	8000f10 <HAL_UART_MspDeInit>
	/* Deinitialize CRC */
	HAL_CRC_MspDeInit(&hcrc);
 800096a:	4815      	ldr	r0, [pc, #84]	; (80009c0 <BL_Go+0x10c>)
 800096c:	f7ff fdf0 	bl	8000550 <HAL_CRC_MspDeInit>
	/* Move vector table */
	SCB->VTOR = BL_Address;
 8000970:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <BL_Go+0x110>)
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <BL_Go+0xf8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	6093      	str	r3, [r2, #8]
	/* Set the MSP */
	__set_MSP(*(uint32_t*)BL_ReceiveBuffer);
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <BL_Go+0xf4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f383 8808 	msr	MSP, r3
}
 8000984:	bf00      	nop
	/* Jump to user application */
	(*((void (*)(void))(BL_Address + 4)))();
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <BL_Go+0xf8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	3304      	adds	r3, #4
 800098c:	4798      	blx	r3

	return SUCCESS;
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <BL_Go+0xe0>
		return ERROR;
 8000992:	2301      	movs	r3, #1

}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023c15 	.word	0x40023c15
 80009a0:	20000128 	.word	0x20000128
 80009a4:	20000238 	.word	0x20000238
 80009a8:	20000028 	.word	0x20000028
 80009ac:	20000228 	.word	0x20000228
 80009b0:	20030000 	.word	0x20030000
 80009b4:	00000400 	.word	0x00000400
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40021800 	.word	0x40021800
 80009c0:	20000230 	.word	0x20000230
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <BL_WriteMemory>:
static ErrorStatus BL_WriteMemory(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	/* Iterator */
	uint32_t i;
	/* Is RDP active ? */
	if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 80009cc:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <BL_WriteMemory+0xd4>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2baa      	cmp	r3, #170	; 0xaa
 80009d4:	d114      	bne.n	8000a00 <BL_WriteMemory+0x38>
	{
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 80009d6:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <BL_WriteMemory+0xd8>)
 80009d8:	2279      	movs	r2, #121	; 0x79
 80009da:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009e0:	2201      	movs	r2, #1
 80009e2:	492f      	ldr	r1, [pc, #188]	; (8000aa0 <BL_WriteMemory+0xd8>)
 80009e4:	482f      	ldr	r0, [pc, #188]	; (8000aa4 <BL_WriteMemory+0xdc>)
 80009e6:	f001 fc80 	bl	80022ea <HAL_UART_Transmit>
	{
		return ERROR;
	}

	/* Receive the start address (4 bytes) with checksum */
	if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, 5, HAL_MAX_DELAY))
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ee:	2205      	movs	r2, #5
 80009f0:	492d      	ldr	r1, [pc, #180]	; (8000aa8 <BL_WriteMemory+0xe0>)
 80009f2:	482c      	ldr	r0, [pc, #176]	; (8000aa4 <BL_WriteMemory+0xdc>)
 80009f4:	f001 fd0b 	bl	800240e <HAL_UART_Receive>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d004      	beq.n	8000a08 <BL_WriteMemory+0x40>
 80009fe:	e001      	b.n	8000a04 <BL_WriteMemory+0x3c>
		return ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	e049      	b.n	8000a98 <BL_WriteMemory+0xd0>
	{

	}
	else
	{
		return ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e047      	b.n	8000a98 <BL_WriteMemory+0xd0>
	}


	/* Address valid and checksum ok ? */
	if(SUCCESS == BL_VerifyChecksum(BL_ReceiveBuffer, 5))
 8000a08:	2105      	movs	r1, #5
 8000a0a:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <BL_WriteMemory+0xe0>)
 8000a0c:	f7ff fe4c 	bl	80006a8 <BL_VerifyChecksum>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d118      	bne.n	8000a48 <BL_WriteMemory+0x80>
	{
		BL_Address = *(uint32_t*)BL_ReceiveBuffer;
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <BL_WriteMemory+0xe0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a24      	ldr	r2, [pc, #144]	; (8000aac <BL_WriteMemory+0xe4>)
 8000a1c:	6013      	str	r3, [r2, #0]
		/* Send ACK byte */
		BL_TransmitBuffer[0] = BL_ACK;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <BL_WriteMemory+0xd8>)
 8000a20:	2279      	movs	r2, #121	; 0x79
 8000a22:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a28:	2201      	movs	r2, #1
 8000a2a:	491d      	ldr	r1, [pc, #116]	; (8000aa0 <BL_WriteMemory+0xd8>)
 8000a2c:	481d      	ldr	r0, [pc, #116]	; (8000aa4 <BL_WriteMemory+0xdc>)
 8000a2e:	f001 fc5c 	bl	80022ea <HAL_UART_Transmit>
	{
		return ERROR;
	}

	/* Receive the number of bytes to be written */
	if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, 1, HAL_MAX_DELAY))
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a36:	2201      	movs	r2, #1
 8000a38:	491b      	ldr	r1, [pc, #108]	; (8000aa8 <BL_WriteMemory+0xe0>)
 8000a3a:	481a      	ldr	r0, [pc, #104]	; (8000aa4 <BL_WriteMemory+0xdc>)
 8000a3c:	f001 fce7 	bl	800240e <HAL_UART_Receive>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d115      	bne.n	8000a72 <BL_WriteMemory+0xaa>
 8000a46:	e001      	b.n	8000a4c <BL_WriteMemory+0x84>
		return ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e025      	b.n	8000a98 <BL_WriteMemory+0xd0>
	{

		BL_NumBytes = BL_ReceiveBuffer[0];
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <BL_WriteMemory+0xe0>)
 8000a4e:	781a      	ldrb	r2, [r3, #0]
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <BL_WriteMemory+0xe8>)
 8000a52:	701a      	strb	r2, [r3, #0]
	{
		return ERROR;
	}

	/* Receive the data and the checksum */
	if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, BL_NumBytes + 1, HAL_MAX_DELAY))
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <BL_WriteMemory+0xe8>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a62:	4911      	ldr	r1, [pc, #68]	; (8000aa8 <BL_WriteMemory+0xe0>)
 8000a64:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <BL_WriteMemory+0xdc>)
 8000a66:	f001 fcd2 	bl	800240e <HAL_UART_Receive>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d004      	beq.n	8000a7a <BL_WriteMemory+0xb2>
 8000a70:	e001      	b.n	8000a76 <BL_WriteMemory+0xae>
		return ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e010      	b.n	8000a98 <BL_WriteMemory+0xd0>
	{

	}
	else
	{
		return ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00e      	b.n	8000a98 <BL_WriteMemory+0xd0>
	}

	/* checksum ok ? */
	if(SUCCESS == BL_VerifyChecksum(BL_ReceiveBuffer, BL_NumBytes + 1))
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <BL_WriteMemory+0xe8>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <BL_WriteMemory+0xe0>)
 8000a84:	f7ff fe10 	bl	80006a8 <BL_VerifyChecksum>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <BL_WriteMemory+0xca>
	{

	}
	else
	{
		return ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e002      	b.n	8000a98 <BL_WriteMemory+0xd0>

	/* Option byte address */
	if(1)
	{
		/* Unlock option bytes */
		if(HAL_OK == HAL_FLASH_OB_Unlock())
 8000a92:	f000 fbf9 	bl	8001288 <HAL_FLASH_OB_Unlock>
	else
	{
		return ERROR;
	}

	return SUCCESS;
 8000a96:	2300      	movs	r3, #0

}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023c15 	.word	0x40023c15
 8000aa0:	20000128 	.word	0x20000128
 8000aa4:	20000238 	.word	0x20000238
 8000aa8:	20000028 	.word	0x20000028
 8000aac:	20000228 	.word	0x20000228
 8000ab0:	2000022c 	.word	0x2000022c

08000ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/* Bootloader current Systick */
	uint32_t BL_CurrentTick = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fa6f 	bl	8000fa0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000ac2:	f001 fb91 	bl	80021e8 <HAL_RCC_GetHCLKFreq>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4a63      	ldr	r2, [pc, #396]	; (8000c58 <main+0x1a4>)
 8000aca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ace:	099b      	lsrs	r3, r3, #6
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fbb0 	bl	8001236 <HAL_SYSTICK_Config>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad6:	f000 f8cb 	bl	8000c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ada:	f7ff fd53 	bl	8000584 <MX_GPIO_Init>
  MX_CRC_Init();
 8000ade:	f7ff fd01 	bl	80004e4 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000ae2:	f000 f9a1 	bl	8000e28 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* Start bootloader */
	if(GPIO_PIN_SET ==  HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	485c      	ldr	r0, [pc, #368]	; (8000c5c <main+0x1a8>)
 8000aea:	f000 fea1 	bl	8001830 <HAL_GPIO_ReadPin>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	f040 80af 	bne.w	8000c54 <main+0x1a0>
	{
		while(1)
		{
			/* Flash green LED */
			if(HAL_GetTick() - BL_CurrentTick > 500)
 8000af6:	f000 fab9 	bl	800106c <HAL_GetTick>
 8000afa:	4602      	mov	r2, r0
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b04:	d907      	bls.n	8000b16 <main+0x62>
			{
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0a:	4855      	ldr	r0, [pc, #340]	; (8000c60 <main+0x1ac>)
 8000b0c:	f000 fec1 	bl	8001892 <HAL_GPIO_TogglePin>
				BL_CurrentTick = HAL_GetTick();
 8000b10:	f000 faac 	bl	800106c <HAL_GetTick>
 8000b14:	6078      	str	r0, [r7, #4]
			}
			/* Wait for command */
			if(HAL_OK == HAL_UART_Receive(&huart1, BL_ReceiveBuffer, 2, 5))
 8000b16:	2305      	movs	r3, #5
 8000b18:	2202      	movs	r2, #2
 8000b1a:	4952      	ldr	r1, [pc, #328]	; (8000c64 <main+0x1b0>)
 8000b1c:	4852      	ldr	r0, [pc, #328]	; (8000c68 <main+0x1b4>)
 8000b1e:	f001 fc76 	bl	800240e <HAL_UART_Receive>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1e6      	bne.n	8000af6 <main+0x42>
			{
				/* Verify that it is a valid command */
				if(SUCCESS == BL_VerifyCommand(BL_ReceiveBuffer[0], BL_ReceiveBuffer[1]))
 8000b28:	4b4e      	ldr	r3, [pc, #312]	; (8000c64 <main+0x1b0>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4a4d      	ldr	r2, [pc, #308]	; (8000c64 <main+0x1b0>)
 8000b2e:	7852      	ldrb	r2, [r2, #1]
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fd88 	bl	8000648 <BL_VerifyCommand>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d17f      	bne.n	8000c3e <main+0x18a>
				{
					switch(BL_ReceiveBuffer[0])
 8000b3e:	4b49      	ldr	r3, [pc, #292]	; (8000c64 <main+0x1b0>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b21      	cmp	r3, #33	; 0x21
 8000b44:	dc4a      	bgt.n	8000bdc <main+0x128>
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db69      	blt.n	8000c1e <main+0x16a>
 8000b4a:	2b21      	cmp	r3, #33	; 0x21
 8000b4c:	d867      	bhi.n	8000c1e <main+0x16a>
 8000b4e:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <main+0xa0>)
 8000b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b54:	08000be3 	.word	0x08000be3
 8000b58:	08000bed 	.word	0x08000bed
 8000b5c:	08000bf7 	.word	0x08000bf7
 8000b60:	08000c1f 	.word	0x08000c1f
 8000b64:	08000c1f 	.word	0x08000c1f
 8000b68:	08000c1f 	.word	0x08000c1f
 8000b6c:	08000c1f 	.word	0x08000c1f
 8000b70:	08000c1f 	.word	0x08000c1f
 8000b74:	08000c1f 	.word	0x08000c1f
 8000b78:	08000c1f 	.word	0x08000c1f
 8000b7c:	08000c1f 	.word	0x08000c1f
 8000b80:	08000c1f 	.word	0x08000c1f
 8000b84:	08000c1f 	.word	0x08000c1f
 8000b88:	08000c1f 	.word	0x08000c1f
 8000b8c:	08000c1f 	.word	0x08000c1f
 8000b90:	08000c1f 	.word	0x08000c1f
 8000b94:	08000c1f 	.word	0x08000c1f
 8000b98:	08000c01 	.word	0x08000c01
 8000b9c:	08000c1f 	.word	0x08000c1f
 8000ba0:	08000c1f 	.word	0x08000c1f
 8000ba4:	08000c1f 	.word	0x08000c1f
 8000ba8:	08000c1f 	.word	0x08000c1f
 8000bac:	08000c1f 	.word	0x08000c1f
 8000bb0:	08000c1f 	.word	0x08000c1f
 8000bb4:	08000c1f 	.word	0x08000c1f
 8000bb8:	08000c1f 	.word	0x08000c1f
 8000bbc:	08000c1f 	.word	0x08000c1f
 8000bc0:	08000c1f 	.word	0x08000c1f
 8000bc4:	08000c1f 	.word	0x08000c1f
 8000bc8:	08000c1f 	.word	0x08000c1f
 8000bcc:	08000c1f 	.word	0x08000c1f
 8000bd0:	08000c1f 	.word	0x08000c1f
 8000bd4:	08000c1f 	.word	0x08000c1f
 8000bd8:	08000c0b 	.word	0x08000c0b
 8000bdc:	2b31      	cmp	r3, #49	; 0x31
 8000bde:	d019      	beq.n	8000c14 <main+0x160>
							break;
						case BL_Write_Memory_Command:
							BL_CommandErrorStatus = BL_WriteMemory();
							break;
						default:
							break;
 8000be0:	e01d      	b.n	8000c1e <main+0x16a>
							BL_CommandErrorStatus = BL_Get();
 8000be2:	f7ff fd85 	bl	80006f0 <BL_Get>
 8000be6:	4603      	mov	r3, r0
 8000be8:	70fb      	strb	r3, [r7, #3]
							break;
 8000bea:	e019      	b.n	8000c20 <main+0x16c>
							BL_CommandErrorStatus =  BL_GetVersionAndProtectionStatus();
 8000bec:	f7ff fdac 	bl	8000748 <BL_GetVersionAndProtectionStatus>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	70fb      	strb	r3, [r7, #3]
							break;
 8000bf4:	e014      	b.n	8000c20 <main+0x16c>
							BL_CommandErrorStatus = BL_GetID();
 8000bf6:	f7ff fdc7 	bl	8000788 <BL_GetID>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	70fb      	strb	r3, [r7, #3]
							break;
 8000bfe:	e00f      	b.n	8000c20 <main+0x16c>
							BL_CommandErrorStatus = BL_ReadMemory();
 8000c00:	f7ff fde2 	bl	80007c8 <BL_ReadMemory>
 8000c04:	4603      	mov	r3, r0
 8000c06:	70fb      	strb	r3, [r7, #3]
							break;
 8000c08:	e00a      	b.n	8000c20 <main+0x16c>
							BL_CommandErrorStatus = BL_Go();
 8000c0a:	f7ff fe53 	bl	80008b4 <BL_Go>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	70fb      	strb	r3, [r7, #3]
							break;
 8000c12:	e005      	b.n	8000c20 <main+0x16c>
							BL_CommandErrorStatus = BL_WriteMemory();
 8000c14:	f7ff fed8 	bl	80009c8 <BL_WriteMemory>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	70fb      	strb	r3, [r7, #3]
							break;
 8000c1c:	e000      	b.n	8000c20 <main+0x16c>
							break;
 8000c1e:	bf00      	nop
					}

					if(ERROR == BL_CommandErrorStatus)
 8000c20:	78fb      	ldrb	r3, [r7, #3]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	f47f af67 	bne.w	8000af6 <main+0x42>
					{
						/* Send NACK byte */
						BL_TransmitBuffer[0] = BL_NACK;
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <main+0x1b8>)
 8000c2a:	221f      	movs	r2, #31
 8000c2c:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c32:	2201      	movs	r2, #1
 8000c34:	490d      	ldr	r1, [pc, #52]	; (8000c6c <main+0x1b8>)
 8000c36:	480c      	ldr	r0, [pc, #48]	; (8000c68 <main+0x1b4>)
 8000c38:	f001 fb57 	bl	80022ea <HAL_UART_Transmit>
 8000c3c:	e75b      	b.n	8000af6 <main+0x42>
					}
				}
				else
				{
					/* Send NACK byte */
					BL_TransmitBuffer[0] = BL_NACK;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <main+0x1b8>)
 8000c40:	221f      	movs	r2, #31
 8000c42:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, BL_TransmitBuffer, 1, HAL_MAX_DELAY);
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <main+0x1b8>)
 8000c4c:	4806      	ldr	r0, [pc, #24]	; (8000c68 <main+0x1b4>)
 8000c4e:	f001 fb4c 	bl	80022ea <HAL_UART_Transmit>
			if(HAL_GetTick() - BL_CurrentTick > 500)
 8000c52:	e750      	b.n	8000af6 <main+0x42>
		}
	}
	/* Start application */
	else
	{
		while(1);
 8000c54:	e7fe      	b.n	8000c54 <main+0x1a0>
 8000c56:	bf00      	nop
 8000c58:	10624dd3 	.word	0x10624dd3
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40021800 	.word	0x40021800
 8000c64:	20000028 	.word	0x20000028
 8000c68:	20000238 	.word	0x20000238
 8000c6c:	20000128 	.word	0x20000128

08000c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b094      	sub	sp, #80	; 0x50
 8000c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c76:	f107 0320 	add.w	r3, r7, #32
 8000c7a:	2230      	movs	r2, #48	; 0x30
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 fe9e 	bl	80029c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <SystemClock_Config+0xdc>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	4a2b      	ldr	r2, [pc, #172]	; (8000d4c <SystemClock_Config+0xdc>)
 8000c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca4:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <SystemClock_Config+0xdc>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <SystemClock_Config+0xe0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a25      	ldr	r2, [pc, #148]	; (8000d50 <SystemClock_Config+0xe0>)
 8000cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <SystemClock_Config+0xe0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000ce4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000ce8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cee:	2307      	movs	r3, #7
 8000cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 fe36 	bl	8001968 <HAL_RCC_OscConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d02:	f000 f827 	bl	8000d54 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d06:	f000 fddf 	bl	80018c8 <HAL_PWREx_EnableOverDrive>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000d10:	f000 f820 	bl	8000d54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d14:	230f      	movs	r3, #15
 8000d16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000d20:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000d26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2105      	movs	r1, #5
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 f890 	bl	8001e58 <HAL_RCC_ClockConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d3e:	f000 f809 	bl	8000d54 <Error_Handler>
  }
}
 8000d42:	bf00      	nop
 8000d44:	3750      	adds	r7, #80	; 0x50
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40007000 	.word	0x40007000

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
}
 8000d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <Error_Handler+0x8>
	...

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <HAL_MspInit+0x4c>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <HAL_MspInit+0x4c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a08      	ldr	r2, [pc, #32]	; (8000dac <HAL_MspInit+0x4c>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_MspInit+0x4c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d9e:	2007      	movs	r0, #7
 8000da0:	f000 fa22 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f922 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_USART1_UART_Init+0x50>)
 8000e2e:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <MX_USART1_UART_Init+0x54>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_USART1_UART_Init+0x50>)
 8000e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_USART1_UART_Init+0x50>)
 8000e3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e40:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <MX_USART1_UART_Init+0x50>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <MX_USART1_UART_Init+0x50>)
 8000e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_USART1_UART_Init+0x50>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <MX_USART1_UART_Init+0x50>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_USART1_UART_Init+0x50>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_USART1_UART_Init+0x50>)
 8000e64:	f001 f9f4 	bl	8002250 <HAL_UART_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000e6e:	f7ff ff71 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000238 	.word	0x20000238
 8000e7c:	40011000 	.word	0x40011000

08000e80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <HAL_UART_MspInit+0x84>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d12c      	bne.n	8000efc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_UART_MspInit+0x88>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <HAL_UART_MspInit+0x88>)
 8000eac:	f043 0310 	orr.w	r3, r3, #16
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_UART_MspInit+0x88>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_UART_MspInit+0x88>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <HAL_UART_MspInit+0x88>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_UART_MspInit+0x88>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000eda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eec:	2307      	movs	r3, #7
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <HAL_UART_MspInit+0x8c>)
 8000ef8:	f000 f9e2 	bl	80012c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40011000 	.word	0x40011000
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000

08000f10 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <HAL_UART_MspDeInit+0x30>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d10a      	bne.n	8000f38 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_UART_MspDeInit+0x34>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_UART_MspDeInit+0x34>)
 8000f28:	f023 0310 	bic.w	r3, r3, #16
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000f2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <HAL_UART_MspDeInit+0x38>)
 8000f34:	f000 fb70 	bl	8001618 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40011000 	.word	0x40011000
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000

08000f4c <Reset_Handler>:
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0x12>
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopFillZerobss+0x16>)
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1a>)
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1e>)
 8000f56:	2300      	movs	r3, #0
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:
 8000f5a:	58d4      	ldr	r4, [r2, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:
 8000f60:	18c4      	adds	r4, r0, r3
 8000f62:	428c      	cmp	r4, r1
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopFillZerobss+0x22>)
 8000f68:	4c0b      	ldr	r4, [pc, #44]	; (8000f98 <LoopFillZerobss+0x26>)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:
 8000f72:	42a2      	cmp	r2, r4
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>
 8000f76:	f7ff ff45 	bl	8000e04 <SystemInit>
 8000f7a:	f001 fcfd 	bl	8002978 <__libc_init_array>
 8000f7e:	f7ff fd99 	bl	8000ab4 <main>
 8000f82:	4770      	bx	lr
 8000f84:	20030000 	.word	0x20030000
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	2000000c 	.word	0x2000000c
 8000f90:	08002a1c 	.word	0x08002a1c
 8000f94:	2000000c 	.word	0x2000000c
 8000f98:	20000280 	.word	0x20000280

08000f9c <ADC_IRQHandler>:
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f90d 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fec4 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f917 	bl	8001236 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001020:	f000 f8ed 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	2000027c 	.word	0x2000027c

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000027c 	.word	0x2000027c

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff47 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff5c 	bl	80010cc <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff8e 	bl	800113c <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffb0 	bl	80011a4 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e00e      	b.n	800127e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	795b      	ldrb	r3, [r3, #5]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d105      	bne.n	8001276 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff f94b 	bl	800050c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_FLASH_OB_Unlock+0x2c>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d007      	beq.n	80012a8 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_FLASH_OB_Unlock+0x2c>)
 800129a:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <HAL_FLASH_OB_Unlock+0x30>)
 800129c:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_FLASH_OB_Unlock+0x2c>)
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_FLASH_OB_Unlock+0x34>)
 80012a2:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80012a4:	2300      	movs	r3, #0
 80012a6:	e000      	b.n	80012aa <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	40023c00 	.word	0x40023c00
 80012b8:	08192a3b 	.word	0x08192a3b
 80012bc:	4c5d6e7f 	.word	0x4c5d6e7f

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	e177      	b.n	80015cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f040 8166 	bne.w	80015c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	2b01      	cmp	r3, #1
 8001304:	d005      	beq.n	8001312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130e:	2b02      	cmp	r3, #2
 8001310:	d130      	bne.n	8001374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	2203      	movs	r2, #3
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	68da      	ldr	r2, [r3, #12]
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001348:	2201      	movs	r2, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 0201 	and.w	r2, r3, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b03      	cmp	r3, #3
 800137e:	d017      	beq.n	80013b0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d123      	bne.n	8001404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	69b9      	ldr	r1, [r7, #24]
 8001400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0203 	and.w	r2, r3, #3
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80c0 	beq.w	80015c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b66      	ldr	r3, [pc, #408]	; (80015e4 <HAL_GPIO_Init+0x324>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a65      	ldr	r2, [pc, #404]	; (80015e4 <HAL_GPIO_Init+0x324>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b63      	ldr	r3, [pc, #396]	; (80015e4 <HAL_GPIO_Init+0x324>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001462:	4a61      	ldr	r2, [pc, #388]	; (80015e8 <HAL_GPIO_Init+0x328>)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a58      	ldr	r2, [pc, #352]	; (80015ec <HAL_GPIO_Init+0x32c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d037      	beq.n	80014fe <HAL_GPIO_Init+0x23e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a57      	ldr	r2, [pc, #348]	; (80015f0 <HAL_GPIO_Init+0x330>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d031      	beq.n	80014fa <HAL_GPIO_Init+0x23a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a56      	ldr	r2, [pc, #344]	; (80015f4 <HAL_GPIO_Init+0x334>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d02b      	beq.n	80014f6 <HAL_GPIO_Init+0x236>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a55      	ldr	r2, [pc, #340]	; (80015f8 <HAL_GPIO_Init+0x338>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d025      	beq.n	80014f2 <HAL_GPIO_Init+0x232>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a54      	ldr	r2, [pc, #336]	; (80015fc <HAL_GPIO_Init+0x33c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d01f      	beq.n	80014ee <HAL_GPIO_Init+0x22e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a53      	ldr	r2, [pc, #332]	; (8001600 <HAL_GPIO_Init+0x340>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d019      	beq.n	80014ea <HAL_GPIO_Init+0x22a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a52      	ldr	r2, [pc, #328]	; (8001604 <HAL_GPIO_Init+0x344>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_GPIO_Init+0x226>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a51      	ldr	r2, [pc, #324]	; (8001608 <HAL_GPIO_Init+0x348>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00d      	beq.n	80014e2 <HAL_GPIO_Init+0x222>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a50      	ldr	r2, [pc, #320]	; (800160c <HAL_GPIO_Init+0x34c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d007      	beq.n	80014de <HAL_GPIO_Init+0x21e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4f      	ldr	r2, [pc, #316]	; (8001610 <HAL_GPIO_Init+0x350>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_GPIO_Init+0x21a>
 80014d6:	2309      	movs	r3, #9
 80014d8:	e012      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014da:	230a      	movs	r3, #10
 80014dc:	e010      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014de:	2308      	movs	r3, #8
 80014e0:	e00e      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014e2:	2307      	movs	r3, #7
 80014e4:	e00c      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014e6:	2306      	movs	r3, #6
 80014e8:	e00a      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014ea:	2305      	movs	r3, #5
 80014ec:	e008      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014ee:	2304      	movs	r3, #4
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014f2:	2303      	movs	r3, #3
 80014f4:	e004      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014fe:	2300      	movs	r3, #0
 8001500:	69fa      	ldr	r2, [r7, #28]
 8001502:	f002 0203 	and.w	r2, r2, #3
 8001506:	0092      	lsls	r2, r2, #2
 8001508:	4093      	lsls	r3, r2
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001510:	4935      	ldr	r1, [pc, #212]	; (80015e8 <HAL_GPIO_Init+0x328>)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	089b      	lsrs	r3, r3, #2
 8001516:	3302      	adds	r3, #2
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800151e:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <HAL_GPIO_Init+0x354>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001542:	4a34      	ldr	r2, [pc, #208]	; (8001614 <HAL_GPIO_Init+0x354>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001548:	4b32      	ldr	r3, [pc, #200]	; (8001614 <HAL_GPIO_Init+0x354>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156c:	4a29      	ldr	r2, [pc, #164]	; (8001614 <HAL_GPIO_Init+0x354>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001572:	4b28      	ldr	r3, [pc, #160]	; (8001614 <HAL_GPIO_Init+0x354>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001596:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <HAL_GPIO_Init+0x354>)
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_GPIO_Init+0x354>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <HAL_GPIO_Init+0x354>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	2b0f      	cmp	r3, #15
 80015d0:	f67f ae84 	bls.w	80012dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40013800 	.word	0x40013800
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40020800 	.word	0x40020800
 80015f8:	40020c00 	.word	0x40020c00
 80015fc:	40021000 	.word	0x40021000
 8001600:	40021400 	.word	0x40021400
 8001604:	40021800 	.word	0x40021800
 8001608:	40021c00 	.word	0x40021c00
 800160c:	40022000 	.word	0x40022000
 8001610:	40022400 	.word	0x40022400
 8001614:	40013c00 	.word	0x40013c00

08001618 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001618:	b480      	push	{r7}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	e0d9      	b.n	80017e8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001634:	2201      	movs	r2, #1
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	429a      	cmp	r2, r3
 800164c:	f040 80c9 	bne.w	80017e2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001650:	4a6b      	ldr	r2, [pc, #428]	; (8001800 <HAL_GPIO_DeInit+0x1e8>)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	4013      	ands	r3, r2
 8001670:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a63      	ldr	r2, [pc, #396]	; (8001804 <HAL_GPIO_DeInit+0x1ec>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d037      	beq.n	80016ea <HAL_GPIO_DeInit+0xd2>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a62      	ldr	r2, [pc, #392]	; (8001808 <HAL_GPIO_DeInit+0x1f0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d031      	beq.n	80016e6 <HAL_GPIO_DeInit+0xce>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a61      	ldr	r2, [pc, #388]	; (800180c <HAL_GPIO_DeInit+0x1f4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d02b      	beq.n	80016e2 <HAL_GPIO_DeInit+0xca>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a60      	ldr	r2, [pc, #384]	; (8001810 <HAL_GPIO_DeInit+0x1f8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d025      	beq.n	80016de <HAL_GPIO_DeInit+0xc6>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a5f      	ldr	r2, [pc, #380]	; (8001814 <HAL_GPIO_DeInit+0x1fc>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d01f      	beq.n	80016da <HAL_GPIO_DeInit+0xc2>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a5e      	ldr	r2, [pc, #376]	; (8001818 <HAL_GPIO_DeInit+0x200>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d019      	beq.n	80016d6 <HAL_GPIO_DeInit+0xbe>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a5d      	ldr	r2, [pc, #372]	; (800181c <HAL_GPIO_DeInit+0x204>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d013      	beq.n	80016d2 <HAL_GPIO_DeInit+0xba>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a5c      	ldr	r2, [pc, #368]	; (8001820 <HAL_GPIO_DeInit+0x208>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d00d      	beq.n	80016ce <HAL_GPIO_DeInit+0xb6>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a5b      	ldr	r2, [pc, #364]	; (8001824 <HAL_GPIO_DeInit+0x20c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d007      	beq.n	80016ca <HAL_GPIO_DeInit+0xb2>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a5a      	ldr	r2, [pc, #360]	; (8001828 <HAL_GPIO_DeInit+0x210>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d101      	bne.n	80016c6 <HAL_GPIO_DeInit+0xae>
 80016c2:	2309      	movs	r3, #9
 80016c4:	e012      	b.n	80016ec <HAL_GPIO_DeInit+0xd4>
 80016c6:	230a      	movs	r3, #10
 80016c8:	e010      	b.n	80016ec <HAL_GPIO_DeInit+0xd4>
 80016ca:	2308      	movs	r3, #8
 80016cc:	e00e      	b.n	80016ec <HAL_GPIO_DeInit+0xd4>
 80016ce:	2307      	movs	r3, #7
 80016d0:	e00c      	b.n	80016ec <HAL_GPIO_DeInit+0xd4>
 80016d2:	2306      	movs	r3, #6
 80016d4:	e00a      	b.n	80016ec <HAL_GPIO_DeInit+0xd4>
 80016d6:	2305      	movs	r3, #5
 80016d8:	e008      	b.n	80016ec <HAL_GPIO_DeInit+0xd4>
 80016da:	2304      	movs	r3, #4
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_DeInit+0xd4>
 80016de:	2303      	movs	r3, #3
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_DeInit+0xd4>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_DeInit+0xd4>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_DeInit+0xd4>
 80016ea:	2300      	movs	r3, #0
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	f002 0203 	and.w	r2, r2, #3
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d132      	bne.n	8001762 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80016fc:	4b4b      	ldr	r3, [pc, #300]	; (800182c <HAL_GPIO_DeInit+0x214>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	43db      	mvns	r3, r3
 8001704:	4949      	ldr	r1, [pc, #292]	; (800182c <HAL_GPIO_DeInit+0x214>)
 8001706:	4013      	ands	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800170a:	4b48      	ldr	r3, [pc, #288]	; (800182c <HAL_GPIO_DeInit+0x214>)
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	43db      	mvns	r3, r3
 8001712:	4946      	ldr	r1, [pc, #280]	; (800182c <HAL_GPIO_DeInit+0x214>)
 8001714:	4013      	ands	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001718:	4b44      	ldr	r3, [pc, #272]	; (800182c <HAL_GPIO_DeInit+0x214>)
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43db      	mvns	r3, r3
 8001720:	4942      	ldr	r1, [pc, #264]	; (800182c <HAL_GPIO_DeInit+0x214>)
 8001722:	4013      	ands	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001726:	4b41      	ldr	r3, [pc, #260]	; (800182c <HAL_GPIO_DeInit+0x214>)
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	43db      	mvns	r3, r3
 800172e:	493f      	ldr	r1, [pc, #252]	; (800182c <HAL_GPIO_DeInit+0x214>)
 8001730:	4013      	ands	r3, r2
 8001732:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	220f      	movs	r2, #15
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001744:	4a2e      	ldr	r2, [pc, #184]	; (8001800 <HAL_GPIO_DeInit+0x1e8>)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	43da      	mvns	r2, r3
 8001754:	482a      	ldr	r0, [pc, #168]	; (8001800 <HAL_GPIO_DeInit+0x1e8>)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	400a      	ands	r2, r1
 800175c:	3302      	adds	r3, #2
 800175e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2103      	movs	r1, #3
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	401a      	ands	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	08da      	lsrs	r2, r3, #3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3208      	adds	r2, #8
 8001780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	08d2      	lsrs	r2, r2, #3
 8001798:	4019      	ands	r1, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3208      	adds	r2, #8
 800179e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2103      	movs	r1, #3
 80017ac:	fa01 f303 	lsl.w	r3, r1, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	401a      	ands	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	2101      	movs	r1, #1
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	401a      	ands	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2103      	movs	r1, #3
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	401a      	ands	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3301      	adds	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	f67f af22 	bls.w	8001634 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40013800 	.word	0x40013800
 8001804:	40020000 	.word	0x40020000
 8001808:	40020400 	.word	0x40020400
 800180c:	40020800 	.word	0x40020800
 8001810:	40020c00 	.word	0x40020c00
 8001814:	40021000 	.word	0x40021000
 8001818:	40021400 	.word	0x40021400
 800181c:	40021800 	.word	0x40021800
 8001820:	40021c00 	.word	0x40021c00
 8001824:	40022000 	.word	0x40022000
 8001828:	40022400 	.word	0x40022400
 800182c:	40013c00 	.word	0x40013c00

08001830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e001      	b.n	8001852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001892:	b480      	push	{r7}
 8001894:	b085      	sub	sp, #20
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018a4:	887a      	ldrh	r2, [r7, #2]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	041a      	lsls	r2, r3, #16
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	887b      	ldrh	r3, [r7, #2]
 80018b2:	400b      	ands	r3, r1
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	619a      	str	r2, [r3, #24]
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <HAL_PWREx_EnableOverDrive+0x90>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <HAL_PWREx_EnableOverDrive+0x90>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_PWREx_EnableOverDrive+0x90>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018ee:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_PWREx_EnableOverDrive+0x94>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018f4:	f7ff fbba 	bl	800106c <HAL_GetTick>
 80018f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018fa:	e009      	b.n	8001910 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018fc:	f7ff fbb6 	bl	800106c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800190a:	d901      	bls.n	8001910 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e01f      	b.n	8001950 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <HAL_PWREx_EnableOverDrive+0x98>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191c:	d1ee      	bne.n	80018fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001924:	f7ff fba2 	bl	800106c <HAL_GetTick>
 8001928:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800192a:	e009      	b.n	8001940 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800192c:	f7ff fb9e 	bl	800106c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800193a:	d901      	bls.n	8001940 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e007      	b.n	8001950 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <HAL_PWREx_EnableOverDrive+0x98>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800194c:	d1ee      	bne.n	800192c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	420e0040 	.word	0x420e0040
 8001960:	40007000 	.word	0x40007000
 8001964:	420e0044 	.word	0x420e0044

08001968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e264      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d075      	beq.n	8001a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001986:	4ba3      	ldr	r3, [pc, #652]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b04      	cmp	r3, #4
 8001990:	d00c      	beq.n	80019ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001992:	4ba0      	ldr	r3, [pc, #640]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800199a:	2b08      	cmp	r3, #8
 800199c:	d112      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199e:	4b9d      	ldr	r3, [pc, #628]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019aa:	d10b      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	4b99      	ldr	r3, [pc, #612]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d05b      	beq.n	8001a70 <HAL_RCC_OscConfig+0x108>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d157      	bne.n	8001a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e23f      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d106      	bne.n	80019dc <HAL_RCC_OscConfig+0x74>
 80019ce:	4b91      	ldr	r3, [pc, #580]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a90      	ldr	r2, [pc, #576]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e01d      	b.n	8001a18 <HAL_RCC_OscConfig+0xb0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x98>
 80019e6:	4b8b      	ldr	r3, [pc, #556]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a8a      	ldr	r2, [pc, #552]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b88      	ldr	r3, [pc, #544]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a87      	ldr	r2, [pc, #540]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0xb0>
 8001a00:	4b84      	ldr	r3, [pc, #528]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a83      	ldr	r2, [pc, #524]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b81      	ldr	r3, [pc, #516]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a80      	ldr	r2, [pc, #512]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff fb24 	bl	800106c <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff fb20 	bl	800106c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e204      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b76      	ldr	r3, [pc, #472]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0xc0>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fb10 	bl	800106c <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff fb0c 	bl	800106c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1f0      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	4b6c      	ldr	r3, [pc, #432]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0xe8>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d063      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a7e:	4b65      	ldr	r3, [pc, #404]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8a:	4b62      	ldr	r3, [pc, #392]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d11c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a96:	4b5f      	ldr	r3, [pc, #380]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d116      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	4b5c      	ldr	r3, [pc, #368]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <HAL_RCC_OscConfig+0x152>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e1c4      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	4b56      	ldr	r3, [pc, #344]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4952      	ldr	r1, [pc, #328]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	e03a      	b.n	8001b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d020      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad8:	4b4f      	ldr	r3, [pc, #316]	; (8001c18 <HAL_RCC_OscConfig+0x2b0>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ade:	f7ff fac5 	bl	800106c <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fac1 	bl	800106c <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e1a5      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b04:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4940      	ldr	r1, [pc, #256]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1a:	4b3f      	ldr	r3, [pc, #252]	; (8001c18 <HAL_RCC_OscConfig+0x2b0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff faa4 	bl	800106c <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b28:	f7ff faa0 	bl	800106c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e184      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d030      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d016      	beq.n	8001b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5a:	4b30      	ldr	r3, [pc, #192]	; (8001c1c <HAL_RCC_OscConfig+0x2b4>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff fa84 	bl	800106c <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b68:	f7ff fa80 	bl	800106c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e164      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x200>
 8001b86:	e015      	b.n	8001bb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <HAL_RCC_OscConfig+0x2b4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fa6d 	bl	800106c <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b96:	f7ff fa69 	bl	800106c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e14d      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80a0 	beq.w	8001d02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10f      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_RCC_OscConfig+0x2b8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d121      	bne.n	8001c42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_RCC_OscConfig+0x2b8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_RCC_OscConfig+0x2b8>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fa2f 	bl	800106c <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	e011      	b.n	8001c36 <HAL_RCC_OscConfig+0x2ce>
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	42470000 	.word	0x42470000
 8001c1c:	42470e80 	.word	0x42470e80
 8001c20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c24:	f7ff fa22 	bl	800106c <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e106      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c36:	4b85      	ldr	r3, [pc, #532]	; (8001e4c <HAL_RCC_OscConfig+0x4e4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d106      	bne.n	8001c58 <HAL_RCC_OscConfig+0x2f0>
 8001c4a:	4b81      	ldr	r3, [pc, #516]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4e:	4a80      	ldr	r2, [pc, #512]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6713      	str	r3, [r2, #112]	; 0x70
 8001c56:	e01c      	b.n	8001c92 <HAL_RCC_OscConfig+0x32a>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b05      	cmp	r3, #5
 8001c5e:	d10c      	bne.n	8001c7a <HAL_RCC_OscConfig+0x312>
 8001c60:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c64:	4a7a      	ldr	r2, [pc, #488]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001c66:	f043 0304 	orr.w	r3, r3, #4
 8001c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6c:	4b78      	ldr	r3, [pc, #480]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	4a77      	ldr	r2, [pc, #476]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6713      	str	r3, [r2, #112]	; 0x70
 8001c78:	e00b      	b.n	8001c92 <HAL_RCC_OscConfig+0x32a>
 8001c7a:	4b75      	ldr	r3, [pc, #468]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7e:	4a74      	ldr	r2, [pc, #464]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001c80:	f023 0301 	bic.w	r3, r3, #1
 8001c84:	6713      	str	r3, [r2, #112]	; 0x70
 8001c86:	4b72      	ldr	r3, [pc, #456]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	4a71      	ldr	r2, [pc, #452]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001c8c:	f023 0304 	bic.w	r3, r3, #4
 8001c90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d015      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f9e7 	bl	800106c <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7ff f9e3 	bl	800106c <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e0c5      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb8:	4b65      	ldr	r3, [pc, #404]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0ee      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x33a>
 8001cc4:	e014      	b.n	8001cf0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc6:	f7ff f9d1 	bl	800106c <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f7ff f9cd 	bl	800106c <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e0af      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce4:	4b5a      	ldr	r3, [pc, #360]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1ee      	bne.n	8001cce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d105      	bne.n	8001d02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf6:	4b56      	ldr	r3, [pc, #344]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a55      	ldr	r2, [pc, #340]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 809b 	beq.w	8001e42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d0c:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d05c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d141      	bne.n	8001da4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d20:	4b4c      	ldr	r3, [pc, #304]	; (8001e54 <HAL_RCC_OscConfig+0x4ec>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7ff f9a1 	bl	800106c <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2e:	f7ff f99d 	bl	800106c <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e081      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d40:	4b43      	ldr	r3, [pc, #268]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69da      	ldr	r2, [r3, #28]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	019b      	lsls	r3, r3, #6
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	3b01      	subs	r3, #1
 8001d66:	041b      	lsls	r3, r3, #16
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6e:	061b      	lsls	r3, r3, #24
 8001d70:	4937      	ldr	r1, [pc, #220]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d76:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <HAL_RCC_OscConfig+0x4ec>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f976 	bl	800106c <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff f972 	bl	800106c <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e056      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d96:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x41c>
 8001da2:	e04e      	b.n	8001e42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da4:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <HAL_RCC_OscConfig+0x4ec>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7ff f95f 	bl	800106c <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db2:	f7ff f95b 	bl	800106c <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e03f      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f0      	bne.n	8001db2 <HAL_RCC_OscConfig+0x44a>
 8001dd0:	e037      	b.n	8001e42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e032      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_RCC_OscConfig+0x4e8>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d028      	beq.n	8001e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d121      	bne.n	8001e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d11a      	bne.n	8001e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e0e:	4013      	ands	r3, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d111      	bne.n	8001e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	085b      	lsrs	r3, r3, #1
 8001e26:	3b01      	subs	r3, #1
 8001e28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	40023800 	.word	0x40023800
 8001e54:	42470060 	.word	0x42470060

08001e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0cc      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b68      	ldr	r3, [pc, #416]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d90c      	bls.n	8001e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b65      	ldr	r3, [pc, #404]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0b8      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eac:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a58      	ldr	r2, [pc, #352]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4a52      	ldr	r2, [pc, #328]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed0:	4b50      	ldr	r3, [pc, #320]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	494d      	ldr	r1, [pc, #308]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d044      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d119      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e07f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e06f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	4b3b      	ldr	r3, [pc, #236]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e067      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f36:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f023 0203 	bic.w	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4934      	ldr	r1, [pc, #208]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f48:	f7ff f890 	bl	800106c <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7ff f88c 	bl	800106c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e04f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1eb      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d20c      	bcs.n	8001fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e032      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4916      	ldr	r1, [pc, #88]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	490e      	ldr	r1, [pc, #56]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fde:	f000 f821 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	490a      	ldr	r1, [pc, #40]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	5ccb      	ldrb	r3, [r1, r3]
 8001ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fff0 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023c00 	.word	0x40023c00
 8002014:	40023800 	.word	0x40023800
 8002018:	080029f4 	.word	0x080029f4
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002024:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	2300      	movs	r3, #0
 8002036:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800203c:	4b67      	ldr	r3, [pc, #412]	; (80021dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b08      	cmp	r3, #8
 8002046:	d00d      	beq.n	8002064 <HAL_RCC_GetSysClockFreq+0x40>
 8002048:	2b08      	cmp	r3, #8
 800204a:	f200 80bd 	bhi.w	80021c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x34>
 8002052:	2b04      	cmp	r3, #4
 8002054:	d003      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x3a>
 8002056:	e0b7      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002058:	4b61      	ldr	r3, [pc, #388]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800205a:	60bb      	str	r3, [r7, #8]
       break;
 800205c:	e0b7      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800205e:	4b61      	ldr	r3, [pc, #388]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002060:	60bb      	str	r3, [r7, #8]
      break;
 8002062:	e0b4      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002064:	4b5d      	ldr	r3, [pc, #372]	; (80021dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800206c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800206e:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d04d      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207a:	4b58      	ldr	r3, [pc, #352]	; (80021dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	461a      	mov	r2, r3
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	f240 10ff 	movw	r0, #511	; 0x1ff
 800208a:	f04f 0100 	mov.w	r1, #0
 800208e:	ea02 0800 	and.w	r8, r2, r0
 8002092:	ea03 0901 	and.w	r9, r3, r1
 8002096:	4640      	mov	r0, r8
 8002098:	4649      	mov	r1, r9
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	014b      	lsls	r3, r1, #5
 80020a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020a8:	0142      	lsls	r2, r0, #5
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	ebb0 0008 	subs.w	r0, r0, r8
 80020b2:	eb61 0109 	sbc.w	r1, r1, r9
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	018b      	lsls	r3, r1, #6
 80020c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020c4:	0182      	lsls	r2, r0, #6
 80020c6:	1a12      	subs	r2, r2, r0
 80020c8:	eb63 0301 	sbc.w	r3, r3, r1
 80020cc:	f04f 0000 	mov.w	r0, #0
 80020d0:	f04f 0100 	mov.w	r1, #0
 80020d4:	00d9      	lsls	r1, r3, #3
 80020d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020da:	00d0      	lsls	r0, r2, #3
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	eb12 0208 	adds.w	r2, r2, r8
 80020e4:	eb43 0309 	adc.w	r3, r3, r9
 80020e8:	f04f 0000 	mov.w	r0, #0
 80020ec:	f04f 0100 	mov.w	r1, #0
 80020f0:	0259      	lsls	r1, r3, #9
 80020f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80020f6:	0250      	lsls	r0, r2, #9
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4610      	mov	r0, r2
 80020fe:	4619      	mov	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	461a      	mov	r2, r3
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	f7fe f870 	bl	80001ec <__aeabi_uldivmod>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4613      	mov	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e04a      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	099b      	lsrs	r3, r3, #6
 800211c:	461a      	mov	r2, r3
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002126:	f04f 0100 	mov.w	r1, #0
 800212a:	ea02 0400 	and.w	r4, r2, r0
 800212e:	ea03 0501 	and.w	r5, r3, r1
 8002132:	4620      	mov	r0, r4
 8002134:	4629      	mov	r1, r5
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	014b      	lsls	r3, r1, #5
 8002140:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002144:	0142      	lsls	r2, r0, #5
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	1b00      	subs	r0, r0, r4
 800214c:	eb61 0105 	sbc.w	r1, r1, r5
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	018b      	lsls	r3, r1, #6
 800215a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800215e:	0182      	lsls	r2, r0, #6
 8002160:	1a12      	subs	r2, r2, r0
 8002162:	eb63 0301 	sbc.w	r3, r3, r1
 8002166:	f04f 0000 	mov.w	r0, #0
 800216a:	f04f 0100 	mov.w	r1, #0
 800216e:	00d9      	lsls	r1, r3, #3
 8002170:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002174:	00d0      	lsls	r0, r2, #3
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	1912      	adds	r2, r2, r4
 800217c:	eb45 0303 	adc.w	r3, r5, r3
 8002180:	f04f 0000 	mov.w	r0, #0
 8002184:	f04f 0100 	mov.w	r1, #0
 8002188:	0299      	lsls	r1, r3, #10
 800218a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800218e:	0290      	lsls	r0, r2, #10
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	461a      	mov	r2, r3
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	f7fe f824 	bl	80001ec <__aeabi_uldivmod>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4613      	mov	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	0c1b      	lsrs	r3, r3, #16
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	3301      	adds	r3, #1
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	60bb      	str	r3, [r7, #8]
      break;
 80021c6:	e002      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021ca:	60bb      	str	r3, [r7, #8]
      break;
 80021cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ce:	68bb      	ldr	r3, [r7, #8]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800
 80021e0:	00f42400 	.word	0x00f42400
 80021e4:	007a1200 	.word	0x007a1200

080021e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	20000000 	.word	0x20000000

08002200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002204:	f7ff fff0 	bl	80021e8 <HAL_RCC_GetHCLKFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	0a9b      	lsrs	r3, r3, #10
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	4903      	ldr	r1, [pc, #12]	; (8002224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	08002a04 	.word	0x08002a04

08002228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800222c:	f7ff ffdc 	bl	80021e8 <HAL_RCC_GetHCLKFreq>
 8002230:	4602      	mov	r2, r0
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	0b5b      	lsrs	r3, r3, #13
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	4903      	ldr	r1, [pc, #12]	; (800224c <HAL_RCC_GetPCLK2Freq+0x24>)
 800223e:	5ccb      	ldrb	r3, [r1, r3]
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40023800 	.word	0x40023800
 800224c:	08002a04 	.word	0x08002a04

08002250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e03f      	b.n	80022e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7fe fe02 	bl	8000e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2224      	movs	r2, #36	; 0x24
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f9a7 	bl	80025e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b08a      	sub	sp, #40	; 0x28
 80022ee:	af02      	add	r7, sp, #8
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	4613      	mov	r3, r2
 80022f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b20      	cmp	r3, #32
 8002308:	d17c      	bne.n	8002404 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <HAL_UART_Transmit+0x2c>
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e075      	b.n	8002406 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_UART_Transmit+0x3e>
 8002324:	2302      	movs	r3, #2
 8002326:	e06e      	b.n	8002406 <HAL_UART_Transmit+0x11c>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2221      	movs	r2, #33	; 0x21
 800233a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800233e:	f7fe fe95 	bl	800106c <HAL_GetTick>
 8002342:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	88fa      	ldrh	r2, [r7, #6]
 8002348:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	88fa      	ldrh	r2, [r7, #6]
 800234e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002358:	d108      	bne.n	800236c <HAL_UART_Transmit+0x82>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d104      	bne.n	800236c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	e003      	b.n	8002374 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800237c:	e02a      	b.n	80023d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2200      	movs	r2, #0
 8002386:	2180      	movs	r1, #128	; 0x80
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 f8e2 	bl	8002552 <UART_WaitOnFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e036      	b.n	8002406 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10b      	bne.n	80023b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	3302      	adds	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	e007      	b.n	80023c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	3301      	adds	r3, #1
 80023c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1cf      	bne.n	800237e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2200      	movs	r2, #0
 80023e6:	2140      	movs	r1, #64	; 0x40
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f8b2 	bl	8002552 <UART_WaitOnFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e006      	b.n	8002406 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	e000      	b.n	8002406 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002404:	2302      	movs	r3, #2
  }
}
 8002406:	4618      	mov	r0, r3
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b08a      	sub	sp, #40	; 0x28
 8002412:	af02      	add	r7, sp, #8
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	4613      	mov	r3, r2
 800241c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b20      	cmp	r3, #32
 800242c:	f040 808c 	bne.w	8002548 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_UART_Receive+0x2e>
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e084      	b.n	800254a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_UART_Receive+0x40>
 800244a:	2302      	movs	r3, #2
 800244c:	e07d      	b.n	800254a <HAL_UART_Receive+0x13c>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2222      	movs	r2, #34	; 0x22
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800246a:	f7fe fdff 	bl	800106c <HAL_GetTick>
 800246e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	88fa      	ldrh	r2, [r7, #6]
 8002474:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	88fa      	ldrh	r2, [r7, #6]
 800247a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002484:	d108      	bne.n	8002498 <HAL_UART_Receive+0x8a>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d104      	bne.n	8002498 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	e003      	b.n	80024a0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80024a8:	e043      	b.n	8002532 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2200      	movs	r2, #0
 80024b2:	2120      	movs	r1, #32
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f84c 	bl	8002552 <UART_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e042      	b.n	800254a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10c      	bne.n	80024e4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	3302      	adds	r3, #2
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	e01f      	b.n	8002524 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ec:	d007      	beq.n	80024fe <HAL_UART_Receive+0xf0>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <HAL_UART_Receive+0xfe>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	e008      	b.n	800251e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002518:	b2da      	uxtb	r2, r3
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3301      	adds	r3, #1
 8002522:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1b6      	bne.n	80024aa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	e000      	b.n	800254a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002548:	2302      	movs	r3, #2
  }
}
 800254a:	4618      	mov	r0, r3
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	4613      	mov	r3, r2
 8002560:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002562:	e02c      	b.n	80025be <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800256a:	d028      	beq.n	80025be <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <UART_WaitOnFlagUntilTimeout+0x30>
 8002572:	f7fe fd7b 	bl	800106c <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	429a      	cmp	r2, r3
 8002580:	d21d      	bcs.n	80025be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002590:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0201 	bic.w	r2, r2, #1
 80025a0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e00f      	b.n	80025de <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4013      	ands	r3, r2
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d0c3      	beq.n	8002564 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025ec:	b09f      	sub	sp, #124	; 0x7c
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025fe:	68d9      	ldr	r1, [r3, #12]
 8002600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	ea40 0301 	orr.w	r3, r0, r1
 8002608:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800260a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	431a      	orrs	r2, r3
 8002614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	431a      	orrs	r2, r3
 800261a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4313      	orrs	r3, r2
 8002620:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800262c:	f021 010c 	bic.w	r1, r1, #12
 8002630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002636:	430b      	orrs	r3, r1
 8002638:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800263a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002646:	6999      	ldr	r1, [r3, #24]
 8002648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	ea40 0301 	orr.w	r3, r0, r1
 8002650:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4bc5      	ldr	r3, [pc, #788]	; (800296c <UART_SetConfig+0x384>)
 8002658:	429a      	cmp	r2, r3
 800265a:	d004      	beq.n	8002666 <UART_SetConfig+0x7e>
 800265c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4bc3      	ldr	r3, [pc, #780]	; (8002970 <UART_SetConfig+0x388>)
 8002662:	429a      	cmp	r2, r3
 8002664:	d103      	bne.n	800266e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002666:	f7ff fddf 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 800266a:	6778      	str	r0, [r7, #116]	; 0x74
 800266c:	e002      	b.n	8002674 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800266e:	f7ff fdc7 	bl	8002200 <HAL_RCC_GetPCLK1Freq>
 8002672:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800267c:	f040 80b6 	bne.w	80027ec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002682:	461c      	mov	r4, r3
 8002684:	f04f 0500 	mov.w	r5, #0
 8002688:	4622      	mov	r2, r4
 800268a:	462b      	mov	r3, r5
 800268c:	1891      	adds	r1, r2, r2
 800268e:	6439      	str	r1, [r7, #64]	; 0x40
 8002690:	415b      	adcs	r3, r3
 8002692:	647b      	str	r3, [r7, #68]	; 0x44
 8002694:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002698:	1912      	adds	r2, r2, r4
 800269a:	eb45 0303 	adc.w	r3, r5, r3
 800269e:	f04f 0000 	mov.w	r0, #0
 80026a2:	f04f 0100 	mov.w	r1, #0
 80026a6:	00d9      	lsls	r1, r3, #3
 80026a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026ac:	00d0      	lsls	r0, r2, #3
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	1911      	adds	r1, r2, r4
 80026b4:	6639      	str	r1, [r7, #96]	; 0x60
 80026b6:	416b      	adcs	r3, r5
 80026b8:	667b      	str	r3, [r7, #100]	; 0x64
 80026ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	461a      	mov	r2, r3
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	1891      	adds	r1, r2, r2
 80026c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80026c8:	415b      	adcs	r3, r3
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80026d4:	f7fd fd8a 	bl	80001ec <__aeabi_uldivmod>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4ba5      	ldr	r3, [pc, #660]	; (8002974 <UART_SetConfig+0x38c>)
 80026de:	fba3 2302 	umull	r2, r3, r3, r2
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	011e      	lsls	r6, r3, #4
 80026e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026e8:	461c      	mov	r4, r3
 80026ea:	f04f 0500 	mov.w	r5, #0
 80026ee:	4622      	mov	r2, r4
 80026f0:	462b      	mov	r3, r5
 80026f2:	1891      	adds	r1, r2, r2
 80026f4:	6339      	str	r1, [r7, #48]	; 0x30
 80026f6:	415b      	adcs	r3, r3
 80026f8:	637b      	str	r3, [r7, #52]	; 0x34
 80026fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80026fe:	1912      	adds	r2, r2, r4
 8002700:	eb45 0303 	adc.w	r3, r5, r3
 8002704:	f04f 0000 	mov.w	r0, #0
 8002708:	f04f 0100 	mov.w	r1, #0
 800270c:	00d9      	lsls	r1, r3, #3
 800270e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002712:	00d0      	lsls	r0, r2, #3
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	1911      	adds	r1, r2, r4
 800271a:	65b9      	str	r1, [r7, #88]	; 0x58
 800271c:	416b      	adcs	r3, r5
 800271e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	461a      	mov	r2, r3
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	1891      	adds	r1, r2, r2
 800272c:	62b9      	str	r1, [r7, #40]	; 0x28
 800272e:	415b      	adcs	r3, r3
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002732:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002736:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800273a:	f7fd fd57 	bl	80001ec <__aeabi_uldivmod>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4b8c      	ldr	r3, [pc, #560]	; (8002974 <UART_SetConfig+0x38c>)
 8002744:	fba3 1302 	umull	r1, r3, r3, r2
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	2164      	movs	r1, #100	; 0x64
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	3332      	adds	r3, #50	; 0x32
 8002756:	4a87      	ldr	r2, [pc, #540]	; (8002974 <UART_SetConfig+0x38c>)
 8002758:	fba2 2303 	umull	r2, r3, r2, r3
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002764:	441e      	add	r6, r3
 8002766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002768:	4618      	mov	r0, r3
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	1894      	adds	r4, r2, r2
 8002774:	623c      	str	r4, [r7, #32]
 8002776:	415b      	adcs	r3, r3
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
 800277a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800277e:	1812      	adds	r2, r2, r0
 8002780:	eb41 0303 	adc.w	r3, r1, r3
 8002784:	f04f 0400 	mov.w	r4, #0
 8002788:	f04f 0500 	mov.w	r5, #0
 800278c:	00dd      	lsls	r5, r3, #3
 800278e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002792:	00d4      	lsls	r4, r2, #3
 8002794:	4622      	mov	r2, r4
 8002796:	462b      	mov	r3, r5
 8002798:	1814      	adds	r4, r2, r0
 800279a:	653c      	str	r4, [r7, #80]	; 0x50
 800279c:	414b      	adcs	r3, r1
 800279e:	657b      	str	r3, [r7, #84]	; 0x54
 80027a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	461a      	mov	r2, r3
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	1891      	adds	r1, r2, r2
 80027ac:	61b9      	str	r1, [r7, #24]
 80027ae:	415b      	adcs	r3, r3
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80027ba:	f7fd fd17 	bl	80001ec <__aeabi_uldivmod>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4b6c      	ldr	r3, [pc, #432]	; (8002974 <UART_SetConfig+0x38c>)
 80027c4:	fba3 1302 	umull	r1, r3, r3, r2
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	2164      	movs	r1, #100	; 0x64
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	3332      	adds	r3, #50	; 0x32
 80027d6:	4a67      	ldr	r2, [pc, #412]	; (8002974 <UART_SetConfig+0x38c>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	f003 0207 	and.w	r2, r3, #7
 80027e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4432      	add	r2, r6
 80027e8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027ea:	e0b9      	b.n	8002960 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ee:	461c      	mov	r4, r3
 80027f0:	f04f 0500 	mov.w	r5, #0
 80027f4:	4622      	mov	r2, r4
 80027f6:	462b      	mov	r3, r5
 80027f8:	1891      	adds	r1, r2, r2
 80027fa:	6139      	str	r1, [r7, #16]
 80027fc:	415b      	adcs	r3, r3
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002804:	1912      	adds	r2, r2, r4
 8002806:	eb45 0303 	adc.w	r3, r5, r3
 800280a:	f04f 0000 	mov.w	r0, #0
 800280e:	f04f 0100 	mov.w	r1, #0
 8002812:	00d9      	lsls	r1, r3, #3
 8002814:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002818:	00d0      	lsls	r0, r2, #3
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	eb12 0804 	adds.w	r8, r2, r4
 8002822:	eb43 0905 	adc.w	r9, r3, r5
 8002826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4618      	mov	r0, r3
 800282c:	f04f 0100 	mov.w	r1, #0
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	008b      	lsls	r3, r1, #2
 800283a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800283e:	0082      	lsls	r2, r0, #2
 8002840:	4640      	mov	r0, r8
 8002842:	4649      	mov	r1, r9
 8002844:	f7fd fcd2 	bl	80001ec <__aeabi_uldivmod>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4b49      	ldr	r3, [pc, #292]	; (8002974 <UART_SetConfig+0x38c>)
 800284e:	fba3 2302 	umull	r2, r3, r3, r2
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	011e      	lsls	r6, r3, #4
 8002856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002858:	4618      	mov	r0, r3
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	1894      	adds	r4, r2, r2
 8002864:	60bc      	str	r4, [r7, #8]
 8002866:	415b      	adcs	r3, r3
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800286e:	1812      	adds	r2, r2, r0
 8002870:	eb41 0303 	adc.w	r3, r1, r3
 8002874:	f04f 0400 	mov.w	r4, #0
 8002878:	f04f 0500 	mov.w	r5, #0
 800287c:	00dd      	lsls	r5, r3, #3
 800287e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002882:	00d4      	lsls	r4, r2, #3
 8002884:	4622      	mov	r2, r4
 8002886:	462b      	mov	r3, r5
 8002888:	1814      	adds	r4, r2, r0
 800288a:	64bc      	str	r4, [r7, #72]	; 0x48
 800288c:	414b      	adcs	r3, r1
 800288e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4618      	mov	r0, r3
 8002896:	f04f 0100 	mov.w	r1, #0
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	008b      	lsls	r3, r1, #2
 80028a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028a8:	0082      	lsls	r2, r0, #2
 80028aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80028ae:	f7fd fc9d 	bl	80001ec <__aeabi_uldivmod>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4b2f      	ldr	r3, [pc, #188]	; (8002974 <UART_SetConfig+0x38c>)
 80028b8:	fba3 1302 	umull	r1, r3, r3, r2
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	2164      	movs	r1, #100	; 0x64
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	3332      	adds	r3, #50	; 0x32
 80028ca:	4a2a      	ldr	r2, [pc, #168]	; (8002974 <UART_SetConfig+0x38c>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d6:	441e      	add	r6, r3
 80028d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028da:	4618      	mov	r0, r3
 80028dc:	f04f 0100 	mov.w	r1, #0
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	1894      	adds	r4, r2, r2
 80028e6:	603c      	str	r4, [r7, #0]
 80028e8:	415b      	adcs	r3, r3
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028f0:	1812      	adds	r2, r2, r0
 80028f2:	eb41 0303 	adc.w	r3, r1, r3
 80028f6:	f04f 0400 	mov.w	r4, #0
 80028fa:	f04f 0500 	mov.w	r5, #0
 80028fe:	00dd      	lsls	r5, r3, #3
 8002900:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002904:	00d4      	lsls	r4, r2, #3
 8002906:	4622      	mov	r2, r4
 8002908:	462b      	mov	r3, r5
 800290a:	eb12 0a00 	adds.w	sl, r2, r0
 800290e:	eb43 0b01 	adc.w	fp, r3, r1
 8002912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4618      	mov	r0, r3
 8002918:	f04f 0100 	mov.w	r1, #0
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	008b      	lsls	r3, r1, #2
 8002926:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800292a:	0082      	lsls	r2, r0, #2
 800292c:	4650      	mov	r0, sl
 800292e:	4659      	mov	r1, fp
 8002930:	f7fd fc5c 	bl	80001ec <__aeabi_uldivmod>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <UART_SetConfig+0x38c>)
 800293a:	fba3 1302 	umull	r1, r3, r3, r2
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2164      	movs	r1, #100	; 0x64
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	3332      	adds	r3, #50	; 0x32
 800294c:	4a09      	ldr	r2, [pc, #36]	; (8002974 <UART_SetConfig+0x38c>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	f003 020f 	and.w	r2, r3, #15
 8002958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4432      	add	r2, r6
 800295e:	609a      	str	r2, [r3, #8]
}
 8002960:	bf00      	nop
 8002962:	377c      	adds	r7, #124	; 0x7c
 8002964:	46bd      	mov	sp, r7
 8002966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800296a:	bf00      	nop
 800296c:	40011000 	.word	0x40011000
 8002970:	40011400 	.word	0x40011400
 8002974:	51eb851f 	.word	0x51eb851f

08002978 <__libc_init_array>:
 8002978:	b570      	push	{r4, r5, r6, lr}
 800297a:	4d0d      	ldr	r5, [pc, #52]	; (80029b0 <__libc_init_array+0x38>)
 800297c:	4c0d      	ldr	r4, [pc, #52]	; (80029b4 <__libc_init_array+0x3c>)
 800297e:	1b64      	subs	r4, r4, r5
 8002980:	10a4      	asrs	r4, r4, #2
 8002982:	2600      	movs	r6, #0
 8002984:	42a6      	cmp	r6, r4
 8002986:	d109      	bne.n	800299c <__libc_init_array+0x24>
 8002988:	4d0b      	ldr	r5, [pc, #44]	; (80029b8 <__libc_init_array+0x40>)
 800298a:	4c0c      	ldr	r4, [pc, #48]	; (80029bc <__libc_init_array+0x44>)
 800298c:	f000 f820 	bl	80029d0 <_init>
 8002990:	1b64      	subs	r4, r4, r5
 8002992:	10a4      	asrs	r4, r4, #2
 8002994:	2600      	movs	r6, #0
 8002996:	42a6      	cmp	r6, r4
 8002998:	d105      	bne.n	80029a6 <__libc_init_array+0x2e>
 800299a:	bd70      	pop	{r4, r5, r6, pc}
 800299c:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a0:	4798      	blx	r3
 80029a2:	3601      	adds	r6, #1
 80029a4:	e7ee      	b.n	8002984 <__libc_init_array+0xc>
 80029a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029aa:	4798      	blx	r3
 80029ac:	3601      	adds	r6, #1
 80029ae:	e7f2      	b.n	8002996 <__libc_init_array+0x1e>
 80029b0:	08002a14 	.word	0x08002a14
 80029b4:	08002a14 	.word	0x08002a14
 80029b8:	08002a14 	.word	0x08002a14
 80029bc:	08002a18 	.word	0x08002a18

080029c0 <memset>:
 80029c0:	4402      	add	r2, r0
 80029c2:	4603      	mov	r3, r0
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d100      	bne.n	80029ca <memset+0xa>
 80029c8:	4770      	bx	lr
 80029ca:	f803 1b01 	strb.w	r1, [r3], #1
 80029ce:	e7f9      	b.n	80029c4 <memset+0x4>

080029d0 <_init>:
 80029d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d2:	bf00      	nop
 80029d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d6:	bc08      	pop	{r3}
 80029d8:	469e      	mov	lr, r3
 80029da:	4770      	bx	lr

080029dc <_fini>:
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029de:	bf00      	nop
 80029e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e2:	bc08      	pop	{r3}
 80029e4:	469e      	mov	lr, r3
 80029e6:	4770      	bx	lr
